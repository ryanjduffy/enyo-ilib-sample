{"version":3,"sources":["lib/enyo-ilib/ilib/lib/ilib.js","lib/enyo-ilib/ilib/lib/MathUtils.js","lib/enyo-ilib/ilib/lib/Path.js","lib/enyo-ilib/src/packedbuffer.js","lib/enyo-ilib/ilib/lib/SearchUtils.js","lib/enyo-ilib/ilib/lib/JulianDay.js","lib/enyo-ilib/ilib/lib/Calendar.js","lib/enyo-ilib/ilib/lib/JSUtils.js","lib/enyo-ilib/ilib/lib/Loader.js","lib/enyo-ilib/ilib/lib/HebrewCal.js","lib/enyo-ilib/ilib/lib/IslamicCal.js","lib/enyo-ilib/ilib/lib/JulianCal.js","lib/enyo-ilib/ilib/lib/PersianAlgoCal.js","lib/enyo-ilib/src/zoneinfo.js","lib/enyo-ilib/ilib/lib/Locale.js","lib/enyo-ilib/ilib/lib/RataDie.js","lib/enyo-ilib/ilib/lib/Utils.js","lib/enyo-ilib/ilib/lib/HebrewRataDie.js","lib/enyo-ilib/ilib/lib/IslamicRataDie.js","lib/enyo-ilib/ilib/lib/JulianRataDie.js","lib/enyo-ilib/ilib/lib/PersAlgoRataDie.js","lib/enyo-ilib/ilib/lib/LocaleInfo.js","lib/enyo-ilib/ilib/lib/IString.js","lib/enyo-ilib/ilib/lib/ScriptInfo.js","lib/enyo-ilib/ilib/lib/GregorianCal.js","lib/enyo-ilib/ilib/lib/EthiopicCal.js","lib/enyo-ilib/ilib/lib/IDate.js","lib/enyo-ilib/ilib/lib/CalendarFactory.js","lib/enyo-ilib/ilib/lib/ResBundle.js","lib/enyo-ilib/ilib/lib/CaseMapper.js","lib/enyo-ilib/ilib/lib/GregRataDie.js","lib/enyo-ilib/ilib/lib/ThaiSolarCal.js","lib/enyo-ilib/ilib/lib/CopticCal.js","lib/enyo-ilib/ilib/lib/EthiopicRataDie.js","lib/enyo-ilib/ilib/lib/TimeZone.js","lib/enyo-ilib/ilib/lib/CopticRataDie.js","lib/enyo-ilib/ilib/lib/GregorianDate.js","lib/enyo-ilib/ilib/lib/EthiopicDate.js","lib/enyo-ilib/ilib/lib/HebrewDate.js","lib/enyo-ilib/ilib/lib/IslamicDate.js","lib/enyo-ilib/ilib/lib/JulianDate.js","lib/enyo-ilib/ilib/lib/PersianAlgoDate.js","lib/enyo-ilib/ilib/lib/ThaiSolarDate.js","lib/enyo-ilib/ilib/lib/Astro.js","lib/enyo-ilib/ilib/lib/CopticDate.js","lib/enyo-ilib/ilib/lib/HanCal.js","lib/enyo-ilib/ilib/lib/PersRataDie.js","lib/enyo-ilib/ilib/lib/HanRataDie.js","lib/enyo-ilib/ilib/lib/PersianCal.js","lib/enyo-ilib/ilib/lib/HanDate.js","lib/enyo-ilib/ilib/lib/PersianDate.js","lib/enyo-ilib/src/dates.js","lib/enyo-ilib/src/glue.js","lib/enyo-ilib/index.js"],"names":[],"mappingstqjnnjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvxRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxhjncxxhpkzktvrlnpjhpvnghvlzhxgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfpdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/*\n * ilib.js - define the ilib name space\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @namespace The global namespace that contains general ilib functions useful\n * to all of ilib\n * \n * @version // !macro ilibVersion\n */\nvar ilib = ilib || {};\n\n/** @private */\nilib._ver = function() {\n    return // !macro ilibVersion\n    ;\n};\n\n/**\n * Return the current version of ilib.\n * \n * @static\n * @return {string} a version string for this instance of ilib\n */\nilib.getVersion = function () {\n\t// TODO: need some way of getting the version number under dynamic load code\n    return ilib._ver() || \"11.0\"; \n};\n\n/**\n * Place where resources and such are eventually assigned.\n */\nilib.data = {\n\t/** @type {{ccc:Object.<string,number>,nfd:Object.<string,string>,nfc:Object.<string,string>,nfkd:Object.<string,string>,nfkc:Object.<string,string>}} */\n    norm: {\n    \tccc: {},\n    \tnfd: {},\n    \tnfc: {},\n    \tnfkd: {},\n    \tnfkc: {}\n    },\n    zoneinfo: {\n        \"Etc/UTC\":{\"o\":\"0:0\",\"f\":\"UTC\"},\n        \"local\":{\"f\":\"local\"}\n    },\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_c: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_l: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_m: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_p: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_z: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ scriptToRange: null,\n    /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */ dateformats: null,\n    /** @type {null|Array.<string>} */ timezones: []\n};\n\n/*\nif (typeof(window) !== 'undefined') {\n    window[\"ilib\"] = ilib;\n}\n*/\n\n// export ilib for use as a module in nodejs\nif (typeof(module) !== 'undefined') {\n    module.exports = ilib;\n    module.exports.ilib = ilib;  // for backwards compatibility with older versions of ilib\n}\n\n/**\n * Sets the pseudo locale. Pseudolocalization (or pseudo-localization) is used for testing\n * internationalization aspects of software. Instead of translating the text of the software\n * into a foreign language, as in the process of localization, the textual elements of an application\n * are replaced with an altered version of the original language.These specific alterations make\n * the original words appear readable, but include the most problematic characteristics of \n * the world's languages: varying length of text or characters, language direction, and so on.\n * Regular Latin pseudo locale: eu-ES and RTL pseudo locale: ps-AF\n * \n * @param {string|undefined|null} localename the locale specifier for the pseudo locale\n */\nilib.setAsPseudoLocale = function (localename) {\n   if (localename) {\n\t   ilib.pseudoLocales.push(localename)\n   }\n};\n\n/**\n * Reset the list of pseudo locales back to the default single locale of zxx-XX.\n * @static\n */\nilib.clearPseudoLocales = function() {\n\tilib.pseudoLocales = [\n        \"zxx-XX\",\n        \"zxx-Cyrl-XX\",\n        \"zxx-Hans-XX\",\n        \"zxx-Hebr-XX\"\n    ];\n};\n\nilib.clearPseudoLocales();\n\n/**\n * Return the name of the platform\n * @private\n * @static\n * @return {string} string naming the platform\n */\nilib._getPlatform = function () {\n    if (!ilib._platform) {\n    \ttry {\n    \t\tif (typeof(java.lang.Object) !== 'undefined') {\n    \t\t\tilib._platform = (typeof(process) !== 'undefined') ? \"trireme\" : \"rhino\";\n    \t\t\treturn ilib._platform;\n    \t\t}\n    \t} catch (e) {}\n    \t\n        if (typeof(process) !== 'undefined' && typeof(module) !== 'undefined') {\n            ilib._platform = \"nodejs\";\n        } else if (typeof(Qt) !== 'undefined') {\n            ilib._platform = \"qt\";\n        } else if (typeof(window) !== 'undefined') {\n            ilib._platform = (typeof(PalmSystem) !== 'undefined') ? \"webos\" : \"browser\";\n        } else {\n            ilib._platform = \"unknown\";\n        }\n    }    \n    return ilib._platform;\n};\n\n/**\n * If this ilib is running in a browser, return the name of that browser.\n * @private\n * @static\n * @return {string|undefined} the name of the browser that this is running in (\"firefox\", \"chrome\", \"ie\", \n * \"safari\", or \"opera\"), or undefined if this is not running in a browser or if\n * the browser name could not be determined \n */\nilib._getBrowser = function () {\n\tvar browser = undefined;\n\tif (ilib._getPlatform() === \"browser\") {\n\t\tif (navigator && navigator.userAgent) {\n\t\t\tif (navigator.userAgent.indexOf(\"Firefox\") > -1) {\n\t\t\t\tbrowser = \"firefox\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\"Opera\") > -1) {\n\t\t\t\tbrowser = \"opera\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\"Chrome\") > -1) {\n\t\t\t\tbrowser = \"chrome\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\" .NET\") > -1) {\n\t\t\t\tbrowser = \"ie\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\"Safari\") > -1) {\n\t\t\t\t// chrome also has the string Safari in its userAgent, but the chrome case is \n\t\t\t\t// already taken care of above\n\t\t\t\tbrowser = \"safari\";\n\t\t\t}\n\t\t}\n\t}\n\treturn browser;\n};\n\n/**\n * Return true if the global variable is defined on this platform.\n * @private\n * @static\n * @param {string} name the name of the variable to check\n * @return {boolean} true if the global variable is defined on this platform, false otherwise\n */\nilib._isGlobal = function(name) {\n    switch (ilib._getPlatform()) {\n        case \"rhino\":\n            var top = (function() {\n              return (typeof global === 'object') ? global : this;\n            })();\n            return typeof(top[name]) !== 'undefined';\n        case \"nodejs\":\n        case \"trireme\":\n            var root = typeof(global) !== 'undefined' ? global : this;\n            return root && typeof(root[name]) !== 'undefined';\n        case \"qt\":\n        \treturn false;\n        default:\n        \ttry {\n        \t\treturn window && typeof(window[name]) !== 'undefined';\n        \t} catch (e) {\n        \t\treturn false;\n        \t}\n    }\n};\n\n/**\n * Sets the default locale for all of ilib. This locale will be used\n * when no explicit locale is passed to any ilib class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\". If a type of parameter is string, \n * ilib will take only well-formed BCP-47 tag  <p>\n * \n * \n * @static\n * @param {string|undefined|null} spec the locale specifier for the default locale\n */\nilib.setLocale = function (spec) {\n    if (typeof(spec) === 'string' || !spec) {\n        ilib.locale = spec;\n    }\n    // else ignore other data types, as we don't have the dependencies\n    // to look into them to find a locale\n};\n\n/**\n * Return the default locale for all of ilib if one has been set. This \n * locale will be used when no explicit locale is passed to any ilib \n * class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\".<p>\n * \n * \n * @static\n * @return {string} the locale specifier for the default locale\n */\nilib.getLocale = function () {\n    if (typeof(ilib.locale) !== 'string') {\n    \tvar plat = ilib._getPlatform();\n    \tswitch (plat) {\n    \t\tcase 'browser':\n            \t// running in a browser\n                if(typeof(navigator.language) !== 'undefined'){\n                    ilib.locale = navigator.language.substring(0,3) + navigator.language.substring(3,5).toUpperCase();  // FF/Opera/Chrome/Webkit\n                }\n                if (!ilib.locale) {\n                    // IE on Windows\n                    var lang = typeof(navigator.browserLanguage) !== 'undefined' ? \n                        navigator.browserLanguage :\n                        (typeof(navigator.userLanguage) !== 'undefined' ? \n                            navigator.userLanguage :\n                            (typeof(navigator.systemLanguage) !== 'undefined' ?\n                                navigator.systemLanguage :\n                                undefined));\n                    if (typeof(lang) !== 'undefined' && lang) {\n                        // for some reason, MS uses lower case region tags\n                        ilib.locale = lang.substring(0,3) + lang.substring(3,5).toUpperCase();\n                    }\n                }\n                break;\n    \t\tcase 'webos':\n                // webOS\n                if (typeof(PalmSystem.locales) !== 'undefined' && \n                \t\ttypeof(PalmSystem.locales.UI) != 'undefined' && \n                \t\tPalmSystem.locales.UI.length > 0) {\n                    ilib.locale = PalmSystem.locales.UI;\n                } else if (typeof(PalmSystem.locale) !== 'undefined') {\n                \tilib.locale = PalmSystem.locale;\n                }\n    \t\t\tbreak;\n    \t\tcase 'rhino':\n                if (typeof(environment) !== 'undefined' && environment.user && typeof(environment.user.language) === 'string' && environment.user.language.length > 0) {\n                \t// running under plain rhino\n                    ilib.locale = environment.user.language;\n                    if (typeof(environment.user.country) === 'string' && environment.user.country.length > 0) {\n                        ilib.locale += '-' + environment.user.country;\n                    }\n                }\n                break;\n    \t\tcase \"trireme\":\n            \t// under trireme on rhino emulating nodejs\n            \tvar lang = process.env.LANG || process.env.LANGUAGE || process.env.LC_ALL;\n                // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\n                // where language and region are the correct ISO codes separated by\n                // an underscore. This translate it back to the BCP-47 form.\n                if (lang && typeof(lang) !== 'undefined') {\n                    ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();\n                }\n            \tbreak;\n    \t\tcase 'nodejs':\n                // running under nodejs\n                var lang = process.env.LANG || process.env.LC_ALL;\n                // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\n                // where language and region are the correct ISO codes separated by\n                // an underscore. This translate it back to the BCP-47 form.\n                if (lang && typeof(lang) !== 'undefined') {\n                    ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();\n                }\n    \t\t\tbreak;\n    \t\tcase 'qt':\n            \t// running in the Javascript engine under Qt/QML\n            \tvar locobj = Qt.locale();\n            \tvar lang = locobj.name && locobj.name.replace(\"_\", \"-\") || \"en-US\";\n    \t\t\tbreak;\n    \t}\n        ilib.locale = typeof(ilib.locale) === 'string' ? ilib.locale : 'en-US';\n    }\n    return ilib.locale;\n};\n\n/**\n * Sets the default time zone for all of ilib. This time zone will be used when\n * no explicit time zone is passed to any ilib class. If the default time zone\n * is not set, ilib will attempt to use the time zone of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the UTC zone \"Etc/UTC\".<p>\n * \n * \n * @static\n * @param {string} tz the name of the time zone to set as the default time zone\n */\nilib.setTimeZone = function (tz) {\n    ilib.tz = tz || ilib.tz;\n};\n\n/**\n * Return the default time zone for all of ilib if one has been set. This \n * time zone will be used when no explicit time zone is passed to any ilib \n * class. If the default time zone\n * is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the zone \"local\".<p>\n * \n * \n * @static\n * @return {string} the default time zone for ilib\n */\nilib.getTimeZone = function() {\n    if (typeof(ilib.tz) === 'undefined') {\n        if (typeof(navigator) !== 'undefined' && typeof(navigator.timezone) !== 'undefined') {\n            // running in a browser\n            if (navigator.timezone.length > 0) {\n                ilib.tz = navigator.timezone;\n            }\n        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.timezone) !== 'undefined') {\n            // running in webkit on webOS\n            if (PalmSystem.timezone.length > 0) {\n                ilib.tz = PalmSystem.timezone;\n            }\n        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {\n            // running under rhino\n            if (typeof(environment.user.timezone) !== 'undefined' && environment.user.timezone.length > 0) {\n                ilib.tz = environment.user.timezone;\n            }\n        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {\n            // running in nodejs\n            if (process.env.TZ && typeof(process.env.TZ) !== \"undefined\") {\n                ilib.tz = process.env.TZ;\n            }\n        }\n        \n        ilib.tz = ilib.tz || \"local\"; \n    }\n\n    return ilib.tz;\n};\n\n/**\n * @class\n * Defines the interface for the loader class for ilib. The main method of the\n * loader object is loadFiles(), which loads a set of requested locale data files\n * from where-ever it is stored.\n * @interface\n */\nilib.Loader = function() {};\n\n/**\n * Load a set of files from where-ever it is stored.<p>\n * \n * This is the main function define a callback function for loading missing locale \n * data or resources.\n * If this copy of ilib is assembled without including the required locale data\n * or resources, then that data can be lazy loaded dynamically when it is \n * needed by calling this method. Each ilib class will first\n * check for the existence of data under ilib.data, and if it is not there, \n * it will attempt to load it by calling this method of the laoder, and then place\n * it there.<p>\n * \n * Suggested implementations of this method might load files \n * directly from disk under nodejs or rhino, or within web pages, to load \n * files from the server with XHR calls.<p>\n * \n * The first parameter to this method, paths, is an array of relative paths within \n * the ilib dir structure for the \n * requested data. These paths will already have the locale spec integrated \n * into them, so no further tweaking needs to happen to load the data. Simply\n * load the named files. The second\n * parameter tells the loader whether to load the files synchronously or asynchronously.\n * If the sync parameters is false, then the onLoad function must also be specified.\n * The third parameter gives extra parameters to the loader passed from the calling\n * code. This may contain any property/value pairs.  The last parameter, callback,\n * is a callback function to call when all of the data is finishing loading. Make\n * sure to call the callback with the context of \"this\" so that the caller has their \n * context back again.<p>\n * \n * The loader function must be able to operate either synchronously or asychronously. \n * If the loader function is called with an undefined callback function, it is\n * expected to load the data synchronously, convert it to javascript\n * objects, and return the array of json objects as the return value of the \n * function. If the loader \n * function is called with a callback function, it may load the data \n * synchronously or asynchronously (doesn't matter which) as long as it calls\n * the callback function with the data converted to a javascript objects\n * when it becomes available. If a particular file could not be loaded, the \n * loader function should put undefined into the corresponding entry in the\n * results array. \n * Note that it is important that all the data is loaded before the callback\n * is called.<p>\n * \n * An example implementation for nodejs might be:\n * \n * <pre>\n * var fs = require(\"fs\");\n * \n * var myLoader = function() {};\n * myLoader.prototype = new Loader();\n * myLoader.prototype.constructor = myLoader;\n * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {\n *    if (sync) {\n *        var ret = [];\n *        // synchronous load -- just return the result\n *        paths.forEach(function (path) {\n *            var json = fs.readFileSync(path, \"utf-8\");\n *            ret.push(json ? JSON.parse(json) : undefined);\n *        });\n *        \n *        return ret;\n *    }\n *    this.callback = callback;\n *\n *    // asynchronous\n *    this.results = [];\n *    this._loadFilesAsync(paths);\n * }\n * myLoader.prototype._loadFilesAsync = function (paths) {\n *    if (paths.length > 0) {\n *        var file = paths.shift();\n *        fs.readFile(file, \"utf-8\", function(err, json) {\n *            this.results.push(err ? undefined : JSON.parse(json));\n *            // call self recursively so that the callback is only called at the end\n *            // when all the files are loaded sequentially\n *            if (paths.length > 0) {\n *                this._loadFilesAsync(paths);\n *            } else {\n *                this.callback(this.results);\n *            }\n *        });\n *     }\n * }\n * \n * // bind to \"this\" so that \"this\" is relative to your own instance\n * ilib.setLoaderCallback(new myLoader());\n * </pre>\n\n * @param {Array.<string>} paths An array of paths to load from wherever the files are stored \n * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously\n * @param {Object} params an object with any extra parameters for the loader. These can be \n * anything. The caller of the ilib class passes these parameters in. Presumably, the code that\n * calls ilib and the code that provides the loader are together and can have a private \n * agreement between them about what the parameters should contain.\n * @param {function(Object)} callback function to call when the files are all loaded. The \n * parameter of the callback function is the contents of the files.\n */\nilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};\n\n/**\n * Return all files available for loading using this loader instance.\n * This method returns an object where the properties are the paths to\n * directories where files are loaded from and the values are an array\n * of strings containing the relative paths under the directory of each\n * file that can be loaded.<p>\n * \n * Example:\n *  <pre>\n *  {\n *      \"/usr/share/javascript/ilib/locale\": [\n *          \"dateformats.json\",\n *          \"aa/dateformats.json\",\n *          \"af/dateformats.json\",\n *          \"agq/dateformats.json\",\n *          \"ak/dateformats.json\",\n *          ...\n *          \"zxx/dateformats.json\"\n *      ]\n *  }\n *  </pre>\n * @returns {Object} a hash containing directory names and\n * paths to file that can be loaded by this loader \n */\nilib.Loader.prototype.listAvailableFiles = function() {};\n\n/**\n * Return true if the file in the named path is available for loading using\n * this loader. The path may be given as an absolute path, in which case\n * only that file is checked, or as a relative path, in which case, the\n * relative path may appear underneath any of the directories that the loader\n * knows about.\n * @returns {boolean} true if the file in the named path is available for loading, and\n * false otherwise\n */\nilib.Loader.prototype.isAvailable = function(path) {};\n\n/**\n * Set the custom loader used to load ilib's locale data in your environment. \n * The instance passed in must implement the Loader interface. See the\n * Loader class documentation for more information about loaders. \n * \n * @static\n * @param {ilib.Loader} loader class to call to access the requested data.\n * @return {boolean} true if the loader was installed correctly, or false\n * if not\n */\nilib.setLoaderCallback = function(loader) {\n    // only a basic check\n    if ((typeof(loader) === 'object' && typeof(loader.loadFiles) === 'function') || \n            typeof(loader) === 'function' || typeof(loader) === 'undefined') {\n        //console.log(\"setting callback loader to \" + (loader ? loader.name : \"undefined\"));\n        ilib._load = loader;\n        return true;\n    }\n    return false;\n};\n\n/**\n * Return the custom Loader instance currently in use with this instance \n * of ilib. If there is no loader, this method returns undefined.\n * \n * @protected\n * @static\n * @return {ilib.Loader|undefined} the loader instance currently in use, or \n * undefined if there is no such loader\n */\nilib.getLoader = function() {\n\treturn ilib._load;\n};\n\n/**\n * Test whether an object in an javascript array. \n * \n * @static\n * @param {*} object The object to test\n * @return {boolean} return true if the object is an array\n * and false otherwise\n */\nilib.isArray = function(object) {\n\tvar o;\n\tif (typeof(object) === 'object') {\n\t\to = /** @type {Object|null|undefined} */ object;\n\t\treturn Object.prototype.toString.call(o) === '[object Array]';\n\t}\n\treturn false; \n};\n\n/**\n * Extend object1 by mixing in everything from object2 into it. The objects\n * are deeply extended, meaning that this method recursively descends the\n * tree in the objects and mixes them in at each level. Arrays are extended\n * by concatenating the elements of object2 onto those of object1.  \n * \n * @static\n * @param {Object} object1 the target object to extend\n * @param {Object=} object2 the object to mix in to object1\n * @return {Object} returns object1\n */\nilib.extend = function (object1, object2) {\n\tvar prop = undefined;\n\tif (object2) {\n\t\tfor (prop in object2) {\n\t\t\tif (prop && typeof(object2[prop]) !== 'undefined') {\n\t\t\t\tif (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\n\t\t\t\t\t//console.log(\"Merging array prop \" + prop);\n\t\t\t\t\tobject1[prop] = object1[prop].concat(object2[prop]);\n\t\t\t\t} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {\n\t\t\t\t\t//console.log(\"Merging object prop \" + prop);\n\t\t\t\t\tif (prop !== \"ilib\") {\n\t\t\t\t\t\tobject1[prop] = ilib.extend(object1[prop], object2[prop]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//console.log(\"Copying prop \" + prop);\n\t\t\t\t\t// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\n\t\t\t\t\tobject1[prop] = object2[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn object1;\n};\n\n/**\n * If Function.prototype.bind does not exist in this JS engine, this\n * function reimplements it in terms of older JS functions.\n * bind() doesn't exist in many older browsers.\n * \n * @static\n * @param {Object} scope object that the method should operate on\n * @param {function(...)} method method to call\n * @return {function(...)|undefined} function that calls the given method \n * in the given scope with all of its arguments properly attached, or\n * undefined if there was a problem with the arguments\n */\nilib.bind = function(scope, method/*, bound arguments*/){\n\tif (!scope || !method) {\n\t\treturn undefined;\n\t}\n\t\n\t/** @protected \n\t * @param {Arguments} inArrayLike\n\t * @param {number=} inOffset\n\t */\n\tfunction cloneArray(inArrayLike, inOffset) {\n\t\tvar arr = [];\n\t\tfor(var i = inOffset || 0, l = inArrayLike.length; i<l; i++){\n\t\t\tarr.push(inArrayLike[i]);\n\t\t}\n\t\treturn arr;\n\t}\n\n\tif (typeof(method) === 'function') {\n\t\tvar func, args = cloneArray(arguments, 2);\n\t\tif (typeof(method.bind) === 'function') {\n\t\t\tfunc = method.bind.apply(method, [scope].concat(args));\n\t\t} else {\n\t\t\tfunc = function() {\n\t\t\t\tvar nargs = cloneArray(arguments);\n\t\t\t\t// invoke with collected args\n\t\t\t\treturn method.apply(scope, args.concat(nargs));\n\t\t\t};\n\t\t}\n\t\treturn func;\n\t}\n\treturn undefined;\n};\n\n/**\n * @private\n */\nilib._dyncode = false;\n\n/**\n * Return true if this copy of ilib is using dynamically loaded code. It returns\n * false for pre-assembled code.\n * \n * @static\n * @return {boolean} true if this ilib uses dynamically loaded code, and false otherwise\n */\nilib.isDynCode = function() {\n\treturn ilib._dyncode;\n};\n\n/**\n * @private\n */\nilib._dyndata = false;\n\n/**\n * Return true if this copy of ilib is using dynamically loaded locale data. It returns\n * false for pre-assembled data.\n * \n * @static\n * @return {boolean} true if this ilib uses dynamically loaded locale data, and false otherwise\n */\nilib.isDynData = function() {\n\treturn ilib._dyndata;\n};\n\nilib._loadtime = new Date().getTime();\n","/*\n * MathUtils.js - Misc math utility routines\n * \n * Copyright © 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MathUtils = {};\n\n/**\n * Return the sign of the given number. If the sign is negative, this function\n * returns -1. If the sign is positive or zero, this function returns 1.\n * @static\n * @param {number} num the number to test\n * @return {number} -1 if the number is negative, and 1 otherwise\n */\nMathUtils.signum = function (num) {\n\tvar n = num;\n\tif (typeof(num) === 'string') {\n\t\tn = parseInt(num, 10);\n\t} else if (typeof(num) !== 'number') {\n\t\treturn 1;\n\t}\n\treturn (n < 0) ? -1 : 1;\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.floor = function (num) {\n\treturn Math.floor(num);\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.ceiling = function (num) {\n\treturn Math.ceil(num);\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.down = function (num) {\n\treturn (num < 0) ? Math.ceil(num) : Math.floor(num);\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.up = function (num) {\n\treturn (num < 0) ? Math.floor(num) : Math.ceil(num);\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.halfup = function (num) {\n\treturn (num < 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.halfdown = function (num) {\n\treturn (num < 0) ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.halfeven = function (num) {\n\treturn (Math.floor(num) % 2 === 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\n};\n\n/**\n * @static\n * @protected\n * @param {number} num number to round\n * @return {number} rounded number\n */\nMathUtils.halfodd = function (num) {\n\treturn (Math.floor(num) % 2 !== 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\n};\n\n/**\n * Do a proper modulo function. The Javascript % operator will give the truncated\n * division algorithm, but for calendrical calculations, we need the Euclidean\n * division algorithm where the remainder of any division, whether the dividend\n * is negative or not, is always a positive number in the range [0, modulus).<p>\n * \n * \n * @static\n * @param {number} dividend the number being divided\n * @param {number} modulus the number dividing the dividend. This should always be a positive number.\n * @return the remainder of dividing the dividend by the modulus.  \n */\nMathUtils.mod = function (dividend, modulus) {\n\tif (modulus == 0) {\n\t\treturn 0;\n\t}\n\tvar x = dividend % modulus;\n\treturn (x < 0) ? x + modulus : x;\n};\n\n/**\n * Do a proper adjusted modulo function. The Javascript % operator will give the truncated\n * division algorithm, but for calendrical calculations, we need the Euclidean\n * division algorithm where the remainder of any division, whether the dividend\n * is negative or not, is always a positive number in the range (0, modulus]. The adjusted\n * modulo function differs from the regular modulo function in that when the remainder is\n * zero, the modulus should be returned instead.<p>\n * \n * \n * @static\n * @param {number} dividend the number being divided\n * @param {number} modulus the number dividing the dividend. This should always be a positive number.\n * @return the remainder of dividing the dividend by the modulus.  \n */\nMathUtils.amod = function (dividend, modulus) {\n\tif (modulus == 0) {\n\t\treturn 0;\n\t}\n\tvar x = dividend % modulus;\n\treturn (x <= 0) ? x + modulus : x;\n};\n\nmodule.exports = MathUtils;\n","/*\n * Path.js - minimal pure js implementation of the nodejs path module\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Path = {\n\t/**\n\t * Return the parent directory of the given pathname\n\t * similar to the dirname shell function.  \n\t * @static\n\t * @param {string} pathname path to check\n\t * @return {string} the parent dir of the given pathname\n\t */\n\tdirname: function(pathname) {\n\t\tpathname = pathname.replace(/\\\\/g, \"/\");\n\t\tvar i = pathname.lastIndexOf(\"/\");\n\t\treturn i !== -1 ? pathname.substring(0,i) : pathname;\n\t},\n\t\n\t/**\n\t * Return the normalized version of the given pathname. This\n\t * cleans up things like double directory separators and such.\n\t * @static\n\t * @param {string} pathname path to check\n\t * @return {string} the normalized version of the given pathname\n\t */\n\tnormalize: function(pathname) {\n\t\tif (pathname) {\n\t\t\tpathname = pathname.replace(/\\\\/g, \"/\");\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\n\t\t\tpathname = pathname.replace(/\\/[^/]*[^\\./]\\/\\.\\./g, \"/.\");\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\n\t\t\tpathname = pathname.replace(/\\/\\.\\//g, \"/\");\n\t\t\tpathname = pathname.replace(/^\\.\\//, \"\");\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\n\t\t\tpathname = pathname.replace(/\\/\\.$/, \"/\");\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\n\t\t\tif (pathname.length > 1) pathname = pathname.replace(/\\/$/, \"\");\n\t\t\tif (pathname.length === 0) pathname = '.';\n\t\t}\n\t\treturn pathname;\n\t},\n\t\n\t/**\n\t * Return a path that is the concatenation of all the of the arguments\n\t * which each name a path segment.\n\t * @static\n\t * @param {...string} var_args\n\t * @return {string} the concatenated pathname\n\t */\n\tjoin: function(var_args) {\n\t\tvar arr = [];\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tarr.push(arguments[i] && arguments[i].length > 0 ? arguments[i] : \".\");\n\t\t}\n\t\treturn Path.normalize(arr.join(\"/\"));\n\t}\n};\n\nmodule.exports = Path;\n","/*\n * packedbuffer.js - represent a packed buffer of bytes\n * \n * Copyright © 2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @constructor\n * Represents a binary buffer of unsigned bytes that will be parsed in various ways. The buffer \n * can be decoded by reading various lengths of bytes and interpretting them as longs\n * or unsigned bytes, etc. The bytes are interpretted in big-endian (network) format.\n * @param {string} buffer the binary buffer represented as a string\n */\nvar PackedBuffer = function (buffer) {\n\tthis.buffer = buffer;\n\tthis.index = 0;\n};\n\n/**\n * Return the specified number of signed long integers from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return as many longs as are available in the rest of the\n * buffer.\n * \n * @param {number} num The number of longs to return\n * @returns {Array.<number>} the array of signed long integers\n */\nPackedBuffer.prototype.getLongs = function(num) {\n\tvar result = undefined;\n\tif (this.buffer && this.index < this.buffer.length) {\n\t\tresult = [];\n\t\tfor (var i = 0; i < num && this.index+3 < this.buffer.length; i++) {\n\t\t\tvar longnum = this.buffer[this.index] << 24 | \n\t\t\t\tthis.buffer[this.index+1] << 16 | \n\t\t\t\tthis.buffer[this.index+2] << 8 | \n\t\t\t\tthis.buffer[this.index+3];\n\t\t\tresult.push(longnum);\n\t\t\tthis.index += 4;\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * Return a signed long integer from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return a long if it is available in the buffer, otherwise\n * it will return undefined.\n * \n * @returns {number} the long at the current point in the buffer, or undefined if\n * there is not enough bytes left in the buffer to form a long\n */\nPackedBuffer.prototype.getLong = function() {\n\tvar longs = this.getLongs(1);\n\tif (longs && longs.length > 0) {\n\t\treturn longs[0];\n\t}\n\treturn undefined;\n};\n\n/**\n * Return the specified number of signed byte integers from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return as many bytes as are available in the rest of the\n * buffer.\n * \n * @param {number|undefined} num The number of bytes to return\n * @returns {Array.<number>} the array of signed byte integers\n */\nPackedBuffer.prototype.getBytes = function(num) {\n\tvar result = undefined;\n\tif (this.buffer && this.index < this.buffer.length) {\n\t\tresult = [];\n\t\tfor (var i = 0; i < num && this.index < this.buffer.length; i++) {\n\t\t\tvar bytenum = this.buffer[this.index++];\n\t\t\tif (bytenum & 0x80) {\n\t\t\t\tbytenum -= 0x100;\n\t\t\t}\n\t\t\tresult.push(bytenum);\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * Return a signed byte integer from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return a byte if it is available in the buffer, otherwise\n * it will return undefined.\n * \n * @returns {number} the byte at the current point in the buffer, or undefined if\n * there is not enough bytes left in the buffer to form a byte\n */\nPackedBuffer.prototype.getByte = function() {\n\tvar bytes = this.getBytes(1);\n\tif (bytes && bytes.length > 0) {\n\t\treturn bytes[0];\n\t}\n\treturn undefined;\n};\n\n/**\n * Return the specified number of unsigned byte integers from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return as many bytes as are available in the rest of the\n * buffer.\n * \n * @param {number} num The number of bytes to return\n * @returns {Array.<number>} the array of unsigned byte integers\n */\nPackedBuffer.prototype.getUnsignedBytes = function(num) {\n\tvar result = undefined;\n\tif (this.buffer && this.index < this.buffer.length) {\n\t\tresult = [];\n\t\tfor (var i = 0; i < num && this.index < this.buffer.length; i++) {\n\t\t\tresult.push(this.buffer[this.index++]);\n\t\t}\n\t}\n\treturn result;\n\t\n};\n\n/**\n * Return a string made out of the given number of bytes and convert\n * from UTF-8 to UTF-16.\n * \n * @param {number} num The number of bytes to make a string out of\n * @returns {string} a string made out of the given bytes\n */\nPackedBuffer.prototype.getString = function(num) {\n\tvar arr = this.getUnsignedBytes(num);\n\tvar str = \"\";\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\treturn str;\n\t\n};\n\n/**\n * Advance the current pointer in the buffer by the specified number of\n * bytes in the string.\n * \n * @param {number} num The number of bytes to skip\n */\nPackedBuffer.prototype.skip = function(num) {\n\tthis.index += num;\n};\n\nmodule.exports = PackedBuffer;","/*\n * SearchUtils.js - Misc search utility routines\n * \n * Copyright © 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar SearchUtils = {};\n\n/**\n * Binary search a sorted array for a particular target value.\n * If the exact value is not found, it returns the index of the smallest \n * entry that is greater than the given target value.<p> \n * \n * The comparator\n * parameter is a function that knows how to compare elements of the \n * array and the target. The function should return a value greater than 0\n * if the array element is greater than the target, a value less than 0 if\n * the array element is less than the target, and 0 if the array element \n * and the target are equivalent.<p>\n * \n * If the comparator function is not specified, this function assumes\n * the array and the target are numeric values and should be compared \n * as such.<p>\n * \n * \n * @static\n * @param {*} target element being sought \n * @param {Array} arr the array being searched\n * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries\n * in the array  \n * @return the index of the array into which the value would fit if \n * inserted, or -1 if given array is not an array or the target is not \n * a number\n */\nSearchUtils.bsearch = function(target, arr, comparator) {\n\tif (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined') {\n\t\treturn -1;\n\t}\n\t\n\tvar high = arr.length - 1,\n\t\tlow = 0,\n\t\tmid = 0,\n\t\tvalue,\n\t\tcmp = comparator || SearchUtils.bsearch.numbers;\n\t\n\twhile (low <= high) {\n\t\tmid = Math.floor((high+low)/2);\n\t\tvalue = cmp(arr[mid], target);\n\t\tif (value > 0) {\n\t\t\thigh = mid - 1;\n\t\t} else if (value < 0) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\t}\n\t\n\treturn low;\n};\n\n/**\n * Returns whether or not the given element is greater than, less than,\n * or equal to the given target.<p>\n * \n * @private\n * @static\n * @param {number} element the element being tested\n * @param {number} target the target being sought\n */\nSearchUtils.bsearch.numbers = function(element, target) {\n\treturn element - target;\n};\n\n/**\n * Do a bisection search of a function for a particular target value.<p> \n * \n * The function to search is a function that takes a numeric parameter, \n * does calculations, and returns gives a numeric result. The \n * function should should be smooth and not have any discontinuities \n * between the low and high values of the parameter.\n *  \n * \n * @static\n * @param {number} target value being sought\n * @param {number} low the lower bounds to start searching\n * @param {number} high the upper bounds to start searching\n * @param {number} precision minimum precision to support. Use 0 if you want to use the default.\n * @param {?function(number)=} func function to search \n * @return an approximation of the input value to the function that gives the desired\n * target output value, correct to within the error range of Javascript floating point \n * arithmetic, or NaN if there was some error\n */\nSearchUtils.bisectionSearch = function(target, low, high, precision, func) {\n\tif (typeof(target) !== 'number' || \n\t\t\ttypeof(low) !== 'number' || \n\t\t\ttypeof(high) !== 'number' || \n\t\t\ttypeof(func) !== 'function') {\n\t\treturn NaN;\n\t}\n\t\n\tvar mid = 0,\n\t\tvalue,\n\t\tpre = precision > 0 ? precision : 1e-13;\n\t\n\tdo {\n\t\tmid = (high+low)/2;\n\t\tvalue = func(mid);\n\t\tif (value > target) {\n\t\t\thigh = mid;\n\t\t} else if (value < target) {\n\t\t\tlow = mid;\n\t\t}\n\t} while (high - low > pre);\n\t\n\treturn mid;\n};\n\nmodule.exports = SearchUtils;\n","/*\n * JulianDay.js - A Julian Day object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class\n * A Julian Day class. A Julian Day is a date based on the Julian Day count\n * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. \n * Do not confuse it with a date in the Julian calendar, which it has very\n * little in common with. The naming is unfortunately close, and comes from history.<p>\n * \n * \n * @constructor\n * @param {number} num the Julian Day expressed as a floating point number \n */\nvar JulianDay = function(num) {\n\tthis.jd = num;\n\tthis.days = Math.floor(this.jd);\n\tthis.frac = num - this.days;\n};\n\nJulianDay.prototype = {\n\t/**\n\t * Return the integral portion of this Julian Day instance. This corresponds to\n\t * the number of days since the beginning of the epoch.\n\t * \n\t * @return {number} the integral portion of this Julian Day\n\t */\n\tgetDays: function() {\n\t\treturn this.days;\n\t},\n\t\n\t/**\n\t * Set the date of this Julian Day instance.\n\t * \n\t * @param {number} days the julian date expressed as a floating point number\n\t */\n\tsetDays: function(days) {\n\t\tthis.days = Math.floor(days);\n\t\tthis.jd = this.days + this.frac;\n\t},\n\t\n\t/**\n\t * Return the fractional portion of this Julian Day instance. This portion \n\t * corresponds to the time of day for the instance.\n\t */\n\tgetDayFraction: function() {\n\t\treturn this.frac;\n\t},\n\t\n\t/**\n\t * Set the fractional part of the Julian Day. The fractional part represents\n\t * the portion of a fully day. Julian dates start at noon, and proceed until\n\t * noon of the next day. That would mean midnight is represented as a fractional\n\t * part of 0.5.\n\t * \n\t * @param {number} fraction The fractional part of the Julian date\n\t */\n\tsetDayFraction: function(fraction) {\n\t\tvar t = Math.floor(fraction);\n\t\tthis.frac = fraction - t;\n\t\tthis.jd = this.days + this.frac;\n\t},\n\t\n\t/** \n\t * Return the Julian Day expressed as a floating point number.\n\t * @return {number} the Julian Day as a number\n\t */\n\tgetDate: function () {\n\t\treturn this.jd;\n\t},\n\t\n\t/**\n\t * Set the date of this Julian Day instance.\n\t * \n\t * @param {number} num the numeric Julian Day to set into this instance\n\t */\n\tsetDate: function (num) {\n\t\tthis.jd = num;\n\t},\n\t\n\t/**\n\t * Add an offset to the current date instance. The offset should be expressed in\n\t * terms of Julian days. That is, each integral unit represents one day of time, and\n\t * fractional part represents a fraction of a regular 24-hour day.\n\t * \n\t * @param {number} offset an amount to add (or subtract) to the current result instance.\n\t */\n\taddDate: function(offset) {\n\t\tif (typeof(offset) === 'number') {\n\t\t\tthis.jd += offset;\n\t\t\tthis.days = Math.floor(this.jd);\n\t\t\tthis.frac = this.jd - this.days;\n\t\t}\n\t}\n};\n\nmodule.exports = JulianDay;\n","/*\n * Calendar.js - Represent a calendar object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class\n * Superclass for all calendar subclasses that contains shared \n * functionality. This class is never instantiated on its own. Instead,\n * you should use the {@link CalendarFactory} function to manufacture a new\n * instance of a subclass of Calendar. \n * \n * @private\n * @constructor\n */\nvar Calendar = function() {\n};\n\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your calendar after it's defined: \n * Calendar._constructors[\"mytype\"] = Calendar.MyTypeConstructor;\n */\nCalendar._constructors = {};\n\nCalendar.prototype = {\n\t/**\n\t * Return the type of this calendar.\n\t * \n\t * @return {string} the name of the type of this calendar \n\t */\n\tgetType: function() {\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\n\t},\n\t\n\t/**\n\t * Return the number of months in the given year. The number of months in a year varies\n\t * for some luni-solar calendars because in some years, an extra month is needed to extend the \n\t * days in a year to an entire solar year. The month is represented as a 1-based number\n\t * where 1=first month, 2=second month, etc.\n\t * \n\t * @param {number} year a year for which the number of months is sought\n\t * @return {number} The number of months in the given year\n\t */\n\tgetNumMonths: function(year) {\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\n\t},\n\t\n\t/**\n\t * Return the number of days in a particular month in a particular year. This function\n\t * can return a different number for a month depending on the year because of things\n\t * like leap years.\n\t * \n\t * @param {number} month the month for which the length is sought\n\t * @param {number} year the year within which that month can be found\n\t * @return {number} the number of days within the given month in the given year\n\t */\n\tgetMonLength: function(month, year) {\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\n\t},\n\t\n\t/**\n\t * Return true if the given year is a leap year in this calendar.\n\t * The year parameter may be given as a number.\n\t * \n\t * @param {number} year the year for which the leap year information is being sought\n\t * @return {boolean} true if the given year is a leap year\n\t */\n\tisLeapYear: function(year) {\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\n\t}\n};\n\nmodule.exports = Calendar;","/*\n * JSUtils.js - Misc utilities to work around Javascript engine differences\n * \n * Copyright © 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilib.js\n\nvar ilib = require(\"./ilib.js\");\n\nvar JSUtils = {};\n\n/**\n * Perform a shallow copy of the source object to the target object. This only \n * copies the assignments of the source properties to the target properties, \n * but not recursively from there.<p>\n * \n * \n * @static\n * @param {Object} source the source object to copy properties from\n * @param {Object} target the target object to copy properties into\n */\nJSUtils.shallowCopy = function (source, target) {\n\tvar prop = undefined;\n\tif (source && target) {\n\t\tfor (prop in source) {\n\t\t\tif (prop !== undefined && typeof(source[prop]) !== 'undefined') {\n\t\t\t\ttarget[prop] = source[prop];\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Perform a recursive deep copy from the \"from\" object to the \"deep\" object.\n * \n * @static\n * @param {Object} from the object to copy from\n * @param {Object} to the object to copy to\n * @return {Object} a reference to the the \"to\" object\n */\nJSUtils.deepCopy = function(from, to) {\n\tvar prop;\n\n\tfor (prop in from) {\n\t\tif (prop) {\n\t\t\tif (typeof(from[prop]) === 'object') {\n\t\t\t\tto[prop] = {};\n\t\t\t\tJSUtils.deepCopy(from[prop], to[prop]);\n\t\t\t} else {\n\t\t\t\tto[prop] = from[prop];\n\t\t\t}\n\t\t}\n\t}\n\treturn to;\n};\n\n/**\n * Map a string to the given set of alternate characters. If the target set\n * does not contain a particular character in the input string, then that\n * character will be copied to the output unmapped.\n * \n * @static\n * @param {string} str a string to map to an alternate set of characters\n * @param {Array.<string>|Object} map a mapping to alternate characters\n * @return {string} the source string where each character is mapped to alternate characters\n */\nJSUtils.mapString = function (str, map) {\n\tvar mapped = \"\";\n\tif (map && str) {\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\tvar c = str.charAt(i); // TODO use a char iterator?\n\t\t\tmapped += map[c] || c; \n\t\t}\n\t} else {\n\t\tmapped = str;\n\t}\n\treturn mapped;\n};\n\n/**\n * Check if an object is a member of the given array. If this javascript engine\n * support indexOf, it is used directly. Otherwise, this function implements it\n * itself. The idea is to make sure that you can use the quick indexOf if it is\n * available, but use a slower implementation in older engines as well.\n * \n * @static\n * @param {Array.<Object>} array array to search\n * @param {Object} obj object being sought. This should be of the same type as the\n * members of the array being searched. If not, this function will not return\n * any results.\n * @return {number} index of the object in the array, or -1 if it is not in the array.\n */\nJSUtils.indexOf = function(array, obj) {\n\tif (!array || !obj) {\n\t\treturn -1;\n\t}\n\tif (typeof(array.indexOf) === 'function') {\n\t\treturn array.indexOf(obj);\n\t} else {\n\t\tfor (var i = 0; i < array.length; i++) {\n\t        if (array[i] === obj) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n};\n\n/**\n * Convert a string into the hexadecimal representation\n * of the Unicode characters in that string.\n * \n * @static\n * @param {string} string The string to convert\n * @param {number=} limit the number of digits to use to represent the character (1 to 8)\n * @return {string} a hexadecimal representation of the\n * Unicode characters in the input string\n */\nJSUtils.toHexString = function(string, limit) {\n\tvar i, \n\t\tresult = \"\", \n\t\tlim = (limit && limit < 9) ? limit : 4;\n\t\n\tif (!string) {\n\t\treturn \"\";\n\t}\n\tfor (i = 0; i < string.length; i++) {\n\t\tvar ch = string.charCodeAt(i).toString(16);\n\t\tresult += \"00000000\".substring(0, lim-ch.length) + ch;\n\t}\n\treturn result.toUpperCase();\n};\n\n/**\n * Test whether an object in a Javascript Date. \n * \n * @static\n * @param {*} object The object to test\n * @return {boolean} return true if the object is a Date\n * and false otherwise\n */\nJSUtils.isDate = function(object) {\n\tvar o;\n\tif (typeof(object) === 'object') {\n\t\to = /** @type {Object|null|undefined} */ object;\n\t\treturn Object.prototype.toString.call(o) === '[object Date]';\n\t}\n\treturn false; \n};\n\n/**\n * Merge the properties of object2 into object1 in a deep manner and return a merged\n * object. If the property exists in both objects, the value in object2 will overwrite \n * the value in object1. If a property exists in object1, but not in object2, its value\n * will not be touched. If a property exists in object2, but not in object1, it will be \n * added to the merged result.<p>\n * \n * Name1 and name2 are for creating debug output only. They are not necessary.<p>\n * \n * \n * @static\n * @param {*} object1 the object to merge into\n * @param {*} object2 the object to merge\n * @param {boolean=} replace if true, replace the array elements in object1 with those in object2.\n * If false, concatenate array elements in object1 with items in object2.\n * @param {string=} name1 name of the object being merged into\n * @param {string=} name2 name of the object being merged in\n * @return {Object} the merged object\n */\nJSUtils.merge = function (object1, object2, replace, name1, name2) {\n\tvar prop = undefined,\n\t\tnewObj = {};\n\tfor (prop in object1) {\n\t\tif (prop && typeof(object1[prop]) !== 'undefined') {\n\t\t\tnewObj[prop] = object1[prop];\n\t\t}\n\t}\n\tfor (prop in object2) {\n\t\tif (prop && typeof(object2[prop]) !== 'undefined') {\n\t\t\tif (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\n\t\t\t\tif (typeof(replace) !== 'boolean' || !replace) {\n\t\t\t\t\tnewObj[prop] = [].concat(object1[prop]);\n\t\t\t\t\tnewObj[prop] = newObj[prop].concat(object2[prop]);\n\t\t\t\t} else {\n\t\t\t\t\tnewObj[prop] = object2[prop];\n\t\t\t\t}\n\t\t\t} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {\n\t\t\t\tnewObj[prop] = JSUtils.merge(object1[prop], object2[prop], replace);\n\t\t\t} else {\n\t\t\t\t// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\n\t\t\t\tif (name1 && name2 && newObj[prop] == object2[prop]) {\n\t\t\t\t\tconsole.log(\"Property \" + prop + \" in \" + name1 + \" is being overridden by the same value in \" + name2);\n\t\t\t\t}\n\t\t\t\tnewObj[prop] = object2[prop];\n\t\t\t}\n\t\t}\n\t}\n\treturn newObj;\n};\n\n/**\n * Return true if the given object has no properties.<p>\n * \n * \n * @static\n * @param {Object} obj the object to check\n * @return {boolean} true if the given object has no properties, false otherwise\n */\nJSUtils.isEmpty = function (obj) {\n\tvar prop = undefined;\n\t\n\tif (!obj) {\n\t\treturn true;\n\t}\n\t\n\tfor (prop in obj) {\n\t\tif (prop && typeof(obj[prop]) !== 'undefined') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * @static\n */\nJSUtils.hashCode = function(obj) {\n\tvar hash = 0;\n\t\n\tfunction addHash(hash, newValue) {\n\t\t// co-prime numbers creates a nicely distributed hash\n\t\thash *= 65543;\n\t\thash += newValue;\n\t\thash %= 2147483647; \n\t\treturn hash;\n\t}\n\t\n\tfunction stringHash(str) {\n\t\tvar hash = 0;\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\thash = addHash(hash, str.charCodeAt(i));\n\t\t}\n\t\treturn hash;\n\t}\n\t\n\tswitch (typeof(obj)) {\n\t\tcase 'undefined':\n\t\t\thash = 0;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\thash = stringHash(obj);\n\t\t\tbreak;\n\t\tcase 'function':\n\t\tcase 'number':\n\t\tcase 'xml':\n\t\t\thash = stringHash(String(obj));\n\t\t\tbreak;\n\t\tcase 'boolean':\n\t\t\thash = obj ? 1 : 0;\n\t\t\tbreak;\n\t\tcase 'object':\n\t\t\tvar props = [];\n\t\t\tfor (var p in obj) {\n\t\t\t\tif (obj.hasOwnProperty(p)) {\n\t\t\t\t\tprops.push(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// make sure the order of the properties doesn't matter\n\t\t\tprops.sort();\n\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\thash = addHash(hash, stringHash(props[i]));\n\t\t\t\thash = addHash(hash, JSUtils.hashCode(obj[props[i]]));\n\t\t\t}\n\t\t\tbreak;\n\t}\n\t\n\treturn hash;\n};\n\n\nmodule.exports = JSUtils;\n","/*\n * Loader.js - shared loader implementation\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Path = require(\"./Path.js\");\nvar ilib = require(\"./ilib.js\");\n\n/** \n * @class\n * Superclass of the loader classes that contains shared functionality.\n * \n * @private\n * @constructor\n */\nvar Loader = function() {\n\t// console.log(\"new Loader instance\");\n\n\tthis.protocol = \"file://\";\n\tthis.includePath = [];\n};\n\nLoader.prototype = new ilib.Loader();\nLoader.prototype.parent = ilib.Loader;\nLoader.prototype.constructor = Loader;\n\n/** @abstract */\nLoader.prototype._loadFile = function (pathname, sync, cb) {};\n\nLoader.prototype._exists = function(dir, file) {\n\tvar fullpath = Path.normalize(Path.join(dir, file));\n\tif (this.protocol !== \"http://\") {\n\t\tvar text = this._loadFile(fullpath, true);\n\t\tif (text) {\n\t\t\tthis.includePath.push(dir);\n\t\t}\n\t} else {\n\t\t// put the dir on the list now assuming it exists, and check for its availability \n\t\t// later so we can avoid the 404 errors eventually\n\t\tthis.includePath.push(dir);\n\t\tthis._loadFile(fullpath, false, ilib.bind(this, function(text) {\n\t\t\tif (!text) {\n\t\t\t\t//console.log(\"Loader._exists: removing \" + dir + \" from the include path because it doesn't exist.\");\n\t\t\t\tthis.includePath = this.includePath.slice(-1);\n\t\t\t}\n\t\t}));\n\t}\n};\n\nLoader.prototype._loadFileAlongIncludePath = function(includePath, pathname) {\n\tfor (var i = 0; i < includePath.length; i++) {\n\t\tvar manifest = this.manifest[includePath[i]];\n\t\tif (!manifest || Loader.indexOf(manifest, pathname) > -1) {\n\t\t\tvar filepath = Path.join(includePath[i], pathname);\n\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: attempting sync load \" + filepath);\n\t\t\tvar text = this._loadFile(filepath, true);\n\t\t\tif (text) {\n\t\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: succeeded\");\n\t\t\t\treturn text;\n\t\t\t} \n\t\t\t//else {\n\t\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: failed\");\n\t\t\t//} \n\t\t} \n\t\t//else {\n\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: \" + pathname + \" not in manifest for \" + this.includePath[i]);\n\t\t//}\n\t}\n\t\n\t//console.log(\"Loader._loadFileAlongIncludePath: file not found anywhere along the path.\");\n\treturn undefined;\n};\n\nLoader.prototype.loadFiles = function(paths, sync, params, callback) {\n\tvar includePath = params && params.base ? [params.base].concat(this.includePath) : this.includePath;\n\n\t//console.log(\"Loader loadFiles called\");\n\t// make sure we know what we can load\n\tif (!paths) {\n\t\t// nothing to load\n\t\t//console.log(\"nothing to load\");\n\t\treturn;\n\t}\n\t\n\tif (params && params.returnOne) {\n\t\t// Only return the most locale-specific data. Do this by searching backwards\n\t\t// in the list of paths.\n\t\tvar pathname;\n\t\tvar tmp = [];\n\t\twhile ((pathname = paths.pop()) !== undefined) {\n\t\t\ttmp.push(pathname);\n\t\t}\n\t\tpaths = tmp;\n\t}\n\t\n\t//console.log(\"generic loader: attempting to load these files: \" + JSON.stringify(paths) + \"\\n\");\n\tif (sync) {\n\t\tvar ret = [];\n\t\t\n\t\t// synchronous\n\t\tthis._loadManifests(true);\n\t\t\n\t\tfor (var i = 0; i < paths.length; i++) {\n\t\t\tvar text = this._loadFileAlongIncludePath(includePath, Path.normalize(paths[i]));\n\t\t\tret.push(text ? JSON.parse(text) : undefined);\n\t\t\tif (params && params.returnOne && text) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// only call the callback at the end of the chain of files\n\t\tif (typeof(callback) === 'function') {\n\t\t\tcallback(ret);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t// asynchronous\n\tthis._loadManifests(false, ilib.bind(this, function() {\n\t\t//console.log(\"Loader.loadFiles: now loading files asynchronously\");\n\t\tthis.results = [];\n\t\tthis._loadFilesAsync(includePath, paths, callback);\n\t}));\n};\n\nLoader.prototype._loadFilesAsyncAlongIncludePath = function (includes, filename, cb) {\n\tvar text = undefined;\n\t\n\tif (includes.length > 0) {\n\t\tvar root = includes[0];\n\t\tincludes = includes.slice(1);\n\t\t\n\t\tvar manifest = this.manifest[root];\n\t\tif (!manifest || Loader.indexOf(manifest, filename) > -1) {\n\t\t\tvar filepath = Path.join(root, filename);\n\t\t\tthis._loadFile(filepath, false, ilib.bind(this, function(t) {\n\t\t\t\t//console.log(\"Loader._loadFilesAsyncAlongIncludePath: loading \" + (t ? \" success\" : \" failed\"));\n\t\t\t\tif (t) {\n\t\t\t\t\tcb(t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._loadFilesAsyncAlongIncludePath(includes, filename, cb);\n\t\t\t\t}\n\t\t\t}));\n\t\t} else {\n\t\t\t//console.log(\"Loader._loadFilesAsyncAlongIncludePath: \" + filepath + \" not in manifest for \" + root);\n\t\t\tthis._loadFilesAsyncAlongIncludePath(includes, filename, cb);\n\t\t}\n\t} else {\n\t\tcb();\n\t}\n};\n\nLoader.prototype._loadFilesAsync = function (includePath, paths, callback) {\n\tif (paths.length > 0) {\n\t\tvar filename = paths[0];\n\t\tpaths = paths.slice(1);\n\t\t\n\t\t//console.log(\"Loader._loadFilesAsync: attempting to load \" + filename + \" along the include path.\");\n\t\tthis._loadFilesAsyncAlongIncludePath(includePath, filename, ilib.bind(this, function (json) {\n\t\t\tthis.results.push(json ? JSON.parse(json) : undefined);\n\t\t\tthis._loadFilesAsync(includePath, paths, callback);\n\t\t}));\n\t} else {\n\t\t// only call the callback at the end of the chain of files\n\t\tif (typeof(callback) === 'function') {\n\t\t\tcallback(this.results);\n\t\t}\n\t}\n};\n\nLoader.prototype._loadManifestFile = function(i, sync, cb) {\n\t//console.log(\"Loader._loadManifestFile: Checking include path \" + i + \" \" + this.includePath[i]);\n\tif (i < this.includePath.length) {\n\t\tvar filepath = Path.join(this.includePath[i], \"ilibmanifest.json\");\n\t\t//console.log(\"Loader._loadManifestFile: Loading manifest file \" + filepath);\n\t\tvar text = this._loadFile(filepath, sync, ilib.bind(this, function(text) {\n\t\t\tif (text) {\n\t\t\t\t//console.log(\"Loader._loadManifestFile: success!\");\n\t\t\t\tthis.manifest[this.includePath[i]] = JSON.parse(text).files;\n\t\t\t}\n\t\t\t//else console.log(\"Loader._loadManifestFile: failed...\");\n\t\t\tthis._loadManifestFile(i+1, sync, cb);\n\t\t}));\n\t} else {\n\t\tif (typeof(cb) === 'function') {\n\t\t\t//console.log(\"Loader._loadManifestFile: now calling callback function\");\n\t\t\tcb();\n\t\t}\n\t}\n};\n\nLoader.prototype._loadManifests = function(sync, cb) {\n\t//console.log(\"Loader._loadManifests: called \" + (sync ? \"synchronously\" : \"asychronously.\"));\n\tif (!this.manifest) {\n\t\t//console.log(\"Loader._loadManifests: attempting to find manifests\");\n\t\tthis.manifest = {};\n\t\tif (typeof(sync) !== 'boolean') {\n\t\t\tsync = true;\n\t\t}\n\t\t\t\n\t\tthis._loadManifestFile(0, sync, cb);\n\t} else {\n\t\t//console.log(\"Loader._loadManifests: already loaded\");\n\t\tif (typeof(cb) === 'function') {\n\t\t\t//console.log(\"Loader._loadManifests: now calling callback function\");\n\t\t\tcb();\n\t\t}\n\t}\n};\n\nLoader.prototype.listAvailableFiles = function(sync, cb) {\n\t//console.log(\"generic loader: list available files called\");\n\tthis._loadManifests(sync, ilib.bind(this, function () {\n\t\tif (typeof(cb) === 'function') {\n\t\t\t//console.log(\"generic loader: now calling caller's callback function\");\n\t\t\tcb(this.manifest);\n\t\t}\n\t}));\n\treturn this.manifest;\n};\n\nLoader.indexOf = function(array, obj) {\n\tif (!array || !obj) {\n\t\treturn -1;\n\t}\n\tif (typeof(array.indexOf) === 'function') {\n\t\treturn array.indexOf(obj);\n\t} else {\n\t\tfor (var i = 0; i < array.length; i++) {\n\t        if (array[i] === obj) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n};\n\nLoader.prototype.checkAvailability = function(file) {\n\tfor (var dir in this.manifest) {\n\t\tif (Loader.indexOf(this.manifest[dir], file) !== -1) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\nLoader.prototype.isAvailable = function(file, sync, cb) {\n\t//console.log(\"Loader.isAvailable: called\");\n\tif (typeof(sync) !== 'boolean') {\n\t\tsync = true;\n\t}\n\tif (sync) {\n\t\tthis._loadManifests(sync);\n\t\treturn this.checkAvailability(file);\n\t}\n\t\n\tthis._loadManifests(false, ilib.bind(this, function () {\n\t\t// console.log(\"generic loader: isAvailable \" + path + \"? \");\n\t\tif (typeof(cb) === 'function') {\n\t\t\tcb(this.checkAvailability(file));\n\t\t}\n\t}));\n};\n\nmodule.exports = Loader;","/*\n * hebrew.js - Represent a Hebrew calendar object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends ilib.js Calendar.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar Calendar = require(\"./Calendar.js\");\n\n/**\n * @class\n * Construct a new Hebrew calendar object. This class encodes information about\n * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew \n * calendar where the dates are calculated by arithmetic rules. This differs from \n * the religious Hebrew calendar which is used to mark the beginning of particular \n * holidays. The religious calendar depends on the first sighting of the new \n * crescent moon to determine the first day of the new month. Because humans and \n * weather are both involved, the actual time of sighting varies, so it is not \n * really possible to precalculate the religious calendar. Certain groups, such \n * as the Hebrew Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the \n * beginning of lunar months, and therefore the dates of holidays.<p>\n * \n * \n * @constructor\n * @extends Calendar\n */\nvar HebrewCal = function() {\n\tthis.type = \"hebrew\";\n};\n\n/**\n * Return the number of days elapsed in the Hebrew calendar before the\n * given year starts.\n * @private\n * @param {number} year the year for which the number of days is sought\n * @return {number} the number of days elapsed in the Hebrew calendar before the\n * given year starts\n */\nHebrewCal.elapsedDays = function(year) {\n\tvar months = Math.floor(((235*year) - 234)/19);\n\tvar parts = 204 + 793 * MathUtils.mod(months, 1080);\n\tvar hours = 11 + 12 * months + 793 * Math.floor(months/1080) + \n\t\tMath.floor(parts/1080);\n\tvar days = 29 * months + Math.floor(hours/24);\n\treturn (MathUtils.mod(3 * (days + 1), 7) < 3) ? days + 1 : days;\n};\n\n/**\n * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew \n * calendar will be corrected for the given year. Corrections are caused because New \n * Year's is not allowed to start on certain days of the week. To deal with \n * it, the start of the new year is corrected for the next year by adding a \n * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current\n * year to make them 30 days long instead of 29.\n * \n * @private\n * @param {number} year the year for which the correction is sought\n * @param {number} elapsed number of days elapsed up to this year\n * @return {number} the number of days correction in the current year to make sure\n * Rosh HaShanah does not fall on undesirable days of the week\n */\nHebrewCal.newYearsCorrection = function(year, elapsed) {\n\tvar lastYear = HebrewCal.elapsedDays(year-1),\n\t\tthisYear = elapsed,\n\t\tnextYear = HebrewCal.elapsedDays(year+1);\n\t\n\treturn (nextYear - thisYear) == 356 ? 2 : ((thisYear - lastYear) == 382 ? 1 : 0);\n};\n\n/**\n * Return the rata die date of the new year for the given hebrew year.\n * @private\n * @param {number} year the year for which the new year is needed\n * @return {number} the rata die date of the new year\n */\nHebrewCal.newYear = function(year) {\n\tvar elapsed = HebrewCal.elapsedDays(year); \n\t\n\treturn elapsed + HebrewCal.newYearsCorrection(year, elapsed);\n};\n\n/**\n * Return the number of days in the given year. Years contain a variable number of\n * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't\n * fall on particular days of the week. Days are added to the months of Heshvan\n * and/or Kislev in the previous year in order to prevent the current year's New\n * Year from being on Sunday, Wednesday, or Friday.\n * \n * @param {number} year the year for which the length is sought\n * @return {number} number of days in the given year\n */\nHebrewCal.daysInYear = function(year) {\n\treturn HebrewCal.newYear(year+1) - HebrewCal.newYear(year);\n};\n\n/**\n * Return true if the given year contains a long month of Heshvan. That is,\n * it is 30 days instead of 29.\n * \n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a long month of Heshvan\n */\nHebrewCal.longHeshvan = function(year) {\n\treturn MathUtils.mod(HebrewCal.daysInYear(year), 10) === 5;\n};\n\n/**\n * Return true if the given year contains a long month of Kislev. That is,\n * it is 30 days instead of 29.\n * \n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a short month of Kislev\n */\nHebrewCal.longKislev = function(year) {\n\treturn MathUtils.mod(HebrewCal.daysInYear(year), 10) !== 3;\n};\n\n/**\n * Return the date of the last day of the month for the given year. The date of\n * the last day of the month is variable because a number of months gain an extra \n * day in leap years, and it is variable which months gain a day for each leap \n * year and which do not.\n * \n * @param {number} month the month for which the number of days is sought\n * @param {number} year the year in which that month is\n * @return {number} the number of days in the given month and year\n */\nHebrewCal.prototype.lastDayOfMonth = function(month, year) {\n\tswitch (month) {\n\t\tcase 2: \n\t\tcase 4: \n\t\tcase 6: \n\t\tcase 10: \n\t\t\treturn 29;\n\t\tcase 13:\n\t\t\treturn this.isLeapYear(year) ? 29 : 0;\n\t\tcase 8:\n\t\t\treturn HebrewCal.longHeshvan(year) ? 30 : 29;\n\t\tcase 9:\n\t\t\treturn HebrewCal.longKislev(year) ? 30 : 29;\n\t\tcase 12:\n\t\tcase 1:\n\t\tcase 3:\n\t\tcase 5:\n\t\tcase 7:\n\t\tcase 11:\n\t\t\treturn 30;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n};\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n */\nHebrewCal.prototype.getNumMonths = function(year) {\n\treturn this.isLeapYear(year) ? 13 : 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @returns {number} the number of days within the given month in the given year, or\n * 0 for an invalid month in the year\n */\nHebrewCal.prototype.getMonLength = function(month, year) {\n\tif (month < 1 || month > 13 || (month == 13 && !this.isLeapYear(year))) {\n\t\treturn 0;\n\t}\n\treturn this.lastDayOfMonth(month, year);\n};\n\n/**\n * Return true if the given year is a leap year in the Hebrew calendar.\n * The year parameter may be given as a number, or as a HebrewDate object.\n * @param {number|Object} year the year for which the leap year information is being sought\n * @returns {boolean} true if the given year is a leap year\n */\nHebrewCal.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) == 'number') ? year : year.year;\n\treturn (MathUtils.mod(1 + 7 * y, 19) < 7);\n};\n\n/**\n * Return the type of this calendar.\n * \n * @returns {string} the name of the type of this calendar \n */\nHebrewCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n\n/*register this calendar for the factory method */\nCalendar._constructors[\"hebrew\"] = HebrewCal;\n\nmodule.exports = HebrewCal;\n","/*\n * islamic.js - Represent a Islamic calendar object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends \nilib.js\nCalendar.js \nMathUtils.js \n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar Calendar = require(\"./Calendar.js\");\n\n/**\n * @class\n * Construct a new Islamic calendar object. This class encodes information about\n * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic \n * calendar where the dates are calculated by arithmetic rules. This differs from \n * the religious Islamic calendar which is used to mark the beginning of particular \n * holidays. The religious calendar depends on the first sighting of the new \n * crescent moon to determine the first day of the new month. Because humans and \n * weather are both involved, the actual time of sighting varies, so it is not \n * really possible to precalculate the religious calendar. Certain groups, such \n * as the Islamic Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the \n * beginning of lunar months, and therefore the dates of holidays.<p>\n * \n * \n * @constructor\n * @extends Calendar\n */\nvar IslamicCal = function() {\n\tthis.type = \"islamic\";\n};\n\n/**\n * the lengths of each month \n * @private\n * @const\n * @type Array.<number>\n */\nIslamicCal.monthLengths = [\n\t30,  /* Muharram */\n\t29,  /* Saffar */\n\t30,  /* Rabi'I */\n\t29,  /* Rabi'II */\n\t30,  /* Jumada I */\n\t29,  /* Jumada II */\n\t30,  /* Rajab */\n\t29,  /* Sha'ban */\n\t30,  /* Ramadan */\n\t29,  /* Shawwal */\n\t30,  /* Dhu al-Qa'da */\n\t29   /* Dhu al-Hijja */\n];\n\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n */\nIslamicCal.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nIslamicCal.prototype.getMonLength = function(month, year) {\n\tif (month !== 12) {\n\t\treturn IslamicCal.monthLengths[month-1];\n\t} else {\n\t\treturn this.isLeapYear(year) ? 30 : 29;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Islamic calendar.\n * The year parameter may be given as a number, or as a IslamicDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nIslamicCal.prototype.isLeapYear = function(year) {\n\treturn (MathUtils.mod((14 + 11 * year), 30) < 11);\n};\n\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\nIslamicCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n\n/*register this calendar for the factory method */\nCalendar._constructors[\"islamic\"] = IslamicCal;\n\nmodule.exports = IslamicCal;","/*\n * julian.js - Represent a Julian calendar object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends ilib.js Calendar.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar Calendar = require(\"./Calendar.js\");\n\n/**\n * @class\n * Construct a new Julian calendar object. This class encodes information about\n * a Julian calendar.<p>\n * \n * \n * @constructor\n * @extends Calendar\n */\nvar JulianCal = function() {\n\tthis.type = \"julian\";\n};\n\n/* the lengths of each month */\nJulianCal.monthLengths = [\n\t31,  /* Jan */\n\t28,  /* Feb */\n\t31,  /* Mar */\n\t30,  /* Apr */\n\t31,  /* May */\n\t30,  /* Jun */\n\t31,  /* Jul */\n\t31,  /* Aug */\n\t30,  /* Sep */\n\t31,  /* Oct */\n\t30,  /* Nov */\n\t31   /* Dec */\n];\n\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\nJulianCal.cumMonthLengths = [\n    0,   /* Jan */\n\t31,  /* Feb */\n\t59,  /* Mar */\n\t90,  /* Apr */\n\t120, /* May */\n\t151, /* Jun */\n\t181, /* Jul */\n\t212, /* Aug */\n\t243, /* Sep */\n\t273, /* Oct */\n\t304, /* Nov */\n\t334, /* Dec */\n\t365\n];\n\n/**\n * the cumulative lengths of each month, for a leap year \n * @private\n * @const\n * @type Array.<number>\n */\nJulianCal.cumMonthLengthsLeap = [\n\t0,   /* Jan */\n\t31,  /* Feb */\n\t60,  /* Mar */\n\t91,  /* Apr */\n\t121, /* May */\n\t152, /* Jun */\n\t182, /* Jul */\n\t213, /* Aug */\n\t244, /* Sep */\n\t274, /* Oct */\n\t305, /* Nov */\n\t335, /* Dec */\n\t366\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Jaunary, 2=February, etc. until 12=December.\n * \n * @param {number} year a year for which the number of months is sought\n */\nJulianCal.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nJulianCal.prototype.getMonLength = function(month, year) {\n\tif (month !== 2 || !this.isLeapYear(year)) {\n\t\treturn JulianCal.monthLengths[month-1];\n\t} else {\n\t\treturn 29;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Julian calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|JulianDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nJulianCal.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) === 'number' ? year : year.year);\n\treturn MathUtils.mod(y, 4) === ((year > 0) ? 0 : 3);\n};\n\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\nJulianCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"julian\"] = JulianCal;\n\nmodule.exports = JulianCal;","/*\n * persian.js - Represent a Persian algorithmic calendar object.\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends ilib.js Calendar.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar Calendar = require(\"./Calendar.js\");\n\n/**\n * @class\n * Construct a new Persian algorithmic calendar object. This class encodes information about\n * a Persian algorithmic calendar.<p>\n * \n * \n * @constructor\n * @extends Calendar\n */\nvar PersianAlgoCal = function() {\n\tthis.type = \"persian-algo\";\n};\n\n/**\n * @private\n * @const\n * @type Array.<number> \n * the lengths of each month \n */\nPersianAlgoCal.monthLengths = [\n\t31,  // Farvardin\n\t31,  // Ordibehesht\n\t31,  // Khordad\n\t31,  // Tir\n\t31,  // Mordad\n\t31,  // Shahrivar\n\t30,  // Mehr\n\t30,  // Aban\n\t30,  // Azar\n\t30,  // Dey\n\t30,  // Bahman\n\t29   // Esfand\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\nPersianAlgoCal.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nPersianAlgoCal.prototype.getMonLength = function(month, year) {\n\tif (month !== 12 || !this.isLeapYear(year)) {\n\t\treturn PersianAlgoCal.monthLengths[month-1];\n\t} else {\n\t\t// Month 12, Esfand, has 30 days instead of 29 in leap years\n\t\treturn 30;\n\t}\n};\n\n/**\n * Return the equivalent year in the 2820 year cycle that begins on \n * Far 1, 474. This particular cycle obeys the cycle-of-years formula \n * whereas the others do not specifically. This cycle can be used as\n * a proxy for other years outside of the cycle by shifting them into \n * the cycle.   \n * @param {number} year year to find the equivalent cycle year for\n * @returns {number} the equivalent cycle year\n */\nPersianAlgoCal.prototype.equivalentCycleYear = function(year) {\n\tvar y = year - (year >= 0 ? 474 : 473);\n\treturn MathUtils.mod(y, 2820) + 474;\n};\n\n/**\n * Return true if the given year is a leap year in the Persian calendar.\n * The year parameter may be given as a number, or as a PersAlgoDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nPersianAlgoCal.prototype.isLeapYear = function(year) {\n\treturn (MathUtils.mod((this.equivalentCycleYear(year) + 38) * 682, 2816) < 682);\n};\n\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\nPersianAlgoCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"persian-algo\"] = PersianAlgoCal;\n\nmodule.exports = PersianAlgoCal;","/*\n * zoneinfo.js - represent a binary zone info file\n *\n * Copyright © 2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * The portion of this code that parses the zone info file format is derived\n * from the code in the node-zoneinfo project by Gregory McWhirter licensed\n * under the MIT license:\n *\n * Copyright (c) 2013 Gregory McWhirter\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject\n * to the following conditions:\n\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nvar\n\tPackedBuffer = require(\"./packedbuffer.js\");\n\nvar _platform = \"unknown\";\n\n(function () {\n\tif (typeof(require) !== 'undefined') {\n\t\ttry {\n\t\t\tif(typeof(require('enyo')) !== 'undefined') {\n\t\t\t\t_platform = \"enyo\";\n\t\t\t} else {\n\t\t\t\t_platform = \"nodejs\";\n\t\t\t}\n\t\t} catch(e) {\n\t\t\t_platform = \"nodejs\";\n\t\t}\n\t} else if (typeof(environment) !== 'undefined') {\n\t\t_platform = \"rhino\";\n\t} else if (typeof(process) !== 'undefined') {\n\t\t_platform = \"nodejs\";\n\t} else if (typeof(window) !== 'undefined') {\n\t\t_platform = (typeof(PalmSystem) !== 'undefined') ? \"webos\" : \"browser\";\n\t}\n})();\n\n/**\n * @constructor\n * Represents a binary zone info file of the sort that the Unix Zone Info Compiler\n * produces.\n * @param {string} path path to the file to be loaded\n * @param {number} year year of the zone info rules needed\n */\nvar ZoneInfoFile = function (path) {\n\tvar that = this;\n\tswitch (_platform) {\n\t\t/*\n\t\tUncomment and use this when enyo works for binary load.\n\t\tcase \"enyo\":\n\t\t\tvar ajax = new enyo.Ajax({\n\t\t\t\txhrFields: {\n\t\t\t\t\tresponseType:\"arraybuffer\"\n\t\t\t\t},\n\t\t\t\tcacheBust: false,\n\t\t\t\tsync: true,\n\t\t\t\thandleAs: \"binary\",\n\t\t\t\turl: \"file://\" + path\n\t\t\t});\n\t\t\tajax.response(this, function(s, r) {\n\t\t\t\tvar byteArray = new Uint8Array(r);\n\t\t\t\t// console.log(\"ZoneInfoFile bytes received: \" + byteArray.length);\n\t\t\t\tthat._parseInfo(byteArray);\n\t\t\t});\n\t\t\t//ajax.error(this, function(s, r) {\n\t\t\t//\tconsole.log(\"ZoneInfoFile: failed to load files \" + JSON.stringify(s) + \" \" + r);\n\t\t\t//});\n\t\t\tajax.go();\n\t\t\tbreak;\n\t\t*/\n\t\t\n\t\tcase \"nodejs\":\n\t\t\t// console.log(\"ZoneInfoFile: loading zoneinfo path \" + path + \"\\n\");\n\t\t\t\n\t\t\tvar bytes = new Buffer(fs.readFileSync(path));\n\t\t\tvar byteArray = new Uint8Array(bytes);\n\t\t\tthis._parseInfo(byteArray);\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\t// use normal web techniques for sync binary data fetching\n\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\treq.open(\"GET\", \"file:\" + path, false);\n\t\t\treq.overrideMimeType('text\\/plain; charset=x-user-defined');\n\t\t\treq.onload = function(e) {\n\t\t\t\tvar byteArray = new Uint8Array(req.response.length);\n\t\t\t\tfor (var i=0; i<req.response.length; i++) {\n\t\t\t\t\tbyteArray[i] = req.response.charCodeAt(i) & 0xff;\n\t\t\t\t}\n\t\t\t\t// console.log(\"ZoneInfoFile bytes received: \" + byteArray.length);\n\t\t\t\tthat._parseInfo(byteArray);\n\t\t\t};\n\t\t\treq.onerror = function(e) {\n\t\t\t\tthrow \"Cannot load file \" + path;\n\t\t\t};\n\t\t\treq.send();\n\t\t\tbreak;\n\t}\n};\n\n/**\n * @private\n * Parse the binary buffer to find the zone info\n * @param buffer\n */\nZoneInfoFile.prototype._parseInfo = function(buffer) {\n\tvar packed = new PackedBuffer(buffer);\n\n\t// The time zone information files used by tzset(3)\n\t// begin with the magic characters \"TZif\" to identify\n\t// them as time zone information files, followed by\n\t// sixteen bytes reserved for future use, followed by\n\t// six four-byte values of type long, written in a\n\t// ''standard'' byte order (the high-order byte\n\t// of the value is written first).\n\tif (packed.getString(4) != \"TZif\") {\n\t\tthrow \"file format not recognized\";\n\t} else {\n\t\t// ignore 16 bytes\n\t\tpacked.skip(16);\n\n\t\t// The number of UTC/local indicators stored in the file.\n\t\tvar tzh_ttisgmtcnt = packed.getLong();\n\t\t// The number of standard/wall indicators stored in the file.\n\t\tvar tzh_ttisstdcnt = packed.getLong();\n\t\t// The number of leap seconds for which data is stored in the file.\n\t\tvar tzh_leapcnt = packed.getLong();\n\t\t// The number of \"transition times\" for which data is stored in the file.\n\t\tvar tzh_timecnt = packed.getLong();\n\t\t// The number of \"local time types\" for which data is stored in the file (must not be zero).\n\t\tvar tzh_typecnt = packed.getLong();\n\t\t// The number of characters of \"time zone abbreviation strings\" stored in the file.\n\t\tvar tzh_charcnt = packed.getLong();\n\n\t\tthis.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];\n\n\t\tthis.transitionTimes = this.transitionTimes.map(function (item) {\n\t\t\treturn item * 1000;\n\t\t});\n\n\t\t// these are indexes into the zonesInfo that correspond to each transition time\n\t\tthis.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];\n\n\t\tthis.zoneInfo = [];\n\t\tfor (var i = 0; i < tzh_typecnt; i++) {\n\t\t\tthis.zoneInfo.push({\n\t\t\t\toffset: Math.floor(packed.getLong()/60),  // offset in seconds, so convert to minutes\n\t\t\t\tisdst: !!packed.getByte(),\n\t\t\t\tabbreviationIndex: packed.getByte()\n\t\t\t});\n\t\t}\n\n\t\tvar allAbbreviations = packed.getString(tzh_charcnt);\n\n\t\tfor (var i = 0; i < tzh_typecnt; i++) {\n\t\t\tvar abbreviation = allAbbreviations.substring(this.zoneInfo[i].abbreviationIndex);\n\t\t\tthis.zoneInfo[i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\\x00'));\n\t\t}\n\n\t\t// ignore the leap seconds\n\t\tif (tzh_leapcnt) {\n\t\t\tpacked.skip(tzh_leapcnt * 2);\n\t\t}\n\n\t\t// skip the standard/wall time indicators\n\t\tif (tzh_ttisstdcnt) {\n\t\t\tpacked.skip(tzh_ttisstdcnt);\n\t\t}\n\n\t\t// ignore the UTC/local time indicators -- everything should be UTC\n\t\tif (tzh_ttisgmtcnt) {\n\t\t\tpacked.skip(tzh_ttisgmtcnt);\n\t\t}\n\n\t\t// finished reading\n\n\t\t// Replace ttinfo indexes for ttinfo objects.\n\t\tvar that = this;\n\t\tthis.ruleIndex = this.ruleIndex.map(function (item) {\n\t\t\treturn {\n\t\t\t\toffset: that.zoneInfo[item].offset,\n\t\t\t\tisdst: that.zoneInfo[item].isdst,\n\t\t\t\tabbreviation: that.zoneInfo[item].abbreviation\n\t\t\t};\n\t\t});\n\n\t\t// calculate the dst savings for each daylight time\n\t\tfor (var i = 0; i < tzh_timecnt; i++) {\n\t\t\tif (i > 0 && this.ruleIndex[i].isdst) {\n\t\t\t\tthis.ruleIndex[i].savings = this.ruleIndex[i].offset - this.ruleIndex[i-1].offset;\n\t\t\t}\n\t\t}\n\n\t\t// Set standard, dst, and before ttinfos. before will be\n\t\t// used when a given time is before any transitions,\n\t\t// and will be set to the first non-dst ttinfo, or to\n\t\t// the first dst, if all of them are dst.\n\t\tif (!this.transitionTimes.length) {\n\t\t\tthis.standardTime = this.zoneInfo[0];\n\t\t} else {\n\t\t\tfor (var j = tzh_timecnt - 1; j > -1; j--) {\n\t\t\t\tvar tti = this.ruleIndex[j];\n\t\t\t\tif (!this.standardTime && !tti.isdst) {\n\t\t\t\t\tthis.standardTime = tti;\n\t\t\t\t} else if (!this.daylightTime && tti.isdst) {\n\t\t\t\t\tthis.daylightTime = tti;\n\t\t\t\t}\n\n\t\t\t\tif (this.daylightTime && this.standardTime)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.daylightTime && !this.standardTime) {\n\t\t\t\tthis.standardTime = this.daylightTime;\n\t\t\t}\n\n\t\t\tfor (var k = this.zoneInfo.length-1; k > 0; k--) {\n\t\t\t\tif (!this.zoneInfo[k].isdst) {\n\t\t\t\t\tthis.defaultTime = this.zoneInfo[k];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!this.defaultTime) {\n\t\t\tthis.defaultTime = this.zoneInfo[this.zoneInfo.length-1];\n\t\t}\n\t}\n};\n\n/**\n * Binary search a sorted array of numbers for a particular target value.\n * If the exact value is not found, it returns the index of the largest\n * entry that is smaller than the given target value.<p>\n *\n * @param {number} target element being sought\n * @param {Array} arr the array being searched\n * @return the index of the array into which the value would fit if\n * inserted, or -1 if given array is not an array or the target is not\n * a number\n */\nZoneInfoFile.prototype.bsearch = function(target, arr) {\n\tif (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined' || target < arr[0]) {\n\t\treturn -1;\n\t}\n\n\t// greater than the end of the array\n\tif (target > arr[arr.length-1]) {\n\t\treturn arr.length - 1;\n\t}\n\n\tvar high = arr.length - 1,\n\t\tlow = 0,\n\t\tmid = 0,\n\t\tvalue;\n\n\twhile (low <= high) {\n\t\tmid = Math.floor((high+low)/2);\n\t\tvalue = arr[mid] - target;\n\t\tif (value > 0) {\n\t\t\thigh = mid - 1;\n\t\t} else if (value < 0) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\t}\n\n\treturn high;\n};\n\n/**\n * Return whether or not this zone uses DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {boolean} true if the zone uses DST in the given year\n */\nZoneInfoFile.prototype.usesDST = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for the zone that was effective Jan 1 of this year\n\t// to Jan 1 of next year, and if any of the infos is DST, then\n\t// this zone supports DST in the given year.\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tif (index !== -1) {\n\t\twhile (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {\n\t\t\tif (this.ruleIndex[index++].isdst) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Return the raw offset from UTC that this zone uses at the given time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} offset from from UTC in number of minutes. Negative\n * numbers are west of Greenwich, positive are east of Greenwich\n */\nZoneInfoFile.prototype.getRawOffset = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\n\tvar offset = this.defaultTime.offset;\n\tif (index > -1) {\n\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n\t\t\toffset = this.ruleIndex[index].offset;\n\t\t}\n\t}\n\n\treturn offset;\n};\n\n/**\n * If this zone uses DST in the given year, return the DST savings\n * in use. If the zone does not use DST in the given year, this\n * method will return 0.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} number of minutes in DST savings if the zone\n * uses DST in the given year, or zero otherwise\n */\nZoneInfoFile.prototype.getDSTSavings = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for all transitions between now and one year \n\t// from now, and calculate the difference in DST (if any)\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tvar savings = 0;\n\tif (index > -1) {\n\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n\t\t\tsavings = this.ruleIndex[index].savings;\n\t\t}\n\t}\n\n\treturn savings;\n};\n\n/**\n * Return the start date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the start\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTStartDate = function(date) {\n\tvar year = date.getFullYear();\n\tvar thisYear = new Date(year, 0, 1).getTime();\n\tvar nextYear = new Date(year+1, 0, 1).getTime();\n\n\t// search for all transitions between Jan 1 of this year\n\t// to Jan 1 of next year, and calculate the difference\n\t// in DST (if any)\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tvar startDate = -1;\n\tif (index > -1) {\n\t\tif (this.transitionTimes[index] < thisYear) {\n\t\t\tindex++; // start in this year instead of the previous year\n\t\t}\n\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n\t\t\tstartDate = this.transitionTimes[index];\n\t\t}\n\t}\n\n\treturn startDate;\n};\n\n/**\n * Return the end date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the end\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTEndDate = function(date) {\n\tvar year = date.getFullYear();\n\tvar thisYear = new Date(year, 0, 1).getTime();\n\tvar nextYear = new Date(year+1, 0, 1).getTime();\n\n\t// search for all transitions between Jan 1 of this year\n\t// to Jan 1 of next year, and calculate the difference\n\t// in DST (if any)\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tvar endDate = -1;\n\tif (index > -1) {\n\t\tif (this.transitionTimes[index] < thisYear) {\n\t\t\tindex++; // start in this year instead of the previous year\n\t\t}\n\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n\t\t\tendDate = this.transitionTimes[index];\n\t\t}\n\t}\n\n\treturn endDate;\n};\n\n/**\n * Return the abbreviation used by this zone in standard\n * time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during standard time\n */\nZoneInfoFile.prototype.getAbbreviation = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for all transitions between now and one year from now, and calculate the difference\n\t// in DST (if any)\n\tvar abbr;\n\tif (this.transitionTimes.length > 0) {\n\t\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\tif (index > -1) {\n\t\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n\t\t\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tabbr = this.standardTime.abbreviation;\n\t}\n\n\treturn abbr;\n};\n\n/**\n * Return the abbreviation used by this zone in daylight\n * time. If the zone does not use DST in the given year,\n * this returns the same thing as getAbbreviation().\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during daylight time\n */\nZoneInfoFile.prototype.getDSTAbbreviation = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for all transitions between now and one year from now, and calculate the difference\n\t// in DST (if any)\n\n\tvar abbr;\n\tif (this.transitionTimes.length > 0) {\n\t\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\tif (index > -1) {\n\t\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n\t\t\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tabbr = this.standardTime.abbreviation;\n\t}\n\n\treturn abbr;\n};\n\n/**\n * Return the zone information for the given date in ilib\n * format.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {Object} an object containing the zone information\n * for the given date in the format that ilib can use directly\n */\nZoneInfoFile.prototype.getIlibZoneInfo = function(date) {\n\tfunction minutesToStr(min) {\n\t\tvar hours = Math.floor(min / 60);\n\t\tvar minutes = min - hours * 60;\n\n\t\treturn hours + \":\" + minutes;\n\t}\n\n\tfunction unixtimeToJD(millis) {\n\t\treturn 2440587.5 + millis / 86400000;\n\t}\n\tvar res = {\n\t\t\"o\": minutesToStr(this.getRawOffset(date))\n\t};\n\tif (this.usesDST(date)) {\n\t\tres.f = \"{c}\";\n\t\tres.e = {\n\t\t\t\"c\": this.getAbbreviation(date),\n\t\t\t\"j\": unixtimeToJD(this.getDSTEndDate(date))\n\t\t};\n\t\tres.s = {\n\t\t\t\"c\": this.getDSTAbbreviation(date),\n\t\t\t\"j\": unixtimeToJD(this.getDSTStartDate(date)),\n\t\t\t\"v\": minutesToStr(this.getDSTSavings(date))\n\t\t};\n\t} else {\n\t\tres.f = this.getAbbreviation(date);\n\t}\n\n\treturn res;\n};\n\nmodule.exports = ZoneInfoFile;\n","/*\n * Locale.js - Locale specifier definition\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilib.js JSUtils.js\n\nvar ilib = require(\"./ilib.js\");\nvar JSUtils = require(\"./JSUtils.js\");\n\n/**\n * @class\n * Create a new locale instance. Locales are specified either with a specifier string \n * that follows the BCP-47 convention (roughly: \"language-region-script-variant\") or \n * with 4 parameters that specify the language, region, variant, and script individually.<p>\n * \n * The language is given as an ISO 639-1 two-letter, lower-case language code. You\n * can find a full list of these codes at \n * <a href=\"http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a><p>\n * \n * The region is given as an ISO 3166-1 two-letter, upper-case region code. You can\n * find a full list of these codes at \n * <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</a>.<p>\n * \n * The variant is any string that does not contain a dash which further differentiates\n * locales from each other.<p>\n * \n * The script is given as the ISO 15924 four-letter script code. In some locales,\n * text may be validly written in more than one script. For example, Serbian is often\n * written in both Latin and Cyrillic, though not usually mixed together. You can find a\n * full list of these codes at \n * <a href=\"http://en.wikipedia.org/wiki/ISO_15924#List_of_codes\">http://en.wikipedia.org/wiki/ISO_15924#List_of_codes</a>.<p>\n * \n * As an example in ilib, the script can be used in the date formatter. Dates formatted \n * in Serbian could have day-of-week names or month names written in the Latin\n * or Cyrillic script. Often one script is default such that sr-SR-Latn is the same\n * as sr-SR so the script code \"Latn\" can be left off of the locale spec.<p> \n * \n * Each part is optional, and an empty string in the specifier before or after a \n * dash or as a parameter to the constructor denotes an unspecified value. In this\n * case, many of the ilib functions will treat the locale as generic. For example\n * the locale \"en-\" is equivalent to \"en\" and to \"en--\" and denotes a locale\n * of \"English\" with an unspecified region and variant, which typically matches\n * any region or variant.<p>\n * \n * Without any arguments to the constructor, this function returns the locale of\n * the host Javascript engine.<p>\n * \n * \n * @constructor\n * @param {?string|Locale=} language the ISO 639 2-letter code for the language, or a full \n * locale spec in BCP-47 format, or another Locale instance to copy from\n * @param {string=} region the ISO 3166 2-letter code for the region\n * @param {string=} variant the name of the variant of this locale, if any\n * @param {string=} script the ISO 15924 code of the script for this locale, if any\n */\nvar Locale = function(language, region, variant, script) {\n\tif (typeof(region) === 'undefined') {\n\t\tvar spec = language || ilib.getLocale();\n\t\tif (typeof(spec) === 'string') {\n\t\t\tvar parts = spec.split('-');\n\t        for ( var i = 0; i < parts.length; i++ ) {\n\t        \tif (Locale._isLanguageCode(parts[i])) {\n\t    \t\t\t/** \n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.language = parts[i];\n\t        \t} else if (Locale._isRegionCode(parts[i])) {\n\t    \t\t\t/** \n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.region = parts[i];\n\t        \t} else if (Locale._isScriptCode(parts[i])) {\n\t    \t\t\t/** \n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.script = parts[i];\n\t        \t} else {\n\t    \t\t\t/** \n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.variant = parts[i];\n\t        \t}\n\t        }\n\t        this.language = this.language || undefined;\n\t        this.region = this.region || undefined;\n\t        this.script = this.script || undefined;\n\t        this.variant = this.variant || undefined;\n\t\t} else if (typeof(spec) === 'object') {\n\t        this.language = spec.language || undefined;\n\t        this.region = spec.region || undefined;\n\t        this.script = spec.script || undefined;\n\t        this.variant = spec.variant || undefined;\n\t\t}\n\t} else {\n\t\tif (language) {\n\t\t\tlanguage = language.trim();\n\t\t\tthis.language = language.length > 0 ? language.toLowerCase() : undefined;\n\t\t} else {\n\t\t\tthis.language = undefined;\n\t\t}\n\t\tif (region) {\n\t\t\tregion = region.trim();\n\t\t\tthis.region = region.length > 0 ? region.toUpperCase() : undefined;\n\t\t} else {\n\t\t\tthis.region = undefined;\n\t\t}\n\t\tif (variant) {\n\t\t\tvariant = variant.trim();\n\t\t\tthis.variant = variant.length > 0 ? variant : undefined;\n\t\t} else {\n\t\t\tthis.variant = undefined;\n\t\t}\n\t\tif (script) {\n\t\t\tscript = script.trim();\n\t\t\tthis.script = script.length > 0 ? script : undefined;\n\t\t} else {\n\t\t\tthis.script = undefined;\n\t\t}\n\t}\n\tthis._genSpec();\n};\n\n// from http://en.wikipedia.org/wiki/ISO_3166-1\nLocale.a2toa3regmap = {\n\t\"AF\": \"AFG\",\n\t\"AX\": \"ALA\",\n\t\"AL\": \"ALB\",\n\t\"DZ\": \"DZA\",\n\t\"AS\": \"ASM\",\n\t\"AD\": \"AND\",\n\t\"AO\": \"AGO\",\n\t\"AI\": \"AIA\",\n\t\"AQ\": \"ATA\",\n\t\"AG\": \"ATG\",\n\t\"AR\": \"ARG\",\n\t\"AM\": \"ARM\",\n\t\"AW\": \"ABW\",\n\t\"AU\": \"AUS\",\n\t\"AT\": \"AUT\",\n\t\"AZ\": \"AZE\",\n\t\"BS\": \"BHS\",\n\t\"BH\": \"BHR\",\n\t\"BD\": \"BGD\",\n\t\"BB\": \"BRB\",\n\t\"BY\": \"BLR\",\n\t\"BE\": \"BEL\",\n\t\"BZ\": \"BLZ\",\n\t\"BJ\": \"BEN\",\n\t\"BM\": \"BMU\",\n\t\"BT\": \"BTN\",\n\t\"BO\": \"BOL\",\n\t\"BQ\": \"BES\",\n\t\"BA\": \"BIH\",\n\t\"BW\": \"BWA\",\n\t\"BV\": \"BVT\",\n\t\"BR\": \"BRA\",\n\t\"IO\": \"IOT\",\n\t\"BN\": \"BRN\",\n\t\"BG\": \"BGR\",\n\t\"BF\": \"BFA\",\n\t\"BI\": \"BDI\",\n\t\"KH\": \"KHM\",\n\t\"CM\": \"CMR\",\n\t\"CA\": \"CAN\",\n\t\"CV\": \"CPV\",\n\t\"KY\": \"CYM\",\n\t\"CF\": \"CAF\",\n\t\"TD\": \"TCD\",\n\t\"CL\": \"CHL\",\n\t\"CN\": \"CHN\",\n\t\"CX\": \"CXR\",\n\t\"CC\": \"CCK\",\n\t\"CO\": \"COL\",\n\t\"KM\": \"COM\",\n\t\"CG\": \"COG\",\n\t\"CD\": \"COD\",\n\t\"CK\": \"COK\",\n\t\"CR\": \"CRI\",\n\t\"CI\": \"CIV\",\n\t\"HR\": \"HRV\",\n\t\"CU\": \"CUB\",\n\t\"CW\": \"CUW\",\n\t\"CY\": \"CYP\",\n\t\"CZ\": \"CZE\",\n\t\"DK\": \"DNK\",\n\t\"DJ\": \"DJI\",\n\t\"DM\": \"DMA\",\n\t\"DO\": \"DOM\",\n\t\"EC\": \"ECU\",\n\t\"EG\": \"EGY\",\n\t\"SV\": \"SLV\",\n\t\"GQ\": \"GNQ\",\n\t\"ER\": \"ERI\",\n\t\"EE\": \"EST\",\n\t\"ET\": \"ETH\",\n\t\"FK\": \"FLK\",\n\t\"FO\": \"FRO\",\n\t\"FJ\": \"FJI\",\n\t\"FI\": \"FIN\",\n\t\"FR\": \"FRA\",\n\t\"GF\": \"GUF\",\n\t\"PF\": \"PYF\",\n\t\"TF\": \"ATF\",\n\t\"GA\": \"GAB\",\n\t\"GM\": \"GMB\",\n\t\"GE\": \"GEO\",\n\t\"DE\": \"DEU\",\n\t\"GH\": \"GHA\",\n\t\"GI\": \"GIB\",\n\t\"GR\": \"GRC\",\n\t\"GL\": \"GRL\",\n\t\"GD\": \"GRD\",\n\t\"GP\": \"GLP\",\n\t\"GU\": \"GUM\",\n\t\"GT\": \"GTM\",\n\t\"GG\": \"GGY\",\n\t\"GN\": \"GIN\",\n\t\"GW\": \"GNB\",\n\t\"GY\": \"GUY\",\n\t\"HT\": \"HTI\",\n\t\"HM\": \"HMD\",\n\t\"VA\": \"VAT\",\n\t\"HN\": \"HND\",\n\t\"HK\": \"HKG\",\n\t\"HU\": \"HUN\",\n\t\"IS\": \"ISL\",\n\t\"IN\": \"IND\",\n\t\"ID\": \"IDN\",\n\t\"IR\": \"IRN\",\n\t\"IQ\": \"IRQ\",\n\t\"IE\": \"IRL\",\n\t\"IM\": \"IMN\",\n\t\"IL\": \"ISR\",\n\t\"IT\": \"ITA\",\n\t\"JM\": \"JAM\",\n\t\"JP\": \"JPN\",\n\t\"JE\": \"JEY\",\n\t\"JO\": \"JOR\",\n\t\"KZ\": \"KAZ\",\n\t\"KE\": \"KEN\",\n\t\"KI\": \"KIR\",\n\t\"KP\": \"PRK\",\n\t\"KR\": \"KOR\",\n\t\"KW\": \"KWT\",\n\t\"KG\": \"KGZ\",\n\t\"LA\": \"LAO\",\n\t\"LV\": \"LVA\",\n\t\"LB\": \"LBN\",\n\t\"LS\": \"LSO\",\n\t\"LR\": \"LBR\",\n\t\"LY\": \"LBY\",\n\t\"LI\": \"LIE\",\n\t\"LT\": \"LTU\",\n\t\"LU\": \"LUX\",\n\t\"MO\": \"MAC\",\n\t\"MK\": \"MKD\",\n\t\"MG\": \"MDG\",\n\t\"MW\": \"MWI\",\n\t\"MY\": \"MYS\",\n\t\"MV\": \"MDV\",\n\t\"ML\": \"MLI\",\n\t\"MT\": \"MLT\",\n\t\"MH\": \"MHL\",\n\t\"MQ\": \"MTQ\",\n\t\"MR\": \"MRT\",\n\t\"MU\": \"MUS\",\n\t\"YT\": \"MYT\",\n\t\"MX\": \"MEX\",\n\t\"FM\": \"FSM\",\n\t\"MD\": \"MDA\",\n\t\"MC\": \"MCO\",\n\t\"MN\": \"MNG\",\n\t\"ME\": \"MNE\",\n\t\"MS\": \"MSR\",\n\t\"MA\": \"MAR\",\n\t\"MZ\": \"MOZ\",\n\t\"MM\": \"MMR\",\n\t\"NA\": \"NAM\",\n\t\"NR\": \"NRU\",\n\t\"NP\": \"NPL\",\n\t\"NL\": \"NLD\",\n\t\"NC\": \"NCL\",\n\t\"NZ\": \"NZL\",\n\t\"NI\": \"NIC\",\n\t\"NE\": \"NER\",\n\t\"NG\": \"NGA\",\n\t\"NU\": \"NIU\",\n\t\"NF\": \"NFK\",\n\t\"MP\": \"MNP\",\n\t\"NO\": \"NOR\",\n\t\"OM\": \"OMN\",\n\t\"PK\": \"PAK\",\n\t\"PW\": \"PLW\",\n\t\"PS\": \"PSE\",\n\t\"PA\": \"PAN\",\n\t\"PG\": \"PNG\",\n\t\"PY\": \"PRY\",\n\t\"PE\": \"PER\",\n\t\"PH\": \"PHL\",\n\t\"PN\": \"PCN\",\n\t\"PL\": \"POL\",\n\t\"PT\": \"PRT\",\n\t\"PR\": \"PRI\",\n\t\"QA\": \"QAT\",\n\t\"RE\": \"REU\",\n\t\"RO\": \"ROU\",\n\t\"RU\": \"RUS\",\n\t\"RW\": \"RWA\",\n\t\"BL\": \"BLM\",\n\t\"SH\": \"SHN\",\n\t\"KN\": \"KNA\",\n\t\"LC\": \"LCA\",\n\t\"MF\": \"MAF\",\n\t\"PM\": \"SPM\",\n\t\"VC\": \"VCT\",\n\t\"WS\": \"WSM\",\n\t\"SM\": \"SMR\",\n\t\"ST\": \"STP\",\n\t\"SA\": \"SAU\",\n\t\"SN\": \"SEN\",\n\t\"RS\": \"SRB\",\n\t\"SC\": \"SYC\",\n\t\"SL\": \"SLE\",\n\t\"SG\": \"SGP\",\n\t\"SX\": \"SXM\",\n\t\"SK\": \"SVK\",\n\t\"SI\": \"SVN\",\n\t\"SB\": \"SLB\",\n\t\"SO\": \"SOM\",\n\t\"ZA\": \"ZAF\",\n\t\"GS\": \"SGS\",\n\t\"SS\": \"SSD\",\n\t\"ES\": \"ESP\",\n\t\"LK\": \"LKA\",\n\t\"SD\": \"SDN\",\n\t\"SR\": \"SUR\",\n\t\"SJ\": \"SJM\",\n\t\"SZ\": \"SWZ\",\n\t\"SE\": \"SWE\",\n\t\"CH\": \"CHE\",\n\t\"SY\": \"SYR\",\n\t\"TW\": \"TWN\",\n\t\"TJ\": \"TJK\",\n\t\"TZ\": \"TZA\",\n\t\"TH\": \"THA\",\n\t\"TL\": \"TLS\",\n\t\"TG\": \"TGO\",\n\t\"TK\": \"TKL\",\n\t\"TO\": \"TON\",\n\t\"TT\": \"TTO\",\n\t\"TN\": \"TUN\",\n\t\"TR\": \"TUR\",\n\t\"TM\": \"TKM\",\n\t\"TC\": \"TCA\",\n\t\"TV\": \"TUV\",\n\t\"UG\": \"UGA\",\n\t\"UA\": \"UKR\",\n\t\"AE\": \"ARE\",\n\t\"GB\": \"GBR\",\n\t\"US\": \"USA\",\n\t\"UM\": \"UMI\",\n\t\"UY\": \"URY\",\n\t\"UZ\": \"UZB\",\n\t\"VU\": \"VUT\",\n\t\"VE\": \"VEN\",\n\t\"VN\": \"VNM\",\n\t\"VG\": \"VGB\",\n\t\"VI\": \"VIR\",\n\t\"WF\": \"WLF\",\n\t\"EH\": \"ESH\",\n\t\"YE\": \"YEM\",\n\t\"ZM\": \"ZMB\",\n\t\"ZW\": \"ZWE\"\n};\n\n\nLocale.a1toa3langmap = {\n\t\"ab\": \"abk\",\n\t\"aa\": \"aar\",\n\t\"af\": \"afr\",\n\t\"ak\": \"aka\",\n\t\"sq\": \"sqi\",\n\t\"am\": \"amh\",\n\t\"ar\": \"ara\",\n\t\"an\": \"arg\",\n\t\"hy\": \"hye\",\n\t\"as\": \"asm\",\n\t\"av\": \"ava\",\n\t\"ae\": \"ave\",\n\t\"ay\": \"aym\",\n\t\"az\": \"aze\",\n\t\"bm\": \"bam\",\n\t\"ba\": \"bak\",\n\t\"eu\": \"eus\",\n\t\"be\": \"bel\",\n\t\"bn\": \"ben\",\n\t\"bh\": \"bih\",\n\t\"bi\": \"bis\",\n\t\"bs\": \"bos\",\n\t\"br\": \"bre\",\n\t\"bg\": \"bul\",\n\t\"my\": \"mya\",\n\t\"ca\": \"cat\",\n\t\"ch\": \"cha\",\n\t\"ce\": \"che\",\n\t\"ny\": \"nya\",\n\t\"zh\": \"zho\",\n\t\"cv\": \"chv\",\n\t\"kw\": \"cor\",\n\t\"co\": \"cos\",\n\t\"cr\": \"cre\",\n\t\"hr\": \"hrv\",\n\t\"cs\": \"ces\",\n\t\"da\": \"dan\",\n\t\"dv\": \"div\",\n\t\"nl\": \"nld\",\n\t\"dz\": \"dzo\",\n\t\"en\": \"eng\",\n\t\"eo\": \"epo\",\n\t\"et\": \"est\",\n\t\"ee\": \"ewe\",\n\t\"fo\": \"fao\",\n\t\"fj\": \"fij\",\n\t\"fi\": \"fin\",\n\t\"fr\": \"fra\",\n\t\"ff\": \"ful\",\n\t\"gl\": \"glg\",\n\t\"ka\": \"kat\",\n\t\"de\": \"deu\",\n\t\"el\": \"ell\",\n\t\"gn\": \"grn\",\n\t\"gu\": \"guj\",\n\t\"ht\": \"hat\",\n\t\"ha\": \"hau\",\n\t\"he\": \"heb\",\n\t\"hz\": \"her\",\n\t\"hi\": \"hin\",\n\t\"ho\": \"hmo\",\n\t\"hu\": \"hun\",\n\t\"ia\": \"ina\",\n\t\"id\": \"ind\",\n\t\"ie\": \"ile\",\n\t\"ga\": \"gle\",\n\t\"ig\": \"ibo\",\n\t\"ik\": \"ipk\",\n\t\"io\": \"ido\",\n\t\"is\": \"isl\",\n\t\"it\": \"ita\",\n\t\"iu\": \"iku\",\n\t\"ja\": \"jpn\",\n\t\"jv\": \"jav\",\n\t\"kl\": \"kal\",\n\t\"kn\": \"kan\",\n\t\"kr\": \"kau\",\n\t\"ks\": \"kas\",\n\t\"kk\": \"kaz\",\n\t\"km\": \"khm\",\n\t\"ki\": \"kik\",\n\t\"rw\": \"kin\",\n\t\"ky\": \"kir\",\n\t\"kv\": \"kom\",\n\t\"kg\": \"kon\",\n\t\"ko\": \"kor\",\n\t\"ku\": \"kur\",\n\t\"kj\": \"kua\",\n\t\"la\": \"lat\",\n\t\"lb\": \"ltz\",\n\t\"lg\": \"lug\",\n\t\"li\": \"lim\",\n\t\"ln\": \"lin\",\n\t\"lo\": \"lao\",\n\t\"lt\": \"lit\",\n\t\"lu\": \"lub\",\n\t\"lv\": \"lav\",\n\t\"gv\": \"glv\",\n\t\"mk\": \"mkd\",\n\t\"mg\": \"mlg\",\n\t\"ms\": \"msa\",\n\t\"ml\": \"mal\",\n\t\"mt\": \"mlt\",\n\t\"mi\": \"mri\",\n\t\"mr\": \"mar\",\n\t\"mh\": \"mah\",\n\t\"mn\": \"mon\",\n\t\"na\": \"nau\",\n\t\"nv\": \"nav\",\n\t\"nb\": \"nob\",\n\t\"nd\": \"nde\",\n\t\"ne\": \"nep\",\n\t\"ng\": \"ndo\",\n\t\"nn\": \"nno\",\n\t\"no\": \"nor\",\n\t\"ii\": \"iii\",\n\t\"nr\": \"nbl\",\n\t\"oc\": \"oci\",\n\t\"oj\": \"oji\",\n\t\"cu\": \"chu\",\n\t\"om\": \"orm\",\n\t\"or\": \"ori\",\n\t\"os\": \"oss\",\n\t\"pa\": \"pan\",\n\t\"pi\": \"pli\",\n\t\"fa\": \"fas\",\n\t\"pl\": \"pol\",\n\t\"ps\": \"pus\",\n\t\"pt\": \"por\",\n\t\"qu\": \"que\",\n\t\"rm\": \"roh\",\n\t\"rn\": \"run\",\n\t\"ro\": \"ron\",\n\t\"ru\": \"rus\",\n\t\"sa\": \"san\",\n\t\"sc\": \"srd\",\n\t\"sd\": \"snd\",\n\t\"se\": \"sme\",\n\t\"sm\": \"smo\",\n\t\"sg\": \"sag\",\n\t\"sr\": \"srp\",\n\t\"gd\": \"gla\",\n\t\"sn\": \"sna\",\n\t\"si\": \"sin\",\n\t\"sk\": \"slk\",\n\t\"sl\": \"slv\",\n\t\"so\": \"som\",\n\t\"st\": \"sot\",\n\t\"es\": \"spa\",\n\t\"su\": \"sun\",\n\t\"sw\": \"swa\",\n\t\"ss\": \"ssw\",\n\t\"sv\": \"swe\",\n\t\"ta\": \"tam\",\n\t\"te\": \"tel\",\n\t\"tg\": \"tgk\",\n\t\"th\": \"tha\",\n\t\"ti\": \"tir\",\n\t\"bo\": \"bod\",\n\t\"tk\": \"tuk\",\n\t\"tl\": \"tgl\",\n\t\"tn\": \"tsn\",\n\t\"to\": \"ton\",\n\t\"tr\": \"tur\",\n\t\"ts\": \"tso\",\n\t\"tt\": \"tat\",\n\t\"tw\": \"twi\",\n\t\"ty\": \"tah\",\n\t\"ug\": \"uig\",\n\t\"uk\": \"ukr\",\n\t\"ur\": \"urd\",\n\t\"uz\": \"uzb\",\n\t\"ve\": \"ven\",\n\t\"vi\": \"vie\",\n\t\"vo\": \"vol\",\n\t\"wa\": \"wln\",\n\t\"cy\": \"cym\",\n\t\"wo\": \"wol\",\n\t\"fy\": \"fry\",\n\t\"xh\": \"xho\",\n\t\"yi\": \"yid\",\n\t\"yo\": \"yor\",\n\t\"za\": \"zha\",\n\t\"zu\": \"zul\"\n};\n\n/**\n * Tell whether or not the str does not start with a lower case ASCII char.\n * @private\n * @param {string} str the char to check\n * @return {boolean} true if the char is not a lower case ASCII char\n */\nLocale._notLower = function(str) {\n\t// do this with ASCII only so we don't have to depend on the CType functions\n\tvar ch = str.charCodeAt(0);\n\treturn ch < 97 || ch > 122;\n};\n\n/**\n * Tell whether or not the str does not start with an upper case ASCII char.\n * @private\n * @param {string} str the char to check\n * @return {boolean} true if the char is a not an upper case ASCII char\n */\nLocale._notUpper = function(str) {\n\t// do this with ASCII only so we don't have to depend on the CType functions\n\tvar ch = str.charCodeAt(0);\n\treturn ch < 65 || ch > 90;\n};\n\n/**\n * Tell whether or not the str does not start with a digit char.\n * @private\n * @param {string} str the char to check\n * @return {boolean} true if the char is a not an upper case ASCII char\n */\nLocale._notDigit = function(str) {\n\t// do this with ASCII only so we don't have to depend on the CType functions\n\tvar ch = str.charCodeAt(0);\n\treturn ch < 48 || ch > 57;\n};\n\n/**\n * Tell whether or not the given string has the correct syntax to be \n * an ISO 639 language code.\n * \n * @private\n * @param {string} str the string to parse\n * @return {boolean} true if the string could syntactically be a language code.\n */\nLocale._isLanguageCode = function(str) {\n\tif (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {\n\t\treturn false;\n\t}\n\n\tfor (var i = 0; i < str.length; i++) {\n\t\tif (Locale._notLower(str.charAt(i))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Tell whether or not the given string has the correct syntax to be \n * an ISO 3166 2-letter region code or M.49 3-digit region code.\n * \n * @private\n * @param {string} str the string to parse\n * @return {boolean} true if the string could syntactically be a language code.\n */\nLocale._isRegionCode = function (str) {\n\tif (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {\n\t\treturn false;\n\t}\n\t\n\tif (str.length === 2) {\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\tif (Locale._notUpper(str.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\tif (Locale._notDigit(str.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Tell whether or not the given string has the correct syntax to be \n * an ISO 639 language code.\n * \n * @private\n * @param {string} str the string to parse\n * @return {boolean} true if the string could syntactically be a language code.\n */\nLocale._isScriptCode = function(str) {\n\tif (typeof(str) === 'undefined' || str.length !== 4 || Locale._notUpper(str.charAt(0))) {\n\t\treturn false;\n\t}\n\t\n\tfor (var i = 1; i < 4; i++) {\n\t\tif (Locale._notLower(str.charAt(i))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Return the ISO-3166 alpha3 equivalent region code for the given ISO 3166 alpha2\n * region code. If the given alpha2 code is not found, this function returns its\n * argument unchanged.\n * @static\n * @param {string|undefined} alpha2 the alpha2 code to map\n * @return {string|undefined} the alpha3 equivalent of the given alpha2 code, or the alpha2\n * parameter if the alpha2 value is not found\n */\nLocale.regionAlpha2ToAlpha3 = function(alpha2) {\n\treturn Locale.a2toa3regmap[alpha2] || alpha2;\n};\n\n/**\n * Return the ISO-639 alpha3 equivalent language code for the given ISO 639 alpha1\n * language code. If the given alpha1 code is not found, this function returns its\n * argument unchanged.\n * @static\n * @param {string|undefined} alpha1 the alpha1 code to map\n * @return {string|undefined} the alpha3 equivalent of the given alpha1 code, or the alpha1\n * parameter if the alpha1 value is not found\n */\nLocale.languageAlpha1ToAlpha3 = function(alpha1) {\n\treturn Locale.a1toa3langmap[alpha1] || alpha1;\n};\n\nLocale.prototype = {\n\t/**\n\t * @private\n\t */\n\t_genSpec: function () {\n\t\tthis.spec = this.language || \"\";\n\t\t\n\t\tif (this.script) {\n\t\t\tif (this.spec.length > 0) {\n\t\t\t\tthis.spec += \"-\";\n\t\t\t}\n\t\t\tthis.spec += this.script;\n\t\t}\n\t\t\n\t\tif (this.region) {\n\t\t\tif (this.spec.length > 0) {\n\t\t\t\tthis.spec += \"-\";\n\t\t\t}\n\t\t\tthis.spec += this.region;\n\t\t}\n\t\t\n\t\tif (this.variant) {\n\t\t\tif (this.spec.length > 0) {\n\t\t\t\tthis.spec += \"-\";\n\t\t\t}\n\t\t\tthis.spec += this.variant;\n\t\t}\n\t},\n\n\t/**\n\t * Return the ISO 639 language code for this locale. \n\t * @return {string|undefined} the language code for this locale \n\t */\n\tgetLanguage: function() {\n\t\treturn this.language;\n\t},\n\t\n\t/**\n\t * Return the language of this locale as an ISO-639-alpha3 language code\n\t * @return {string|undefined} the alpha3 language code of this locale\n\t */\n\tgetLanguageAlpha3: function() {\n\t\treturn Locale.languageAlpha1ToAlpha3(this.language);\n\t},\n\t\n\t/**\n\t * Return the ISO 3166 region code for this locale.\n\t * @return {string|undefined} the region code of this locale\n\t */\n\tgetRegion: function() {\n\t\treturn this.region;\n\t},\n\t\n\t/**\n\t * Return the region of this locale as an ISO-3166-alpha3 region code\n\t * @return {string|undefined} the alpha3 region code of this locale\n\t */\n\tgetRegionAlpha3: function() {\n\t\treturn Locale.regionAlpha2ToAlpha3(this.region);\n\t},\n\t\n\t/**\n\t * Return the ISO 15924 script code for this locale\n\t * @return {string|undefined} the script code of this locale\n\t */\n\tgetScript: function () {\n\t\treturn this.script;\n\t},\n\t\n\t/**\n\t * Return the variant code for this locale\n\t * @return {string|undefined} the variant code of this locale, if any\n\t */\n\tgetVariant: function() {\n\t\treturn this.variant;\n\t},\n\t\n\t/**\n\t * Return the whole locale specifier as a string.\n\t * @return {string} the locale specifier\n\t */\n\tgetSpec: function() {\n\t\treturn this.spec;\n\t},\n\t\n\t/**\n\t * Express this locale object as a string. Currently, this simply calls the getSpec\n\t * function to represent the locale as its specifier.\n\t * \n\t * @return {string} the locale specifier\n\t */\n\ttoString: function() {\n\t\treturn this.getSpec();\n\t},\n\t\n\t/**\n\t * Return true if the the other locale is exactly equal to the current one.\n\t * @return {boolean} whether or not the other locale is equal to the current one \n\t */\n\tequals: function(other) {\n\t\treturn this.language === other.language &&\n\t\t\tthis.region === other.region &&\n\t\t\tthis.script === other.script &&\n\t\t\tthis.variant === other.variant;\n\t},\n\n\t/**\n\t * Return true if the current locale is the special pseudo locale.\n\t * @return {boolean} true if the current locale is the special pseudo locale\n\t */\n\tisPseudo: function () {\n\t\treturn JSUtils.indexOf(ilib.pseudoLocales, this.spec) > -1;\n\t}\n};\n\n// static functions\n/**\n * @private\n */\nLocale.locales = [\n\t// !macro localelist\n];\n\n/**\n * Return the list of available locales that this iLib file supports.\n * If this copy of ilib is pre-assembled with locale data, then the \n * list locales may be much smaller\n * than the list of all available locales in the iLib repository. The\n * assembly tool will automatically fill in the list for an assembled\n * copy of iLib. If this copy is being used with dynamically loaded \n * data, then you \n * can load any locale that iLib supports. You can form a locale with any \n * combination of a language and region tags that exist in the locale\n * data directory. Language tags are in the root of the locale data dir,\n * and region tags can be found underneath the \"und\" directory. (The \n * region tags are separated into a different dir because the region names \n * conflict with language names on file systems that are case-insensitive.) \n * If you have culled the locale data directory to limit the size of\n * your app, then this function should return only those files that actually exist\n * according to the ilibmanifest.json file in the root of that locale\n * data dir. Make sure your ilibmanifest.json file is up-to-date with\n * respect to the list of files that exist in the locale data dir.\n * \n * @param {boolean} sync if false, load the list of available files from disk\n * asynchronously, otherwise load them synchronously. (Default: true/synchronously)\n * @param {Function} onLoad a callback function to call if asynchronous\n * load was requested and the list of files have been loaded.\n * @return {Array.<string>} this is an array of locale specs for which \n * this iLib file has locale data for\n */\nLocale.getAvailableLocales = function (sync, onLoad) {\n\tvar locales = [];\n\tif (Locale.locales.length || typeof(ilib._load.listAvailableFiles) !== 'function') {\n\t\tlocales = Locale.locales;\n\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\tonLoad(locales);\n\t\t}\n\t} else {\n\t\tif (typeof(sync) === 'undefined') {\n\t\t\tsync = true;\n\t\t}\n\t\tilib._load.listAvailableFiles(sync, function(manifest) {\n\t\t\tif (manifest) {\n\t\t\t\tfor (var dir in manifest) {\n\t\t\t\t\tvar filelist = manifest[dir];\n\t\t\t\t\tfor (var i = 0; i < filelist.length; i++) {\n\t\t\t\t\t\tif (filelist[i].length > 15 && filelist[i].substr(-15) === \"localeinfo.json\") {\n\t\t\t\t\t\t\tlocales.push(filelist[i].substring(0,filelist[i].length-16).replace(/\\//g, \"-\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\t\tonLoad(locales);\n\t\t\t}\n\t\t});\n\t}\n\treturn locales;\n};\n\nmodule.exports = Locale;\n","/*\n * ratadie.js - Represent the RD date number in the calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nJulianDay.js\nMathUtils.js\nJSUtils.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar JSUtils = require(\"./JSUtils.js\");\nvar JulianDay = require(\"./JulianDay.js\");\n\n/**\n * @class\n * Construct a new RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \n * to 60 and treated as if it were a year in the regular 60-year cycle.\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \n * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used\n * in the Hebrew calendar. \n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @param {Object=} params parameters that govern the settings and behaviour of this RD date\n */\nvar RataDie = function(params) {\n\tif (params) {\n\t\tif (typeof(params.date) !== 'undefined') {\n\t\t\t// accept JS Date classes or strings\n\t\t\tvar date = params.date;\n\t\t\tif (!(JSUtils.isDate(date))) {\n\t\t\t\tdate = new Date(date); // maybe a string initializer?\n\t\t\t}\n\t\t\tthis._setTime(date.getTime());\n\t\t} else if (typeof(params.unixtime) !== 'undefined') {\n\t\t\tthis._setTime(parseInt(params.unixtime, 10));\n\t\t} else if (typeof(params.julianday) !== 'undefined') {\n\t\t\t// JD time is defined to be UTC\n\t\t\tthis._setJulianDay(parseFloat(params.julianday));\n\t\t} else if (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond || params.parts || params.cycle) {\n\t\t\tthis._setDateComponents(params);\n\t\t} else if (typeof(params.rd) !== 'undefined') {\n\t\t\tthis.rd = (typeof(params.rd) === 'object' && params.rd instanceof RataDie) ? params.rd.rd : params.rd;\n\t\t}\n\t}\n\t\n\t/**\n\t * @type {number} the Rata Die number of this date for this calendar type\n\t */\n\tif (typeof(this.rd) === 'undefined') {\n\t\tvar now = new Date();\n\t\tthis._setTime(now.getTime());\n\t}\n};\n\n/**\n * @private\n * @const\n * @type {number}\n */\nRataDie.gregorianEpoch = 1721424.5;\n\nRataDie.prototype = {\n\t/**\n\t * @protected\n\t * @const\n\t * @type {number}\n\t * the difference between a zero Julian day and the zero Gregorian date. \n\t */\n\tepoch: RataDie.gregorianEpoch,\n\t\n\t/**\n\t * Set the RD of this instance according to the given unix time. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970.\n\t *\n\t * @protected\n\t * @param {number} millis the unix time to set this date to in milliseconds \n\t */\n\t_setTime: function(millis) {\n\t\t// 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)\n\t\tthis._setJulianDay(2440587.5 + millis / 86400000);\n\t},\n\n\t/**\n\t * Set the date of this instance using a Julian Day.\n\t * @protected\n\t * @param {number} date the Julian Day to use to set this date\n\t */\n\t_setJulianDay: function (date) {\n\t\tvar jd = (typeof(date) === 'number') ? new JulianDay(date) : date;\n\t\t// round to the nearest millisecond\n\t\tthis.rd = MathUtils.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;\n\t},\n\n\t/**\n\t * Return the rd number of the particular day of the week on or before the \n\t * given rd. eg. The Sunday on or before the given rd.\n\t * @protected\n\t * @param {number} rd the rata die date of the reference date\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \n\t * to the current date\n\t * @return {number} the rd of the day of the week\n\t */\n\t_onOrBefore: function(rd, dayOfWeek) {\n\t\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 2, 7);\n\t},\n\t\n\t/**\n\t * Return the rd number of the particular day of the week on or before the current rd.\n\t * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \n\t * to the current date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the rd of the day of the week\n\t */\n\tonOrBefore: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd + offset, dayOfWeek) - offset;\n\t},\n\t\n\t/**\n\t * Return the rd number of the particular day of the week on or before the current rd.\n\t * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \n\t * to the reference date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the day of the week\n\t */\n\tonOrAfter: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd+6+offset, dayOfWeek) - offset;\n\t},\n\t\n\t/**\n\t * Return the rd number of the particular day of the week before the current rd.\n\t * eg. The Sunday before the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \n\t * to the reference date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the day of the week\n\t */\n\tbefore: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd-1+offset, dayOfWeek) - offset;\n\t},\n\t\n\t/**\n\t * Return the rd number of the particular day of the week after the current rd.\n\t * eg. The Sunday after the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \n\t * to the reference date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the day of the week\n\t */\n\tafter: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd+7+offset, dayOfWeek) - offset;\n\t},\n\n\t/**\n\t * Return the unix time equivalent to this Gregorian date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only\n\t * returns a valid number for dates between midnight, Jan 1, 1970 and  \n\t * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance \n\t * encodes a date outside of that range, this method will return -1.\n\t * \n\t * @return {number} a number giving the unix time, or -1 if the date is outside the\n\t * valid unix time range\n\t */\n\tgetTime: function() {\n\t\t// earlier than Jan 1, 1970\n\t\t// or later than Jan 19, 2038 at 3:14:07am\n\t\tvar jd = this.getJulianDay();\n\t\tif (jd < 2440587.5 || jd > 2465442.634803241) { \n\t\t\treturn -1;\n\t\t}\n\t\n\t\t// avoid the rounding errors in the floating point math by only using\n\t\t// the whole days from the rd, and then calculating the milliseconds directly\n\t\treturn Math.round((jd - 2440587.5) * 86400000);\n\t},\n\n\t/**\n\t * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n\t * (or the type \"time_t\" in C/C++) is only encoded with a unsigned 32 bit integer, and thus \n\t * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \n\t * 32 bits and the Date object allows you to encode up to 100 million days worth of time \n\t * after Jan 1, 1970, and even more interestingly 100 million days worth of time before\n\t * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \n\t * range. If this instance encodes a date outside of that range, this method will return\n\t * NaN.\n\t * \n\t * @return {number} a number giving the extended unix time, or NaN if the date is outside \n\t * the valid extended unix time range\n\t */\n\tgetTimeExtended: function() {\n\t\tvar jd = this.getJulianDay();\n\t\t\n\t\t// test if earlier than Jan 1, 1970 - 100 million days\n\t\t// or later than Jan 1, 1970 + 100 million days\n\t\tif (jd < -97559412.5 || jd > 102440587.5) { \n\t\t\treturn NaN;\n\t\t}\n\t\n\t\t// avoid the rounding errors in the floating point math by only using\n\t\t// the whole days from the rd, and then calculating the milliseconds directly\n\t\treturn Math.round((jd - 2440587.5) * 86400000);\n\t},\n\n\t/**\n\t * Return the Julian Day equivalent to this calendar date as a number.\n\t * This returns the julian day in UTC.\n\t * \n\t * @return {number} the julian date equivalent of this date\n\t */\n\tgetJulianDay: function() {\n\t\treturn this.rd + this.epoch;\n\t},\n\n\t/**\n\t * Return the Rata Die (fixed day) number of this RD date.\n\t * \n\t * @return {number} the rd date as a number\n\t */\n\tgetRataDie: function() {\n\t\treturn this.rd;\n\t}\n};\n\nmodule.exports = RataDie;","/*\n * Utils.js - Core utility routines\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilib.js Locale.js JSUtils.js\n\nvar ilib = require(\"./ilib.js\");\nvar Locale = require(\"./Locale.js\");\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Utils = {};\n\n/**\n * Find and merge all the locale data for a particular prefix in the given locale\n * and return it as a single javascript object. This merges the data in the \n * correct order:\n * \n * <ol>\n * <li>shared data (usually English)\n * <li>data for language\n * <li>data for language + region\n * <li>data for language + region + script\n * <li>data for language + region + script + variant\n * </ol>\n * \n * It is okay for any of the above to be missing. This function will just skip the \n * missing data. However, if everything except the shared data is missing, this \n * function returns undefined, allowing the caller to go and dynamically load the\n * data instead.\n * \n * @static\n * @param {string} prefix prefix under ilib.data of the data to merge\n * @param {Locale} locale locale of the data being sought\n * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.\n * If false, concatenate array elements in object1 with items in object2.\n * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,\n * merge all the relevant locale data together.\n * @return {Object?} the merged locale data\n */\nUtils.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {\n\tvar data = undefined;\n\tvar loc = locale || new Locale();\n\tvar foundLocaleData = false;\n\tvar property = prefix;\n\tvar mostSpecific;\n\n\tdata = ilib.data[prefix] || {};\n\n\tmostSpecific = data;\n\n\tif (loc.getLanguage()) {\n\t\tproperty = prefix + '_' + loc.getLanguage();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\t\n\tif (loc.getRegion()) {\n\t\tproperty = prefix + '_' + loc.getRegion();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\t\n\tif (loc.getLanguage()) {\n\t\tproperty = prefix + '_' + loc.getLanguage();\n\t\t\n\t\tif (loc.getScript()) {\n\t\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();\n\t\t\tif (ilib.data[property]) {\n\t\t\t\tfoundLocaleData = true;\n\t\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\t\tmostSpecific = ilib.data[property];\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (loc.getRegion()) {\n\t\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();\n\t\t\tif (ilib.data[property]) {\n\t\t\t\tfoundLocaleData = true;\n\t\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\t\tmostSpecific = ilib.data[property];\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tif (loc.getRegion() && loc.getVariant()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getLanguage() && loc.getScript() && loc.getRegion()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\t\n\treturn foundLocaleData ? (returnOne ? mostSpecific : data) : undefined;\n};\n\n/**\n * Return an array of relative path names for the\n * files that represent the data for the given locale.<p>\n * \n * Note that to prevent the situation where a directory for\n * a language exists next to the directory for a region where\n * the language code and region code differ only by case, the \n * plain region directories are located under the special \n * \"undefined\" language directory which has the ISO code \"und\".\n * The reason is that some platforms have case-insensitive \n * file systems, and you cannot have 2 directories with the \n * same name which only differ by case. For example, \"es\" is\n * the ISO 639 code for the language \"Spanish\" and \"ES\" is\n * the ISO 3166 code for the region \"Spain\", so both the\n * directories cannot exist underneath \"locale\". The region\n * therefore will be loaded from \"und/ES\" instead.<p>  \n * \n * <h4>Variations</h4>\n * \n * With only language and region specified, the following\n * sequence of paths will be generated:<p>\n * \n * <pre>\n * language\n * und/region\n * language/region\n * </pre>\n * \n * With only language and script specified:<p>\n * \n * <pre>\n * language\n * language/script\n * </pre>\n * \n * With only script and region specified:<p>\n * \n * <pre>\n * und/region  \n * </pre>\n * \n * With only region and variant specified:<p>\n * \n * <pre>\n * und/region\n * region/variant\n * </pre>\n * \n * With only language, script, and region specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * language/script/region\n * </pre>\n * \n * With only language, region, and variant specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/region\n * region/variant\n * language/region/variant\n * </pre>\n * \n * With all parts specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * region/variant\n * language/script/region\n * language/region/variant\n * language/script/region/variant\n * </pre>\n * \n * @static\n * @param {Locale} locale load the files for this locale\n * @param {string?} name the file name of each file to load without\n * any path\n * @return {Array.<string>} An array of relative path names\n * for the files that contain the locale data\n */\nUtils.getLocFiles = function(locale, name) {\n\tvar dir = \"\";\n\tvar files = [];\n\tvar filename = name || \"resources.json\";\n\tvar loc = locale || new Locale();\n\t\n\tvar language = loc.getLanguage();\n\tvar region = loc.getRegion();\n\tvar script = loc.getScript();\n\tvar variant = loc.getVariant();\n\t\n\tfiles.push(filename); // generic shared file\n\t\n\tif (language) {\n\t\tdir = language + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\t\n\tif (region) {\n\t\tdir = \"und/\" + region + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\t\n\tif (language) {\n\t\tif (script) {\n\t\t\tdir = language + \"/\" + script + \"/\";\n\t\t\tfiles.push(dir + filename);\n\t\t}\n\t\tif (region) {\n\t\t\tdir = language + \"/\" + region + \"/\";\n\t\t\tfiles.push(dir + filename);\n\t\t}\n\t}\n\t\n\tif (region && variant) {\n\t\tdir = \"und/\" + region + \"/\" + variant + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (language && script && region) {\n\t\tdir = language + \"/\" + script + \"/\" + region + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (language && region && variant) {\n\t\tdir = language + \"/\" + region + \"/\" + variant + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (language && script && region && variant) {\n\t\tdir = language + \"/\" + script + \"/\" + region + \"/\" + variant + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\t\n\treturn files;\n};\n\n/**\n * Load data using the new loader object or via the old function callback.\n * @static\n * @private\n */\nUtils._callLoadData = function (files, sync, params, callback) {\n\t// console.log(\"Utils._callLoadData called\");\n\tif (typeof(ilib._load) === 'function') {\n\t\t// console.log(\"Utils._callLoadData: calling as a regular function\");\n\t\treturn ilib._load(files, sync, params, callback);\n\t} else if (typeof(ilib._load) === 'object' && typeof(ilib._load.loadFiles) === 'function') {\n\t\t// console.log(\"Utils._callLoadData: calling as an object\");\n\t\treturn ilib._load.loadFiles(files, sync, params, callback);\n\t}\n\t\n\t// console.log(\"Utils._callLoadData: not calling. Type is \" + typeof(ilib._load) + \" and instanceof says \" + (ilib._load instanceof Loader));\n\treturn undefined;\n};\n\n/**\n * Find locale data or load it in. If the data with the given name is preassembled, it will\n * find the data in ilib.data. If the data is not preassembled but there is a loader function,\n * this function will call it to load the data. Otherwise, the callback will be called with\n * undefined as the data. This function will create a cache under the given class object.\n * If data was successfully loaded, it will be set into the cache so that future access to \n * the same data for the same locale is much quicker.<p>\n * \n * The parameters can specify any of the following properties:<p>\n * \n * <ul>\n * <li><i>name</i> - String. The name of the file being loaded. Default: ResBundle.json\n * <li><i>object</i> - Object. The class attempting to load data. The cache is stored inside of here.\n * <li><i>locale</i> - Locale. The locale for which data is loaded. Default is the current locale.\n * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.\n * <li><i>type</i> - String. Type of file to load. This can be \"json\" or \"other\" type. Default: \"json\" \n * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays\n * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent \n * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.  \n * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function\n * <li><i>sync</i> - boolean. Whether or not to load the data synchronously\n * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.\n * Data is not returned from this method, so a callback function is mandatory.\n * </ul>\n * \n * @static\n * @param {Object} params Parameters configuring how to load the files (see above)\n */\nUtils.loadData = function(params) {\n\tvar name = \"resources.json\",\n\t\tobject = undefined, \n\t\tlocale = new Locale(ilib.getLocale()), \n\t\tsync = false, \n\t\ttype = undefined,\n\t\tloadParams = {},\n\t\tcallback = undefined,\n\t\tnonlocale = false,\n\t\treplace = false,\n\t\tbasename;\n\t\n\tif (!params || typeof(params.callback) !== 'function') {\n\t\treturn;\n\t}\n\n\tif (params.name) {\n\t\tname = params.name;\n\t}\n\tif (params.object) {\n\t\tobject = params.object;\n\t}\n\tif (params.locale) {\n\t\tlocale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t}\t\t\t\n\tif (params.type) {\n\t\ttype = params.type;\n\t}\n\tif (params.loadParams) {\n\t\tloadParams = params.loadParams;\n\t}\n\tif (params.sync) {\n\t\tsync = params.sync;\n\t}\n\tif (params.nonlocale) {\n\t\tnonlocale = !!params.nonlocale;\n\t}\n\tif (typeof(params.replace) === 'boolean') {\n\t\treplace = params.replace;\n\t}\n\t\n\tcallback = params.callback;\n\t\n\tif (object && !object.cache) {\n\t\tobject.cache = {};\n\t}\n\t\n\tif (!type) {\n\t\tvar dot = name.lastIndexOf(\".\");\n\t\ttype = (dot !== -1) ? name.substring(dot+1) : \"text\";\n\t}\n\n\tvar spec = ((!nonlocale && locale.getSpec().replace(/-/g, '_')) || \"root\") + \",\" + name + \",\" + String(JSUtils.hashCode(loadParams));\n\tif (!object || typeof(object.cache[spec]) === 'undefined') {\n\t\tvar data, returnOne = (loadParams && loadParams.returnOne);\n\t\t\n\t\tif (type === \"json\") {\n\t\t\t// console.log(\"type is json\");\n\t\t\tbasename = name.substring(0, name.lastIndexOf(\".\"));\n\t\t\tif (nonlocale) {\n\t\t\t\tbasename = basename.replace(/\\//g, '.').replace(/[\\\\\\+\\-]/g, \"_\");\n\t\t\t\tdata = ilib.data[basename];\n\t\t\t} else {\n\t\t\t\tdata = Utils.mergeLocData(basename, locale, replace, returnOne);\n\t\t\t}\n\t\t\tif (data) {\n\t\t\t\t// console.log(\"found assembled data\");\n\t\t\t\tif (object) {\n\t\t\t\t\tobject.cache[spec] = data;\n\t\t\t\t}\n\t\t\t\tcallback(data);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// console.log(\"ilib._load is \" + typeof(ilib._load));\n\t\tif (typeof(ilib._load) !== 'undefined') {\n\t\t\t// the data is not preassembled, so attempt to load it dynamically\n\t\t\tvar files = nonlocale ? [ name || \"resources.json\" ] : Utils.getLocFiles(locale, name);\n\t\t\tif (type !== \"json\") {\n\t\t\t\tloadParams.returnOne = true;\n\t\t\t}\n\t\t\t\n\t\t\tUtils._callLoadData(files, sync, loadParams, ilib.bind(this, function(arr) {\n\t\t\t\tif (type === \"json\") {\n\t\t\t\t\tdata = ilib.data[basename] || {};\n\t\t\t\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\t\t\t\tif (typeof(arr[i]) !== 'undefined') {\n\t\t\t\t\t\t\tdata = loadParams.returnOne ? arr[i] : JSUtils.merge(data, arr[i], replace);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (object) {\n\t\t\t\t\t\tobject.cache[spec] = data;\n\t\t\t\t\t}\n\t\t\t\t\tcallback(data);\n\t\t\t\t} else {\n\t\t\t\t\tvar i = arr.length-1; \n\t\t\t\t\twhile (i > -1 && !arr[i]) {\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t\tif (i > -1) {\n\t\t\t\t\t\tif (object) {\n\t\t\t\t\t\t\tobject.cache[spec] = arr[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(arr[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t} else {\n\t\t\t// no data other than the generic shared data\n\t\t\tif (type === \"json\") {\n\t\t\t\tdata = ilib.data[basename];\n\t\t\t}\n\t\t\tif (object && data) {\n\t\t\t\tobject.cache[spec] = data;\n\t\t\t}\n\t\t\tcallback(data);\n\t\t}\n\t} else {\n\t\tcallback(object.cache[spec]);\n\t}\n};\n\nmodule.exports = Utils;","/*\n * HebrewRataDie.js - Represent an RD date in the Hebrew calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nMathUtils.js\nHebrewCal.js\nRataDie.js\n*/\n\nvar HebrewCal = require(\"./HebrewCal.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar RataDie = require(\"./RataDie.js\");\n\n/**\n * @class\n * Construct a new Hebrew RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \n * the parts or specify the minutes, seconds, and milliseconds, but not both. \n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Hebrew date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew RD date\n */\nvar HebrewRataDie = function(params) {\n\tthis.cal = params && params.cal || new HebrewCal();\n\tthis.rd = undefined;\n\tRataDie.call(this, params);\n};\n\nHebrewRataDie.prototype = new RataDie();\nHebrewRataDie.prototype.parent = RataDie;\nHebrewRataDie.prototype.constructor = HebrewRataDie;\n\n/**\n * The difference between a zero Julian day and the first day of the Hebrew \n * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25\n * @private\n * @const\n * @type number\n */\nHebrewRataDie.prototype.epoch = 347997.25;\n\n/**\n * the cumulative lengths of each month for a non-leap year, without new years corrections\n * @private\n * @const\n * @type Array.<number>\n */\nHebrewRataDie.cumMonthLengths = [\n\t176,  /* Nisan */\n\t206,  /* Iyyar */\n\t235,  /* Sivan */\n\t265,  /* Tammuz */\n\t294,  /* Av */\n\t324,  /* Elul */\n\t0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t30,   /* Heshvan */\n\t59,   /* Kislev */\n\t88,   /* Teveth */\n\t117,  /* Shevat */\n\t147   /* Adar I */\n];\n\n/**\n * the cumulative lengths of each month for a leap year, without new years corrections \n * @private\n * @const\n * @type Array.<number>\n */\nHebrewRataDie.cumMonthLengthsLeap = [\n\t206,  /* Nisan */\n\t236,  /* Iyyar */\n\t265,  /* Sivan */\n\t295,  /* Tammuz */\n\t324,  /* Av */\n\t354,  /* Elul */\n\t0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t30,   /* Heshvan */\n\t59,   /* Kislev */\n\t88,   /* Teveth */\n\t117,  /* Shevat */\n\t147,  /* Adar I */\n\t177   /* Adar II */\n];\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n * \n * @private\n * @param {Object} date the date components to calculate the RD from\n */\nHebrewRataDie.prototype._setDateComponents = function(date) {\n\tvar elapsed = HebrewCal.elapsedDays(date.year);\n\tvar days = elapsed +\n\t\tHebrewCal.newYearsCorrection(date.year, elapsed) +\n\t\tdate.day - 1;\n\tvar sum = 0, table;\n\t\n\t//console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n\t//console.log(\"getRataDie: days is \" +  days);\n\t//console.log(\"getRataDie: new years correction is \" +  HebrewCal.newYearsCorrection(date.year, elapsed));\n\t\n\ttable = this.cal.isLeapYear(date.year) ? \n\t\tHebrewRataDie.cumMonthLengthsLeap :\n\t\tHebrewRataDie.cumMonthLengths;\n\tsum = table[date.month-1];\n\t\n\t// gets cumulative without correction, so now add in the correction\n\tif ((date.month < 7 || date.month > 8) && HebrewCal.longHeshvan(date.year)) {\n\t\tsum++;\n\t}\n\tif ((date.month < 7 || date.month > 9) && HebrewCal.longKislev(date.year)) {\n\t\tsum++;\n\t}\n\t// console.log(\"getRataDie: cum days is now \" +  sum);\n\t\n\tdays += sum;\n\t\n\t// the date starts at sunset, which we take as 18:00, so the hours from\n\t// midnight to 18:00 are on the current Gregorian day, and the hours from\n\t// 18:00 to midnight are on the previous Gregorian day. So to calculate the \n\t// number of hours into the current day that this time represents, we have\n\t// to count from 18:00 to midnight first, and add in 6 hours if the time is\n\t// less than 18:00\n\tvar minute, second, millisecond;\n\t\n\tif (typeof(date.parts) !== 'undefined') {\n\t\t// The parts (halaqim) of the hour. This can be a number from 0 to 1079.\n\t\tvar parts = parseInt(date.parts, 10);\n\t\tvar seconds = parseInt(parts, 10) * 3.333333333333;\n\t\tminute = Math.floor(seconds / 60);\n\t\tseconds -= minute * 60;\n\t\tsecond = Math.floor(seconds);\n\t\tmillisecond = (seconds - second);\t\n\t} else {\n\t\tminute = parseInt(date.minute, 10) || 0;\n\t\tsecond = parseInt(date.second, 10) || 0;\n\t\tmillisecond = parseInt(date.millisecond, 10) || 0;\n\t}\n\t\t\n\tvar time;\n\tif (date.hour >= 18) {\n\t\ttime = ((date.hour - 18 || 0) * 3600000 +\n\t\t\t(minute || 0) * 60000 +\n\t\t\t(second || 0) * 1000 +\n\t\t\t(millisecond || 0)) / \n\t\t\t86400000;\n\t} else {\n\t\ttime = 0.25 +\t// 6 hours from 18:00 to midnight on the previous gregorian day\n\t\t\t\t((date.hour || 0) * 3600000 +\n\t\t\t\t(minute || 0) * 60000 +\n\t\t\t\t(second || 0) * 1000 +\n\t\t\t\t(millisecond || 0)) / \n\t\t\t\t86400000;\n\t}\n\t\n\t//console.log(\"getRataDie: rd is \" +  (days + time));\n\tthis.rd = days + time;\n};\n\t\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\nHebrewRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek + 1, 7);\n};\n\nmodule.exports = HebrewRataDie;\n","/*\n * IslamicRataDie.js - Represent an RD date in the Islamic calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nIslamicCal.js\nRataDie.js\n*/\n\nvar RataDie = require(\"./RataDie.js\");\nvar IslamicCal = require(\"./IslamicCal.js\");\n\n/**\n * @class\n * Construct a new Islamic RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Islamic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic RD date\n */\nvar IslamicRataDie = function(params) {\n\tthis.cal = params && params.cal || new IslamicCal();\n\tthis.rd = undefined;\n\tRataDie.call(this, params);\n};\n\nIslamicRataDie.prototype = new RataDie();\nIslamicRataDie.prototype.parent = RataDie;\nIslamicRataDie.prototype.constructor = IslamicRataDie;\n\n/**\n * The difference between a zero Julian day and the first Islamic date\n * of Friday, July 16, 622 CE Julian. \n * @private\n * @const\n * @type number\n */\nIslamicRataDie.prototype.epoch = 1948439.5;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nIslamicRataDie.prototype._setDateComponents = function(date) {\n\tvar days = (date.year - 1) * 354 +\n\t\tMath.ceil(29.5 * (date.month - 1)) +\n\t\tdate.day +\n\t\tMath.floor((3 + 11 * date.year) / 30) - 1;\n\tvar time = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) / \n\t\t86400000; \n\t\n\t//console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n\t//console.log(\"getRataDie: days is \" +  days);\n\t//console.log(\"getRataDie: time is \" +  time);\n\t//console.log(\"getRataDie: rd is \" +  (days + time));\n\n\tthis.rd = days + time;\n};\n\t\nmodule.exports = IslamicRataDie;","/*\n * julianDate.js - Represent a date in the Julian calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nJulianCal.js \nRataDie.js\n*/\n\nvar RataDie = require(\"./RataDie.js\");\nvar JulianCal = require(\"./JulianCal.js\");\n\n/**\n * @class\n * Construct a new Julian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Julian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian RD date\n */\nvar JulianRataDie = function(params) {\n\tthis.cal = params && params.cal || new JulianCal();\n\tthis.rd = undefined;\n\tRataDie.call(this, params);\n};\n\nJulianRataDie.prototype = new RataDie();\nJulianRataDie.prototype.parent = RataDie;\nJulianRataDie.prototype.constructor = JulianRataDie;\n\n/**\n * The difference between a zero Julian day and the first Julian date\n * of Friday, July 16, 622 CE Julian. \n * @private\n * @const\n * @type number\n */\nJulianRataDie.prototype.epoch = 1721422.5;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n * \n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nJulianRataDie.prototype._setDateComponents = function(date) {\n\tvar year = date.year + ((date.year < 0) ? 1 : 0);\n\tvar years = 365 * (year - 1) + Math.floor((year-1)/4);\n\tvar dayInYear = (date.month > 1 ? JulianCal.cumMonthLengths[date.month-1] : 0) +\n\t\tdate.day +\n\t\t(this.cal.isLeapYear(date.year) && date.month > 2 ? 1 : 0);\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) / \n\t\t86400000;\n\t\n\t/*\n\tconsole.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\n\tconsole.log(\"getRataDie: year is \" +  years);\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n\t*/\n\t\n\tthis.rd = years + dayInYear + rdtime;\n};\n\nmodule.exports = JulianRataDie;","/*\n * PersAlsoRataDie.js - Represent an RD date in the Persian algorithmic calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nPersianAlgoCal.js \nMathUtils.js\nRataDie.js\n*/\n\nvar MathUtils = require(\"./MathUtils.js\");\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\nvar RataDie = require(\"./RataDie.js\");\n\n/**\n * @class\n * Construct a new Persian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\nvar PersAlgoRataDie = function(params) {\n\tthis.cal = params && params.cal || new PersianAlgoCal();\n\tthis.rd = undefined;\n\tRataDie.call(this, params);\n};\n\nPersAlgoRataDie.prototype = new RataDie();\nPersAlgoRataDie.prototype.parent = RataDie;\nPersAlgoRataDie.prototype.constructor = PersAlgoRataDie;\n\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @const\n * @type number\n */\nPersAlgoRataDie.prototype.epoch = 1948319.5;\n\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year \n */\nPersAlgoRataDie.cumMonthLengths = [\n    0,    // Farvardin\n\t31,   // Ordibehesht\n\t62,   // Khordad\n\t93,   // Tir\n\t124,  // Mordad\n\t155,  // Shahrivar\n\t186,  // Mehr\n\t216,  // Aban\n\t246,  // Azar\n\t276,  // Dey\n\t306,  // Bahman\n\t336,  // Esfand\n\t365\n];\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nPersAlgoRataDie.prototype._setDateComponents = function(date) {\n\tvar year = this.cal.equivalentCycleYear(date.year);\n\tvar y = date.year - (date.year >= 0 ? 474 : 473);\n\tvar rdOfYears = 1029983 * Math.floor(y/2820) + 365 * (year - 1) + Math.floor((682 * year - 110) / 2816);\n\tvar dayInYear = (date.month > 1 ? PersAlgoRataDie.cumMonthLengths[date.month-1] : 0) + date.day;\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) /\n\t\t86400000;\n\t\n\t/*\n\t// console.log(\"getRataDie: converting \" +  JSON.stringify(this));\n\tconsole.log(\"getRataDie: year is \" +  year);\n\tconsole.log(\"getRataDie: rd of years is \" +  rdOfYears);\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (rdOfYears + dayInYear + rdtime));\n\t*/\n\t\n\tthis.rd = rdOfYears + dayInYear + rdtime;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\nPersAlgoRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\nmodule.exports = PersAlgoRataDie;","/*\n * LocaleInfo.js - Encode locale-specific defaults\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilib.js Locale.js Utils.js\n\n// !data localeinfo\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar Locale = require(\"./Locale.js\");\n\n/**\n * @class\n * Create a new locale info instance. Locale info instances give information about\n * the default settings for a particular locale. These settings may be overridden\n * by various parts of the code, and should be used as a fall-back setting of last\n * resort. <p>\n * \n * The optional options object holds extra parameters if they are necessary. The\n * current list of supported options are:\n * \n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the locale info object is fully \n * loaded. When the onLoad option is given, the localeinfo object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while. \n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * If this copy of ilib is pre-assembled and all the data is already available, \n * or if the data was already previously loaded, then this constructor will call\n * the onLoad callback immediately when the initialization is done. \n * If the onLoad option is not given, this class will only attempt to load any\n * missing locale data synchronously.\n * \n * \n * @constructor\n * @see {ilib.setLoaderCallback} for information about registering a loader callback\n * function\n * @param {Locale|string=} locale the locale for which the info is sought, or undefined for\n * @param {Object=} options the locale for which the info is sought, or undefined for\n * the current locale\n */\nvar LocaleInfo = function(locale, options) {\n\tvar sync = true,\n\t    loadParams = undefined;\n\t\n\t/* these are all the defaults. Essentially, en-US */\n\t/**\n\t  @private \n\t  @type {{\n\t\tscripts:Array.<string>,\n\t\ttimezone:string,\n\t\tunits:string,\n\t\tcalendar:string,\n\t\tclock:string,\n\t\tcurrency:string,\n\t\tfirstDayOfWeek:number,\n\t\tweekendStart:number,\n\t\tweekendEnd:number,\n\t\tmeridiems:string,\n\t\tunitfmt: {long:string,short:string},\n\t\tnumfmt:Object.<{\n\t\t\tcurrencyFormats:Object.<{common:string,commonNegative:string,iso:string,isoNegative:string}>,\n\t\t\tscript:string,\n\t\t\tdecimalChar:string,\n\t\t\tgroupChar:string,\n\t\t\tprigroupSize:number,\n\t\t\tsecgroupSize:number,\n\t\t\tnegativenumFmt:string,\n\t\t\tpctFmt:string,\n\t\t\tnegativepctFmt:string,\n\t\t\tpctChar:string,\n\t\t\troundingMode:string,\n\t\t\texponential:string,\n\t\t\tdigits:string\n\t\t}>\n\t  }}\n\t*/\n\tthis.info = LocaleInfo.defaultInfo;\n\t\n\tswitch (typeof(locale)) {\n\t\tcase \"string\":\n\t\t\tthis.locale = new Locale(locale);\n\t\t\tbreak;\n\t\tdefault:\n\t\tcase \"undefined\":\n\t\t\tthis.locale = new Locale();\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\tthis.locale = locale;\n\t\t\tbreak;\n\t}\n\t\n\tif (options) {\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\t\t\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tif (!LocaleInfo.cache) {\n\t\tLocaleInfo.cache = {};\n\t}\n\n\tUtils.loadData({\n\t\tobject: LocaleInfo, \n\t\tlocale: this.locale, \n\t\tname: \"localeinfo.json\", \n\t\tsync: sync, \n\t\tloadParams: loadParams, \n\t\tcallback: ilib.bind(this, function (info) {\n\t\t\tif (!info) {\n\t\t\t\tinfo = LocaleInfo.defaultInfo;\n\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\n\t\t\t\tLocaleInfo.cache[spec] = info;\n\t\t\t}\n\t\t\tthis.info = info;\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t})\n\t});\n};\n\nLocaleInfo.defaultInfo = /** @type {{\n\tscripts:Array.<string>,\n\ttimezone:string,\n\tunits:string,\n\tcalendar:string,\n\tclock:string,\n\tcurrency:string,\n\tfirstDayOfWeek:number,\n\tweekendStart:number,\n\tweekendEnd:number,\n\tmeridiems:string,\n\tunitfmt: {long:string,short:string},\n\tnumfmt:Object.<{\n\t\tcurrencyFormats:Object.<{\n\t\t\tcommon:string,\n\t\t\tcommonNegative:string,\n\t\t\tiso:string,\n\t\t\tisoNegative:string\n\t\t}>,\n\t\tscript:string,\n\t\tdecimalChar:string,\n\t\tgroupChar:string,\n\t\tprigroupSize:number,\n\t\tsecgroupSize:number,\n\t\tnegativenumFmt:string,\n\t\tpctFmt:string,\n\t\tnegativepctFmt:string,\n\t\tpctChar:string,\n\t\troundingMode:string,\n\t\texponential:string,\n\t\tdigits:string\n\t}>\n}}*/ ilib.data.localeinfo;\nLocaleInfo.defaultInfo = LocaleInfo.defaultInfo || {\n\t\"scripts\": [\"Latn\"],\n    \"timezone\": \"Etc/UTC\",\n    \"units\": \"metric\",\n    \"calendar\": \"gregorian\",\n    \"clock\": \"24\",\n    \"currency\": \"USD\",\n    \"firstDayOfWeek\": 1,\n    \"meridiems\": \"gregorian\",\n    \"numfmt\": {\n        \"currencyFormats\": {\n            \"common\": \"{s}{n}\",\n            \"commonNegative\": \"{s}-{n}\",\n            \"iso\": \"{s}{n}\",\n            \"isoNegative\": \"{s}-{n}\"\n        },\n        \"script\": \"Latn\",\n        \"decimalChar\": \",\",\n        \"groupChar\": \".\",\n        \"prigroupSize\": 3,\n        \"secgroupSize\": 0,\n        \"pctFmt\": \"{n}%\",\n        \"negativepctFmt\": \"-{n}%\",\n        \"pctChar\": \"%\",\n        \"roundingMode\": \"halfdown\",\n        \"exponential\": \"e\",\n        \"digits\": \"\"\n    }\n};\n\nLocaleInfo.prototype = {\n    /**\n     * Return the name of the locale's language in English.\n     * @returns {string} the name of the locale's language in English\n     */\n    getLanguageName: function () {\n    \treturn this.info[\"language.name\"];\t\n    },\n    \n    /**\n     * Return the name of the locale's region in English. If the locale\n     * has no region, this returns undefined.\n     * \n     * @returns {string|undefined} the name of the locale's region in English\n     */\n    getRegionName: function () {\n    \treturn this.info[\"region.name\"];\t\n    },\n\n    /**\n\t * Return whether this locale commonly uses the 12- or the 24-hour clock.\n\t *  \n\t * @returns {string} \"12\" if the locale commonly uses a 12-hour clock, or \"24\"\n\t * if the locale commonly uses a 24-hour clock. \n\t */\n\tgetClock: function() {\n\t\treturn this.info.clock;\n\t},\n\n\t/**\n\t * Return the locale that this info object was created with.\n\t * @returns {Locale} The locale spec of the locale used to construct this info instance\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\t\n\t/**\n\t * Return the name of the measuring system that is commonly used in the given locale.\n\t * Valid values are \"uscustomary\", \"imperial\", and \"metric\".\n\t * \n\t * @returns {string} The name of the measuring system commonly used in the locale\n\t */\n\tgetUnits: function () {\n\t\treturn this.info.units;\n\t},\n        \n        getUnitFormat: function () {\n                return this.info.unitfmt;\n        },\n\t\n\t/**\n\t * Return the name of the calendar that is commonly used in the given locale.\n\t * \n\t * @returns {string} The name of the calendar commonly used in the locale\n\t */\n\tgetCalendar: function () {\n\t\treturn this.info.calendar;\n\t},\n\t\n\t/**\n\t * Return the day of week that starts weeks in the current locale. Days are still\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars \n\t * should be displayed and weeks calculated with the day of week returned from this \n\t * function as the first day of the week.\n\t * \n\t * @returns {number} the day of the week that starts weeks in the current locale.\n\t */\n\tgetFirstDayOfWeek: function () {\n\t\treturn this.info.firstDayOfWeek;\n\t},\n\t\n\t/**\n\t * Return the day of week that starts weekend in the current locale. Days are still\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday.\n\t * \n\t * @returns {number} the day of the week that starts weeks in the current locale.\n\t */\n\tgetWeekEndStart: function () {\n\t\treturn this.info.weekendStart;\n\t},\n\n\t/**\n\t * Return the day of week that starts weekend in the current locale. Days are still\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday.\n\t * \n\t * @returns {number} the day of the week that starts weeks in the current locale.\n\t */\n\tgetWeekEndEnd: function () {\n\t\treturn this.info.weekendEnd;\n\t},\n\n\t/**\n\t * Return the default time zone for this locale. Many locales span across multiple\n\t * time zones. In this case, the time zone with the largest population is chosen\n\t * to represent the locale. This is obviously not that accurate, but then again,\n\t * this method's return value should only be used as a default anyways.\n\t * @returns {string} the default time zone for this locale.\n\t */\n\tgetTimeZone: function () {\n\t\treturn this.info.timezone;\n\t},\n\t\n\t/**\n\t * Return the decimal separator for formatted numbers in this locale.\n\t * @returns {string} the decimal separator char\n\t */\n\tgetDecimalSeparator: function () {\n\t\treturn this.info.numfmt.decimalChar;\n\t},\n\t\n\t/**\n\t * Return the decimal separator for formatted numbers in this locale for native script.\n\t * @returns {string} the decimal separator char\n\t */\n\tgetNativeDecimalSeparator: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.decimalChar) || this.info.numfmt.decimalChar;\n\t},\n\t\n\t/**\n\t * Return the separator character used to separate groups of digits on the \n\t * integer side of the decimal character.\n\t * @returns {string} the grouping separator char\n\t */\n\tgetGroupingSeparator: function () {\n\t\treturn this.info.numfmt.groupChar;\n\t},\n\n\t/**\n\t * Return the separator character used to separate groups of digits on the \n\t * integer side of the decimal character for the native script if present other than the default script.\n\t * @returns {string} the grouping separator char\n\t */\n\tgetNativeGroupingSeparator: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.groupChar) || this.info.numfmt.groupChar;\n\t},\n\t\n\t/**\n\t * Return the minimum number of digits grouped together on the integer side \n\t * for the first (primary) group. \n\t * In western European cultures, groupings are in 1000s, so the number of digits\n\t * is 3. \n\t * @returns {number} the number of digits in a primary grouping, or 0 for no grouping\n\t */\n\tgetPrimaryGroupingDigits: function () {\n\t\treturn (typeof(this.info.numfmt.prigroupSize) !== 'undefined' && this.info.numfmt.prigroupSize) || 0;\n\t},\n\n\t/**\n\t * Return the minimum number of digits grouped together on the integer side\n\t * for the second or more (secondary) group.<p>\n\t *   \n\t * In western European cultures, all groupings are by 1000s, so the secondary\n\t * size should be 0 because there is no secondary size. In general, if this \n\t * method returns 0, then all groupings are of the primary size.<p> \n\t * \n\t * For some other cultures, the first grouping (primary)\n\t * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be\n\t * written as: \"1,00,000\".\n\t * \n\t * @returns {number} the number of digits in a secondary grouping, or 0 for no \n\t * secondary grouping. \n\t */\n\tgetSecondaryGroupingDigits: function () {\n\t\treturn this.info.numfmt.secgroupSize || 0;\n\t},\n\n\t/**\n\t * Return the format template used to format percentages in this locale.\n\t * @returns {string} the format template for formatting percentages\n\t */\n\tgetPercentageFormat: function () {\n\t\treturn this.info.numfmt.pctFmt;\n\t},\n\n\t/**\n\t * Return the format template used to format percentages in this locale\n\t * with negative amounts.\n\t * @returns {string} the format template for formatting percentages\n\t */\n\tgetNegativePercentageFormat: function () {\n\t\treturn this.info.numfmt.negativepctFmt;\n\t},\n\n\t/**\n\t * Return the symbol used for percentages in this locale.\n\t * @returns {string} the symbol used for percentages in this locale\n\t */\n\tgetPercentageSymbol: function () {\n\t\treturn this.info.numfmt.pctChar || \"%\";\n\t},\n\n\t/**\n\t * Return the symbol used for exponential in this locale.\n\t * @returns {string} the symbol used for exponential in this locale\n\t */\n\tgetExponential: function () {\n\t\treturn this.info.numfmt.exponential;\n\t},\n\n\t/**\n\t * Return the symbol used for exponential in this locale for native script.\n\t * @returns {string} the symbol used for exponential in this locale for native script\n\t */\n\tgetNativeExponential: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.exponential) || this.info.numfmt.exponential;\n\t},\n\n\t/**\n\t * Return the symbol used for percentages in this locale for native script.\n\t * @returns {string} the symbol used for percentages in this locale for native script\n\t */\n\tgetNativePercentageSymbol: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.pctChar) || this.info.numfmt.pctChar || \"%\";\n\t\n\t},\n\t/**\n\t * Return the format template used to format negative numbers in this locale.\n\t * @returns {string} the format template for formatting negative numbers\n\t */\n\tgetNegativeNumberFormat: function () { \n\t\treturn this.info.numfmt.negativenumFmt;\n\t},\n\t\n\t/**\n\t * Return an object containing the format templates for formatting currencies\n\t * in this locale. The object has a number of properties in it that each are\n\t * a particular style of format. Normally, this contains a \"common\" and an \"iso\"\n\t * style, but may contain others in the future.\n\t * @returns {Object} an object containing the format templates for currencies\n\t */\n\tgetCurrencyFormats: function () {\n\t\treturn this.info.numfmt.currencyFormats;\n\t},\n\t\n\t/**\n\t * Return the currency that is legal in the locale, or which is most commonly \n\t * used in regular commerce.\n\t * @returns {string} the ISO 4217 code for the currency of this locale\n\t */\n\tgetCurrency: function () {\n\t\treturn this.info.currency;\n\t},\n\t\n\t/**\n\t * Return a string that describes the style of digits used by this locale.\n\t * Possible return values are:\n\t * <ul>\n\t * <li><i>western</i> - uses the regular western 10-based digits 0 through 9\n\t * <li><i>optional</i> - native 10-based digits exist, but in modern usage,\n\t * this locale most often uses western digits\n\t * <li><i>native</i> - native 10-based native digits exist and are used\n\t * regularly by this locale\n\t * <li><i>custom</i> - uses native digits by default that are not 10-based\n\t * </ul>\n\t * @returns {string} string that describes the style of digits used in this locale\n\t */\n\tgetDigitsStyle: function () {\n\t\tif (this.info.numfmt.useNative) {\n\t\t\treturn \"native\";\n\t\t}\n\t\tif (typeof(this.info.native_numfmt) !== 'undefined') {\n\t\t\treturn \"optional\";\n\t\t}\n\t\treturn \"western\";\n\t},\n\t\n\t/**\n\t * Return the digits of the default script if they are defined.\n\t * If not defined, the default should be the regular \"Arabic numerals\"\n\t * used in the Latin script. (0-9)\n\t * @returns {string|undefined} the digits used in the default script \n\t */\n\tgetDigits: function () {\n\t\treturn this.info.numfmt.digits;\n\t},\n\t\n\t/**\n\t * Return the digits of the native script if they are defined. \n\t * @returns {string|undefined} the digits used in the default script \n\t */\n\tgetNativeDigits: function () {\n\t\treturn (this.info.numfmt.useNative && this.info.numfmt.digits) || (this.info.native_numfmt && this.info.native_numfmt.digits);\n\t},\n\t\n\t/**\n\t * If this locale typically uses a different type of rounding for numeric\n\t * formatting other than halfdown, especially for currency, then it can be \n\t * specified in the localeinfo. If the locale uses the default, then this \n\t * method returns undefined. The locale's rounding method overrides the \n\t * rounding method for the currency itself, which can sometimes shared \n\t * between various locales so it is less specific.\n\t * @returns {string} the name of the rounding mode typically used in this\n\t * locale, or \"halfdown\" if the locale does not override the default\n\t */\n\tgetRoundingMode: function () {\n\t\treturn this.info.numfmt.roundingMode;\n\t},\n\t\n\t/**\n\t * Return the default script used to write text in the language of this \n\t * locale. Text for most languages is written in only one script, but there\n\t * are some languages where the text can be written in a number of scripts,\n\t * depending on a variety of things such as the region, ethnicity, religion, \n\t * etc. of the author. This method returns the default script for the\n\t * locale, in which the language is most commonly written.<p> \n\t * \n\t * The script is returned as an ISO 15924 4-letter code.\n\t * \n\t * @returns {string} the ISO 15924 code for the default script used to write\n\t * text in this locale \n\t */\n\tgetDefaultScript: function() {\n\t\treturn (this.info.scripts) ? this.info.scripts[0] : \"Latn\";\n\t},\n\t\n\t/**\n\t * Return the script used for the current locale. If the current locale\n\t * explicitly defines a script, then this script is returned. If not, then \n\t * the default script for the locale is returned.\n\t * \n\t * @see LocaleInfo.getDefaultScript\n\t * @returns {string} the ISO 15924 code for the script used to write\n\t * text in this locale\n\t */\n\tgetScript: function() {\n\t\treturn this.locale.getScript() || this.getDefaultScript(); \n\t},\n\t\n\t/**\n\t * Return an array of script codes which are used to write text in the current\n\t * language. Text for most languages is written in only one script, but there\n\t * are some languages where the text can be written in a number of scripts,\n\t * depending on a variety of things such as the region, ethnicity, religion, \n\t * etc. of the author. This method returns an array of script codes in which \n\t * the language is commonly written.\n\t * \n\t * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used \n\t * to write text in this language\n\t */\n\tgetAllScripts: function() {\n\t\treturn this.info.scripts || [\"Latn\"];\n\t},\n\t\n\t/**\n\t * Return the default style of meridiems used in this locale. Meridiems are \n\t * times of day like AM/PM. In a few locales with some calendars, for example\n\t * Amharic/Ethiopia using the Ethiopic calendar, the times of day may be\n\t * split into different segments than simple AM/PM as in the Gregorian \n\t * calendar. Only a few locales are like that. For most locales, formatting \n\t * a Gregorian date will use the regular Gregorian AM/PM meridiems.\n\t *  \n\t * @returns {string} the default meridiems style used in this locale. Possible\n\t * values are \"gregorian\", \"chinese\", and \"ethiopic\"\n\t */\n\tgetMeridiemsStyle: function () {\n\t\treturn this.info.meridiems || \"gregorian\";\n\t}\t\n};\n\nmodule.exports = LocaleInfo;\n","/*\n * IString.js - ilib string subclass definition\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilib.js Utils.js Locale.js MathUtils.js\n\n// !data plurals\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar Locale = require(\"./Locale.js\");\n\n/**\n * @class\n * Create a new ilib string instance. This string inherits from and\n * extends the Javascript String class. It can be\n * used almost anywhere that a normal Javascript string is used, though in\n * some instances you will need to call the {@link #toString} method when\n * a built-in Javascript string is needed. The formatting methods are \n * methods that are not in the intrinsic String class and are most useful\n * when localizing strings in an app or web site in combination with \n * the ResBundle class.<p>\n * \n * This class is named IString (\"ilib string\") so as not to conflict with the \n * built-in Javascript String class.\n * \n * @constructor\n * @param {string|IString=} string initialize this instance with this string \n */\nvar IString = function (string) {\n\tif (typeof(string) === 'object') {\n\t\tif (string instanceof IString) {\n\t\t\tthis.str = string.str;\t\n\t\t} else {\n\t\t\tthis.str = string.toString();\n\t\t}\n\t} else if (typeof(string) === 'string') {\n\t\tthis.str = new String(string);\n\t} else {\n\t\tthis.str = \"\";\n\t}\n\tthis.length = this.str.length;\n\tthis.cpLength = -1;\n\tthis.localeSpec = ilib.getLocale();\n};\n\n/**\n * Return true if the given character is a Unicode surrogate character,\n * either high or low.\n * \n * @private\n * @static\n * @param {string} ch character to check\n * @return {boolean} true if the character is a surrogate\n */\nIString._isSurrogate = function (ch) {\n\tvar n = ch.charCodeAt(0);\n\treturn ((n >= 0xDC00 && n <= 0xDFFF) || (n >= 0xD800 && n <= 0xDBFF));\n};\n\n/**\n * Convert a UCS-4 code point to a Javascript string. The codepoint can be any valid \n * UCS-4 Unicode character, including supplementary characters. Standard Javascript\n * only supports supplementary characters using the UTF-16 encoding, which has \n * values in the range 0x0000-0xFFFF. String.fromCharCode() will only\n * give you a string containing 16-bit characters, and will not properly convert \n * the code point for a supplementary character (which has a value > 0xFFFF) into \n * two UTF-16 surrogate characters. Instead, it will just just give you whatever\n * single character happens to be the same as your code point modulo 0x10000, which\n * is almost never what you want.<p> \n * \n * Similarly, that means if you use String.charCodeAt()\n * you will only retrieve a 16-bit value, which may possibly be a single\n * surrogate character that is part of a surrogate pair representing a character\n * in the supplementary plane. It will not give you a code point. Use \n * IString.codePointAt() to access code points in a string, or use \n * an iterator to walk through the code points in a string. \n * \n * @static\n * @param {number} codepoint UCS-4 code point to convert to a character\n * @return {string} a string containing the character represented by the codepoint\n */\nIString.fromCodePoint = function (codepoint) {\n\tif (codepoint < 0x10000) {\n\t\treturn String.fromCharCode(codepoint);\n\t} else {\n\t\tvar high = Math.floor(codepoint / 0x10000) - 1;\n\t\tvar low = codepoint & 0xFFFF;\n\t\t\n\t\treturn String.fromCharCode(0xD800 | ((high & 0x000F) << 6) |  ((low & 0xFC00) >> 10)) +\n\t\t\tString.fromCharCode(0xDC00 | (low & 0x3FF));\n\t}\n};\n\n/**\n * Convert the character or the surrogate pair at the given\n * index into the intrinsic Javascript string to a Unicode \n * UCS-4 code point.\n * \n * @param {string} str string to get the code point from\n * @param {number} index index into the string\n * @return {number} code point of the character at the\n * given index into the string\n */\nIString.toCodePoint = function(str, index) {\n\tif (!str || str.length === 0) {\n\t\treturn -1;\n\t}\n\tvar code = -1, high = str.charCodeAt(index);\n\tif (high >= 0xD800 && high <= 0xDBFF) {\n\t\tif (str.length > index+1) {\n\t\t\tvar low = str.charCodeAt(index+1);\n\t\t\tif (low >= 0xDC00 && low <= 0xDFFF) {\n\t\t\t\tcode = (((high & 0x3C0) >> 6) + 1) << 16 |\n\t\t\t\t\t(((high & 0x3F) << 10) | (low & 0x3FF));\n\t\t\t}\n\t\t}\n\t} else {\n\t\tcode = high;\n\t}\n\t\n\treturn code;\n};\n\n/**\n * Load the plural the definitions of plurals for the locale.\n * @param {boolean=} sync\n * @param {Locale|string=} locale\n * @param {Object=} loadParams\n * @param {function(*)=} onLoad\n */\nIString.loadPlurals = function (sync, locale, loadParams, onLoad) {\n\tvar loc;\n\tif (locale) {\n\t\tloc = (typeof(locale) === 'string') ? new Locale(locale) : locale;\n\t} else {\n\t\tloc = new Locale(ilib.getLocale());\n\t}\n\tvar spec = loc.getLanguage();\n\tif (!ilib.data[\"plurals_\" + spec]) {\n\t\tUtils.loadData({\n\t\t\tname: \"plurals.json\",\n\t\t\tobject: IString,\n\t\t\tlocale: loc,\n\t\t\tsync: sync,\n\t\t\tloadParams: loadParams,\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(plurals) {\n\t\t\t\tif (!plurals) {\n\t\t\t\t\tIString.cache[spec] = {};\n\t\t\t\t}\n\t\t\t\tilib.data[\"plurals_\" + spec] = plurals || {};\n\t\t\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\t\t\tonLoad(ilib.data[\"plurals_\" + spec]);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\tonLoad(ilib.data[\"plurals_\" + spec]);\n\t\t}\n\t}\n};\n\n/**\n * @private\n * @static\n */\nIString._fncs = {\n\t/**\n\t * @private\n\t * @param {Object} obj\n\t * @return {string|undefined}\n\t */\n\tfirstProp: function (obj) {\n\t\tfor (var p in obj) {\n\t\t\tif (p && obj[p]) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t}\n\t\treturn undefined; // should never get here\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} obj\n\t * @param {number} n\n\t * @return {?}\n\t */\n\tgetValue: function (obj, n) {\n\t\tif (typeof(obj) === 'object') {\n\t\t\tvar subrule = IString._fncs.firstProp(obj);\n\t\t\treturn IString._fncs[subrule](obj[subrule], n);\n\t\t} else if (typeof(obj) === 'string') {\n\t\t\treturn n;\n\t\t} else {\n\t\t\treturn obj;\n\t\t}\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {number} n\n\t * @param {Array.<number|Array.<number>>} range\n\t * @return {boolean}\n\t */\n\tmatchRangeContinuous: function(n, range) {\n\t\tfor (var num in range) {\n\t\t\tif (typeof(num) !== 'undefined' && typeof(range[num]) !== 'undefined') {\n\t\t\t\tvar obj = /** @type {Object|null|undefined} */ range[num];\n\t\t\t\tif (typeof(obj) === 'number') {\n\t\t\t\t\tif (n === range[num]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (Object.prototype.toString.call(obj) === '[object Array]') {\n\t\t\t\t\tif (n >= obj[0] && n <= obj[1]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * @private\n\t * @param {number} n\n\t * @param {Array.<number|Array.<number>>} range\n\t * @return {boolean}\n\t */\n\tmatchRange: function(n, range) {\n\t\tif (Math.floor(n) !== n) {\n\t\t\treturn false;\n\t\t}\n\t\treturn IString._fncs.matchRangeContinuous(n, range);\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tis: function(rule, n) {\n\t\tvar left = IString._fncs.getValue(rule[0], n);\n\t\tvar right = IString._fncs.getValue(rule[1], n);\n\t\treturn left == right;\n\t\t// return IString._fncs.getValue(rule[0]) == IString._fncs.getValue(rule[1]);\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tisnot: function(rule, n) {\n\t\treturn IString._fncs.getValue(rule[0], n) != IString._fncs.getValue(rule[1], n);\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tinrange: function(rule, n) {\n\t\treturn IString._fncs.matchRange(IString._fncs.getValue(rule[0], n), rule[1]);\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tnotin: function(rule, n) {\n\t\treturn !IString._fncs.matchRange(IString._fncs.getValue(rule[0], n), rule[1]);\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\twithin: function(rule, n) {\n\t\treturn IString._fncs.matchRangeContinuous(IString._fncs.getValue(rule[0], n), rule[1]);\t\t\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {number}\n\t */\n\tmod: function(rule, n) {\n\t\treturn MathUtils.mod(IString._fncs.getValue(rule[0], n), IString._fncs.getValue(rule[1], n));\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {number}\n\t */\n\tn: function(rule, n) {\n\t\treturn n;\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tor: function(rule, n) {\n\t\treturn IString._fncs.getValue(rule[0], n) || IString._fncs.getValue(rule[1], n);\n\t},\n\t\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tand: function(rule, n) {\n\t\treturn IString._fncs.getValue(rule[0], n) && IString._fncs.getValue(rule[1], n);\n\t}\n};\n\nIString.prototype = {\n\t/**\n\t * Return the length of this string in characters. This function defers to the regular\n\t * Javascript string class in order to perform the length function. Please note that this\n\t * method is a real method, whereas the length property of Javascript strings is \n\t * implemented by native code and appears as a property.<p>\n\t * \n\t * Example:\n\t * \n\t * <pre>\n\t * var str = new IString(\"this is a string\");\n\t * console.log(\"String is \" + str._length() + \" characters long.\");\n\t * </pre>\n\t * @private\n\t */\n\t_length: function () {\n\t\treturn this.str.length;\n\t},\n\t\n\t/**\n\t * Format this string instance as a message, replacing the parameters with \n\t * the given values.<p>\n\t * \n\t * The string can contain any text that a regular Javascript string can\n\t * contain. Replacement parameters have the syntax:\n\t * \n\t * <pre>\n\t * {name}\n\t * </pre>\n\t * \n\t * Where \"name\" can be any string surrounded by curly brackets. The value of \n\t * \"name\" is taken from the parameters argument.<p>\n\t * \n\t * Example:\n\t * \n\t * <pre>\n\t * var str = new IString(\"There are {num} objects.\");\n\t * console.log(str.format({\n\t *   num: 12\n\t * });\n\t * </pre>\n\t * \n\t * Would give the output:\n\t * \n\t * <pre>\n\t * There are 12 objects.\n\t * </pre>\n\t * \n\t * If a property is missing from the parameter block, the replacement\n\t * parameter substring is left untouched in the string, and a different\n\t * set of parameters may be applied a second time. This way, different\n\t * parts of the code may format different parts of the message that they\n\t * happen to know about.<p>\n\t * \n\t * Example:\n\t * \n\t * <pre>\n\t * var str = new IString(\"There are {num} objects in the {container}.\");\n\t * console.log(str.format({\n\t *   num: 12\n\t * });\n\t * </pre>\n\t * \n\t * Would give the output:<p>\n\t * \n\t * <pre>\n\t * There are 12 objects in the {container}.\n\t * </pre>\n\t * \n\t * The result can then be formatted again with a different parameter block that\n\t * specifies a value for the container property.\n\t * \n\t * @param params a Javascript object containing values for the replacement \n\t * parameters in the current string\n\t * @return a new IString instance with as many replacement parameters filled\n\t * out as possible with real values.\n\t */\n\tformat: function (params) {\n\t\tvar formatted = this.str;\n\t\tif (params) {\n\t\t\tvar regex;\n\t\t\tfor (var p in params) {\n\t\t\t\tif (typeof(params[p]) !== 'undefined') {\n\t\t\t\t\tregex = new RegExp(\"\\{\"+p+\"\\}\", \"g\");\n\t\t\t\t\tformatted = formatted.replace(regex, params[p]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn formatted.toString();\n\t},\n\t\n\t/**\n\t * Format a string as one of a choice of strings dependent on the value of\n\t * a particular argument index.<p>\n\t * \n\t * The syntax of the choice string is as follows. The string contains a\n\t * series of choices separated by a vertical bar character \"|\". Each choice\n\t * has a value or range of values to match followed by a hash character \"#\"\n\t * followed by the string to use if the variable matches the criteria.<p>\n\t * \n\t * Example string:\n\t * \n\t * <pre>\n\t * var num = 2;\n\t * var str = new IString(\"0#There are no objects.|1#There is one object.|2#There are {number} objects.\");\n\t * console.log(str.formatChoice(num, {\n\t *   number: num\n\t * }));\n\t * </pre>\n\t * \n\t * Gives the output:\n\t * \n\t * <pre>\n\t * \"There are 2 objects.\"\n\t * </pre>\n\t * \n\t * The strings to format may contain replacement variables that will be formatted\n\t * using the format() method above and the params argument as a source of values\n\t * to use while formatting those variables.<p>\n\t * \n\t * If the criterion for a particular choice is empty, that choice will be used\n\t * as the default one for use when none of the other choice's criteria match.<p>\n\t * \n\t * Example string:\n\t * \n\t * <pre>\n\t * var num = 22;\n\t * var str = new IString(\"0#There are no objects.|1#There is one object.|#There are {number} objects.\");\n\t * console.log(str.formatChoice(num, {\n\t *   number: num\n\t * }));\n\t * </pre>\n\t * \n\t * Gives the output:\n\t * \n\t * <pre>\n\t * \"There are 22 objects.\"\n\t * </pre>\n\t * \n\t * If multiple choice patterns can match a given argument index, the first one \n\t * encountered in the string will be used. If no choice patterns match the \n\t * argument index, then the default choice will be used. If there is no default\n\t * choice defined, then this method will return an empty string.<p>\n\t * \n\t * <b>Special Syntax</b><p>\n\t * \n\t * For any choice format string, all of the patterns in the string should be\n\t * of a single type: numeric, boolean, or string/regexp. The type of the \n\t * patterns is determined by the type of the argument index parameter.<p>\n\t * \n\t * If the argument index is numeric, then some special syntax can be used \n\t * in the patterns to match numeric ranges.<p>\n\t * \n\t * <ul>\n\t * <li><i>&gt;x</i> - match any number that is greater than x \n\t * <li><i>&gt;=x</i> - match any number that is greater than or equal to x\n\t * <li><i>&lt;x</i> - match any number that is less than x\n\t * <li><i>&lt;=x</i> - match any number that is less than or equal to x\n\t * <li><i>start-end</i> - match any number in the range [start,end)\n\t * <li><i>zero</i> - match any number in the class \"zero\". (See below for\n\t * a description of number classes.)\n\t * <li><i>one</i> - match any number in the class \"one\"\n\t * <li><i>two</i> - match any number in the class \"two\"\n\t * <li><i>few</i> - match any number in the class \"few\"\n\t * <li><i>many</i> - match any number in the class \"many\"\n\t * </ul>\n\t * \n\t * A number class defines a set of numbers that receive a particular syntax\n\t * in the strings. For example, in Slovenian, integers ending in the digit\n\t * \"1\" are in the \"one\" class, including 1, 21, 31, ... 101, 111, etc.\n\t * Similarly, integers ending in the digit \"2\" are in the \"two\" class. \n\t * Integers ending in the digits \"3\" or \"4\" are in the \"few\" class, and\n\t * every other integer is handled by the default string.<p>\n\t * \n\t * The definition of what numbers are included in a class is locale-dependent.\n\t * They are defined in the data file plurals.json. If your string is in a\n\t * different locale than the default for ilib, you should call the setLocale()\n\t * method of the string instance before calling this method.<p> \n\t * \n\t * <b>Other Pattern Types</b><p>\n\t * \n\t * If the argument index is a boolean, the string values \"true\" and \"false\" \n\t * may appear as the choice patterns.<p>\n\t * \n\t * If the argument index is of type string, then the choice patterns may contain\n\t * regular expressions, or static strings as degenerate regexps.\n\t * \n\t * @param {*} argIndex The index into the choice array of the current parameter\n\t * @param {Object} params The hash of parameter values that replace the replacement \n\t * variables in the string\n\t * @throws \"syntax error in choice format pattern: \" if there is a syntax error\n\t * @return {string} the formatted string\n\t */\n\tformatChoice: function(argIndex, params) {\n\t\tvar choices = this.str.split(\"|\");\n\t\tvar type = typeof(argIndex);\n\t\tvar limits = [];\n\t\tvar strings = [];\n\t\tvar i;\n\t\tvar parts;\n\t\tvar limit;\n\t\tvar arg;\n\t\tvar result = undefined;\n\t\tvar defaultCase = \"\";\n\t\n\t\tif (this.str.length === 0) {\n\t\t\t// nothing to do\n\t\t\treturn \"\";\n\t\t}\n\t\t\n\t\t// first parse all the choices\n\t\tfor (i = 0; i < choices.length; i++) {\t\t\n\t\t\tparts = choices[i].split(\"#\");\t\t\n\t\t\tif (parts.length > 2) {\n\t\t\t\tlimits[i] = parts[0];\n\t\t\t\tparts = parts.shift();\t\t\t\n\t\t\t\tstrings[i] = parts.join(\"#\");\n\t\t\t} else if (parts.length === 2) {\n\t\t\t\tlimits[i] = parts[0];\n\t\t\t\tstrings[i] = parts[1];\n\t\t\t} else {\n\t\t\t\t// syntax error\n\t\t\t\tthrow \"syntax error in choice format pattern: \" + choices[i];\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\t// then apply the argument index\n\t\tfor (i = 0; i < limits.length; i++) {\n\t\t\tif (limits[i].length === 0) {\n\t\t\t\t// this is default case\n\t\t\t\tdefaultCase = new IString(strings[i]);\t\t\t\n\t\t\t} else {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\targ = parseInt(argIndex, 10);\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (limits[i].substring(0,2) === \"<=\") {\t\t\t\t\t\t\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(2));\n\t\t\t\t\t\t\tif (arg <= limit) {\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (limits[i].substring(0,2) === \">=\") {\t\t\t\t\t\t\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(2));\n\t\t\t\t\t\t\tif (arg >= limit) {\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (limits[i].charAt(0) === \"<\") {\t\t\t\t\t\t\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(1));\n\t\t\t\t\t\t\tif (arg < limit) {\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (limits[i].charAt(0) === \">\") {\t\t\t\t\t\t\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(1));\n\t\t\t\t\t\t\tif (arg > limit) {\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.locale = this.locale || new Locale(this.localeSpec);\n\t\t\t\t\t\t\tswitch (limits[i]) {\n\t\t\t\t\t\t\t\tcase \"zero\":\n\t\t\t\t\t\t\t\tcase \"one\":\n\t\t\t\t\t\t\t\tcase \"two\":\n\t\t\t\t\t\t\t\tcase \"few\":\n\t\t\t\t\t\t\t\tcase \"many\":\n\t\t\t\t\t\t\t\t\t// CLDR locale-dependent number classes\n\t\t\t\t\t\t\t\t\tvar ruleset = ilib.data[\"plurals_\" + this.locale.getLanguage()];\n\t\t\t\t\t\t\t\t\tif (ruleset) {\n\t\t\t\t\t\t\t\t\t\tvar rule = ruleset[limits[i]];\n\t\t\t\t\t\t\t\t\t\tif (IString._fncs.getValue(rule, arg)) {\n\t\t\t\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tvar dash = limits[i].indexOf(\"-\");\n\t\t\t\t\t\t\t\t\tif (dash !== -1) {\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// range\n\t\t\t\t\t\t\t\t\t\tvar start = limits[i].substring(0, dash);\n\t\t\t\t\t\t\t\t\t\tvar end = limits[i].substring(dash+1);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (arg >= parseInt(start, 10) && arg <= parseInt(end, 10)) {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if (arg === parseInt(limits[i], 10)) {\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// exact amount\n\t\t\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'boolean':\t\t\t\t\t\n\t\t\t\t\t\tif (limits[i] === \"true\" && argIndex === true) {\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t} else if (limits[i] === \"false\" && argIndex === false) {\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'string':\t\t\t\t\t\n\t\t\t\t\t\tvar regexp = new RegExp(limits[i], \"i\");\n\t\t\t\t\t\tif (regexp.test(argIndex)) {\n\t\t\t\t\t\t\tresult = new IString(strings[i]);\n\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'object':\n\t\t\t\t\t\tthrow \"syntax error: fmtChoice parameter for the argument index cannot be an object\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!result) {\t\t\n\t\t\tresult = defaultCase || new IString(\"\");\n\t\t}\n\t\t\n\t\tresult = result.format(params);\n\t\t\n\t\treturn result.toString();\n\t},\n\t\n\t// delegates\n\t/**\n\t * Same as String.toString()\n\t * @return {string} this instance as regular Javascript string\n\t */\n\ttoString: function () {\n\t\treturn this.str.toString();\n\t},\n\t\n\t/**\n\t * Same as String.valueOf()\n\t * @return {string} this instance as a regular Javascript string\n\t */\n\tvalueOf: function () {\n\t\treturn this.str.valueOf();\n\t},\n\t\n\t/**\n\t * Same as String.charAt()\n\t * @param {number} index the index of the character being sought\n\t * @return {IString} the character at the given index\n\t */\n\tcharAt: function(index) {\n\t\treturn new IString(this.str.charAt(index));\n\t},\n\t\n\t/**\n\t * Same as String.charCodeAt(). This only reports on \n\t * 2-byte UCS-2 Unicode values, and does not take into\n\t * account supplementary characters encoded in UTF-16.\n\t * If you would like to take account of those characters,\n\t * use codePointAt() instead.\n\t * @param {number} index the index of the character being sought\n\t * @return {number} the character code of the character at the \n\t * given index in the string \n\t */\n\tcharCodeAt: function(index) {\n\t\treturn this.str.charCodeAt(index);\n\t},\n\t\n\t/**\n\t * Same as String.concat()\n\t * @param {string} strings strings to concatenate to the current one\n\t * @return {IString} a concatenation of the given strings\n\t */\n\tconcat: function(strings) {\n\t\treturn new IString(this.str.concat(strings));\n\t},\n\t\n\t/**\n\t * Same as String.indexOf()\n\t * @param {string} searchValue string to search for\n\t * @param {number} start index into the string to start searching, or\n\t * undefined to search the entire string\n\t * @return {number} index into the string of the string being sought,\n\t * or -1 if the string is not found \n\t */\n\tindexOf: function(searchValue, start) {\n\t\treturn this.str.indexOf(searchValue, start);\n\t},\n\t\n\t/**\n\t * Same as String.lastIndexOf()\n\t * @param {string} searchValue string to search for\n\t * @param {number} start index into the string to start searching, or\n\t * undefined to search the entire string\n\t * @return {number} index into the string of the string being sought,\n\t * or -1 if the string is not found \n\t */\n\tlastIndexOf: function(searchValue, start) {\n\t\treturn this.str.lastIndexOf(searchValue, start);\n\t},\n\t\n\t/**\n\t * Same as String.match()\n\t * @param {string} regexp the regular expression to match\n\t * @return {Array.<string>} an array of matches\n\t */\n\tmatch: function(regexp) {\n\t\treturn this.str.match(regexp);\n\t},\n\t\n\t/**\n\t * Same as String.replace()\n\t * @param {string} searchValue a regular expression to search for\n\t * @param {string} newValue the string to replace the matches with\n\t * @return {IString} a new string with all the matches replaced\n\t * with the new value\n\t */\n\treplace: function(searchValue, newValue) {\n\t\treturn new IString(this.str.replace(searchValue, newValue));\n\t},\n\t\n\t/**\n\t * Same as String.search()\n\t * @param {string} regexp the regular expression to search for\n\t * @return {number} position of the match, or -1 for no match\n\t */\n\tsearch: function(regexp) {\n\t\treturn this.str.search(regexp);\n\t},\n\t\n\t/**\n\t * Same as String.slice()\n\t * @param {number} start first character to include in the string\n\t * @param {number} end include all characters up to, but not including\n\t * the end character\n\t * @return {IString} a slice of the current string\n\t */\n\tslice: function(start, end) {\n\t\treturn new IString(this.str.slice(start, end));\n\t},\n\t\n\t/**\n\t * Same as String.split()\n\t * @param {string} separator regular expression to match to find\n\t * separations between the parts of the text\n\t * @param {number} limit maximum number of items in the final \n\t * output array. Any items beyond that limit will be ignored.\n\t * @return {Array.<string>} the parts of the current string split \n\t * by the separator\n\t */\n\tsplit: function(separator, limit) {\n\t\treturn this.str.split(separator, limit);\n\t},\n\t\n\t/**\n\t * Same as String.substr()\n\t * @param {number} start the index of the character that should \n\t * begin the returned substring\n\t * @param {number} length the number of characters to return after\n\t * the start character.\n\t * @return {IString} the requested substring \n\t */\n\tsubstr: function(start, length) {\n\t\tvar plat = ilib._getPlatform();\n\t\tif (plat === \"qt\" || plat === \"rhino\" || plat === \"trireme\") {\n\t\t\t// qt and rhino have a broken implementation of substr(), so\n\t\t\t// work around it\n\t\t\tif (typeof(length) === \"undefined\") {\n\t\t\t\tlength = this.str.length - start;\n\t\t\t}\n\t\t}\n\t\treturn new IString(this.str.substr(start, length));\n\t},\n\t\n\t/**\n\t * Same as String.substring()\n\t * @param {number} from the index of the character that should \n\t * begin the returned substring\n\t * @param {number} to the index where to stop the extraction. If\n\t * omitted, extracts the rest of the string\n\t * @return {IString} the requested substring \n\t */\n\tsubstring: function(from, to) {\n\t\treturn this.str.substring(from, to);\n\t},\n\t\n\t/**\n\t * Same as String.toLowerCase(). Note that this method is\n\t * not locale-sensitive. \n\t * @return {IString} a string with the first character\n\t * lower-cased\n\t */\n\ttoLowerCase: function() {\n\t\treturn this.str.toLowerCase();\n\t},\n\t\n\t/**\n\t * Same as String.toUpperCase(). Note that this method is\n\t * not locale-sensitive. Use toLocaleUpperCase() instead\n\t * to get locale-sensitive behaviour. \n\t * @return {IString} a string with the first character\n\t * upper-cased\n\t */\n\ttoUpperCase: function() {\n\t\treturn this.str.toUpperCase();\n\t},\n\t\n\t/**\n\t * Convert the character or the surrogate pair at the given\n\t * index into the string to a Unicode UCS-4 code point.\n\t * @protected\n\t * @param {number} index index into the string\n\t * @return {number} code point of the character at the\n\t * given index into the string\n\t */\n\t_toCodePoint: function (index) {\n\t\treturn IString.toCodePoint(this.str, index);\n\t},\n\t\n\t/**\n\t * Call the callback with each character in the string one at \n\t * a time, taking care to step through the surrogate pairs in \n\t * the UTF-16 encoding properly.<p>\n\t * \n\t * The standard Javascript String's charAt() method only\n\t * returns a particular 16-bit character in the \n\t * UTF-16 encoding scheme.\n\t * If the index to charAt() is pointing to a low- or \n\t * high-surrogate character,\n\t * it will return the surrogate character rather \n\t * than the the character \n\t * in the supplementary planes that the two surrogates together \n\t * encode. This function will call the callback with the full\n\t * character, making sure to join two  \n\t * surrogates into one character in the supplementary planes\n\t * where necessary.<p>\n\t * \n\t * @param {function(string)} callback a callback function to call with each\n\t * full character in the current string\n\t */\n\tforEach: function(callback) {\n\t\tif (typeof(callback) === 'function') {\n\t\t\tvar it = this.charIterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tcallback(it.next());\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Call the callback with each numeric code point in the string one at \n\t * a time, taking care to step through the surrogate pairs in \n\t * the UTF-16 encoding properly.<p>\n\t * \n\t * The standard Javascript String's charCodeAt() method only\n\t * returns information about a particular 16-bit character in the \n\t * UTF-16 encoding scheme.\n\t * If the index to charCodeAt() is pointing to a low- or \n\t * high-surrogate character,\n\t * it will return the code point of the surrogate character rather \n\t * than the code point of the character \n\t * in the supplementary planes that the two surrogates together \n\t * encode. This function will call the callback with the full\n\t * code point of each character, making sure to join two  \n\t * surrogates into one code point in the supplementary planes.<p>\n\t * \n\t * @param {function(string)} callback a callback function to call with each\n\t * code point in the current string\n\t */\n\tforEachCodePoint: function(callback) {\n\t\tif (typeof(callback) === 'function') {\n\t\t\tvar it = this.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tcallback(it.next());\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Return an iterator that will step through all of the characters\n\t * in the string one at a time and return their code points, taking \n\t * care to step through the surrogate pairs in UTF-16 encoding \n\t * properly.<p>\n\t * \n\t * The standard Javascript String's charCodeAt() method only\n\t * returns information about a particular 16-bit character in the \n\t * UTF-16 encoding scheme.\n\t * If the index is pointing to a low- or high-surrogate character,\n\t * it will return a code point of the surrogate character rather \n\t * than the code point of the character \n\t * in the supplementary planes that the two surrogates together \n\t * encode.<p>\n\t * \n\t * The iterator instance returned has two methods, hasNext() which\n\t * returns true if the iterator has more code points to iterate through,\n\t * and next() which returns the next code point as a number.<p>\n\t * \n\t * @return {Object} an iterator \n\t * that iterates through all the code points in the string\n\t */\n\titerator: function() {\n\t\t/**\n\t\t * @constructor\n\t\t */\n\t\tfunction _iterator (istring) {\n\t\t\tthis.index = 0;\n\t\t\tthis.hasNext = function () {\n\t\t\t\treturn (this.index < istring.str.length);\n\t\t\t};\n\t\t\tthis.next = function () {\n\t\t\t\tif (this.index < istring.str.length) {\n\t\t\t\t\tvar num = istring._toCodePoint(this.index);\n\t\t\t\t\tthis.index += ((num > 0xFFFF) ? 2 : 1);\n\t\t\t\t} else {\n\t\t\t\t\tnum = -1;\n\t\t\t\t}\n\t\t\t\treturn num;\n\t\t\t};\n\t\t};\n\t\treturn new _iterator(this);\n\t},\n\n\t/**\n\t * Return an iterator that will step through all of the characters\n\t * in the string one at a time, taking \n\t * care to step through the surrogate pairs in UTF-16 encoding \n\t * properly.<p>\n\t * \n\t * The standard Javascript String's charAt() method only\n\t * returns information about a particular 16-bit character in the \n\t * UTF-16 encoding scheme.\n\t * If the index is pointing to a low- or high-surrogate character,\n\t * it will return that surrogate character rather \n\t * than the surrogate pair which represents a character \n\t * in the supplementary planes.<p>\n\t * \n\t * The iterator instance returned has two methods, hasNext() which\n\t * returns true if the iterator has more characters to iterate through,\n\t * and next() which returns the next character.<p>\n\t * \n\t * @return {Object} an iterator \n\t * that iterates through all the characters in the string\n\t */\n\tcharIterator: function() {\n\t\t/**\n\t\t * @constructor\n\t\t */\n\t\tfunction _chiterator (istring) {\n\t\t\tthis.index = 0;\n\t\t\tthis.hasNext = function () {\n\t\t\t\treturn (this.index < istring.str.length);\n\t\t\t};\n\t\t\tthis.next = function () {\n\t\t\t\tvar ch;\n\t\t\t\tif (this.index < istring.str.length) {\n\t\t\t\t\tch = istring.str.charAt(this.index);\n\t\t\t\t\tif (IString._isSurrogate(ch) && \n\t\t\t\t\t\t\tthis.index+1 < istring.str.length && \n\t\t\t\t\t\t\tIString._isSurrogate(istring.str.charAt(this.index+1))) {\n\t\t\t\t\t\tthis.index++;\n\t\t\t\t\t\tch += istring.str.charAt(this.index);\n\t\t\t\t\t}\n\t\t\t\t\tthis.index++;\n\t\t\t\t}\n\t\t\t\treturn ch;\n\t\t\t};\n\t\t};\n\t\treturn new _chiterator(this);\n\t},\n\t\n\t/**\n\t * Return the code point at the given index when the string is viewed \n\t * as an array of code points. If the index is beyond the end of the\n\t * array of code points or if the index is negative, -1 is returned.\n\t * @param {number} index index of the code point \n\t * @return {number} code point of the character at the given index into\n\t * the string\n\t */\n\tcodePointAt: function (index) {\n\t\tif (index < 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tvar count,\n\t\t\tit = this.iterator(),\n\t\t\tch;\n\t\tfor (count = index; count >= 0 && it.hasNext(); count--) {\n\t\t\tch = it.next();\n\t\t}\n\t\treturn (count < 0) ? ch : -1;\n\t},\n\t\n\t/**\n\t * Set the locale to use when processing choice formats. The locale\n\t * affects how number classes are interpretted. In some cultures,\n\t * the limit \"few\" maps to \"any integer that ends in the digits 2 to 9\" and\n\t * in yet others, \"few\" maps to \"any integer that ends in the digits\n\t * 3 or 4\".\n\t * @param {Locale|string} locale locale to use when processing choice\n\t * formats with this string\n\t * @param {boolean=} sync [optional] whether to load the locale data synchronously \n\t * or not\n\t * @param {Object=} loadParams [optional] parameters to pass to the loader function\n\t * @param {function(*)=} onLoad [optional] function to call when the loading is done\n\t */\n\tsetLocale: function (locale, sync, loadParams, onLoad) {\n\t\tif (typeof(locale) === 'object') {\n\t\t\tthis.locale = locale;\n\t\t} else {\n\t\t\tthis.localeSpec = locale;\n\t\t\tthis.locale = new Locale(locale);\n\t\t}\n\t\t\n\t\tIString.loadPlurals(typeof(sync) !== 'undefined' ? sync : true, this.locale, loadParams, onLoad);\n\t},\n\n\t/**\n\t * Return the locale to use when processing choice formats. The locale\n\t * affects how number classes are interpretted. In some cultures,\n\t * the limit \"few\" maps to \"any integer that ends in the digits 2 to 9\" and\n\t * in yet others, \"few\" maps to \"any integer that ends in the digits\n\t * 3 or 4\".\n\t * @return {string} localespec to use when processing choice\n\t * formats with this string\n\t */\n\tgetLocale: function () {\n\t\treturn (this.locale ? this.locale.getSpec() : this.localeSpec) || ilib.getLocale();\n\t},\n\n\t/**\n\t * Return the number of code points in this string. This may be different\n\t * than the number of characters, as the UTF-16 encoding that Javascript\n\t * uses for its basis returns surrogate pairs separately. Two 2-byte \n\t * surrogate characters together make up one character/code point in \n\t * the supplementary character planes. If your string contains no\n\t * characters in the supplementary planes, this method will return the\n\t * same thing as the length() method.\n\t * @return {number} the number of code points in this string\n\t */\n\tcodePointLength: function () {\n\t\tif (this.cpLength === -1) {\n\t\t\tvar it = this.iterator();\n\t\t\tthis.cpLength = 0;\n\t\t\twhile (it.hasNext()) { \n\t\t\t\tthis.cpLength++;\n\t\t\t\tit.next();\n\t\t\t};\n\t\t}\n\t\treturn this.cpLength;\t\n\t}\n};\n\nmodule.exports = IString;","/*\n * ScriptInfo.js - information about scripts\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilib.js Utils.js\n\n// !data scripts\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\n\n/**\n * @class\n * Create a new script info instance. This class encodes information about\n * scripts, which are sets of characters used in a writing system.<p>\n * \n * The options object may contain any of the following properties:\n * \n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the script info object is fully \n * loaded. When the onLoad option is given, the script info object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while. \n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * \n * @constructor\n * @param {string} script The ISO 15924 4-letter identifier for the script\n * @param {Object} options parameters to initialize this matcher \n */\nvar ScriptInfo = function(script, options) {\n\tvar sync = true,\n\t    loadParams = undefined;\n\t\n\tthis.script = script;\n\t\n\tif (options) {\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\t\t\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tif (!ScriptInfo.cache) {\n\t\tScriptInfo.cache = {};\n\t}\n\n\tif (!ilib.data.scripts) {\n\t\tUtils.loadData({\n\t\t\tobject: ScriptInfo, \n\t\t\tlocale: \"-\", \n\t\t\tname: \"scripts.json\", \n\t\t\tsync: sync, \n\t\t\tloadParams: loadParams, \n\t\t\tcallback: ilib.bind(this, function (info) {\n\t\t\t\tif (!info) {\n\t\t\t\t\tinfo = {\"Latn\":{\"nb\":215,\"nm\":\"Latin\",\"lid\":\"Latin\",\"rtl\":false,\"ime\":false,\"casing\":true}};\n\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\n\t\t\t\t\tScriptInfo.cache[spec] = info;\n\t\t\t\t}\n\t\t\t\tilib.data.scripts = info;\n\t\t\t\tthis.info = script && ilib.data.scripts[script];\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis.info = ilib.data.scripts[script];\n\t}\n\n};\n\n/**\n * @private\n */\nScriptInfo._getScriptsArray = function() {\n\tvar ret = [],\n\t\tscript = undefined,\n\t\tscripts = ilib.data.scripts;\n\n\tfor (script in scripts) {\n\t\tif (script && scripts[script]) {\n\t\t\tret.push(script);\n\t\t}\n\t}\n\t\n\treturn ret;\n};\n\n/**\n * Return an array of all ISO 15924 4-letter identifier script identifiers that\n * this copy of ilib knows about.\n * @static\n * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)\n * @param {Object} loadParams arbitrary object full of properties to pass to the loader\n * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading\n * @return {Array.<string>} an array of all script identifiers that this copy of\n * ilib knows about\n */\nScriptInfo.getAllScripts = function(sync, loadParams, onLoad) {\n\tif (!ilib.data.scripts) {\n\t\tUtils.loadData({\n\t\t\tobject: ScriptInfo, \n\t\t\tlocale: \"-\", \n\t\t\tname: \"scripts.json\", \n\t\t\tsync: sync, \n\t\t\tloadParams: loadParams, \n\t\t\tcallback: ilib.bind(this, function (info) {\n\t\t\t\tilib.data.scripts = info;\n\t\t\t\t\n\t\t\t\tif (typeof(onLoad) === 'function') {\n\t\t\t\t\tonLoad(ScriptInfo._getScriptsArray());\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t}\n\t\n\treturn ScriptInfo._getScriptsArray();\n};\n\nScriptInfo.prototype = {\n\t/**\n\t * Return the 4-letter ISO 15924 identifier associated\n\t * with this script.\n\t * @return {string} the 4-letter ISO code for this script\n\t */\n\tgetCode: function () {\n\t\treturn this.info && this.script;\n\t},\n\t\n\t/**\n\t * Get the ISO 15924 code number associated with this\n\t * script.\n\t * \n\t * @return {number} the ISO 15924 code number\n\t */\n\tgetCodeNumber: function () {\n\t\treturn this.info && this.info.nb || 0;\n\t},\n\t\n\t/**\n\t * Get the name of this script in English.\n\t * \n\t * @return {string} the name of this script in English\n\t */\n\tgetName: function () {\n\t\treturn this.info && this.info.nm;\n\t},\n\t\n\t/**\n\t * Get the long identifier assciated with this script.\n\t * \n\t * @return {string} the long identifier of this script\n\t */\n\tgetLongCode: function () {\n\t\treturn this.info && this.info.lid;\n\t},\n\t\n\t/**\n\t * Return the usual direction that text in this script is written\n\t * in. Possible return values are \"rtl\" for right-to-left,\n\t * \"ltr\" for left-to-right, and \"ttb\" for top-to-bottom.\n\t * \n\t * @return {string} the usual direction that text in this script is\n\t * written in\n\t */\n\tgetScriptDirection: function() {\n\t\treturn (this.info && typeof(this.info.rtl) !== 'undefined' && this.info.rtl) ? \"rtl\" : \"ltr\";\n\t},\n\t\n\t/**\n\t * Return true if this script typically requires an input method engine\n\t * to enter its characters.\n\t * \n\t * @return {boolean} true if this script typically requires an IME\n\t */\n\tgetNeedsIME: function () {\n\t\treturn this.info && this.info.ime ? true : false; // converts undefined to false\n\t},\n\t\n\t/**\n\t * Return true if this script uses lower- and upper-case characters.\n\t * \n\t * @return {boolean} true if this script uses letter case\n\t */\n\tgetCasing: function () {\n\t\treturn this.info && this.info.casing ? true : false; // converts undefined to false\n\t}\n};\n\nmodule.exports = ScriptInfo;","/*\n * gregorian.js - Represent a Gregorian calendar object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar Calendar = require(\"./Calendar.js\");\n\n/**\n * @class\n * Construct a new Gregorian calendar object. This class encodes information about\n * a Gregorian calendar.<p>\n * \n * \n * @constructor\n * @param {{noinstance:boolean}=} options\n * @extends Calendar\n */\nvar GregorianCal = function(options) {\n\tif (!options || !options.noinstance) {\n\t\tthis.type = \"gregorian\";\n\t}\n};\n\n/**\n * the lengths of each month \n * @private\n * @const\n * @type Array.<number> \n */\nGregorianCal.monthLengths = [\n\t31,  /* Jan */\n\t28,  /* Feb */\n\t31,  /* Mar */\n\t30,  /* Apr */\n\t31,  /* May */\n\t30,  /* Jun */\n\t31,  /* Jul */\n\t31,  /* Aug */\n\t30,  /* Sep */\n\t31,  /* Oct */\n\t30,  /* Nov */\n\t31   /* Dec */\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\nGregorianCal.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nGregorianCal.prototype.getMonLength = function(month, year) {\n\tif (month !== 2 || !this.isLeapYear(year)) {\n\t\treturn GregorianCal.monthLengths[month-1];\n\t} else {\n\t\treturn 29;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Gregorian calendar.\n * The year parameter may be given as a number, or as a GregDate object.\n * @param {number|GregorianDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nGregorianCal.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) === 'number' ? year : year.getYears());\n\tvar centuries = MathUtils.mod(y, 400);\n\treturn (MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);\n};\n\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\nGregorianCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"gregorian\"] = GregorianCal;\n\nmodule.exports = GregorianCal;","/*\n * ethiopic.js - Represent a Ethiopic calendar object.\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\n/**\n * @class\n * Construct a new Ethiopic calendar object. This class encodes information about\n * a Ethiopic calendar.<p>\n * \n * \n * @constructor\n * @extends Calendar\n */\nvar EthiopicCal = function() {\n\tthis.type = \"ethiopic\";\n};\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Maskaram, 2=Teqemt, etc. until 13=Paguemen.\n * \n * @param {number} year a year for which the number of months is sought\n */\nEthiopicCal.prototype.getNumMonths = function(year) {\n\treturn 13;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number|string} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nEthiopicCal.prototype.getMonLength = function(month, year) {\n\tvar m = month;\n\tswitch (typeof(m)) {\n        case \"string\": \n            m = parseInt(m, 10); \n            break;\n        case \"function\":\n        case \"object\":\n        case \"undefined\":\n            return 30;\n            break;\n    }    \n\tif (m < 13) {\n\t\treturn 30;\n\t} else {\n\t\treturn this.isLeapYear(year) ? 6 : 5;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Ethiopic calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|EthiopicDate|string} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nEthiopicCal.prototype.isLeapYear = function(year) {\n\tvar y = year;\n\t switch (typeof(y)) {\n        case \"string\":\n            y = parseInt(y, 10);\n            break;\n        case \"object\":\n            if (typeof(y.year) !== \"number\") { // in case it is an ilib.Date object\n                return false;\n            }\n            y = y.year;\n            break;\n        case \"function\":\n        case \"undefined\":\n            return false;\n            break;\n    }\n\treturn MathUtils.mod(y, 4) === 3;\n};\n\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\nEthiopicCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"ethiopic\"] = EthiopicCal;\n\nmodule.exports = EthiopicCal;","/*\n * IDate.js - Represent a date in any calendar. This class is subclassed for each \n * calendar and includes some shared functionality.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends LocaleInfo.js */\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\n/**\n * @class\n * Superclass for all the calendar date classes that contains shared \n * functionality. This class is never instantiated on its own. Instead,\n * you should use the {@link DateFactory} function to manufacture a new\n * instance of a subclass of IDate. This class is called IDate for \"ilib\n * date\" so that it does not conflict with the built-in Javascript Date\n * class.\n * \n * @private\n * @constructor\n * @param {Object=} options The date components to initialize this date with\n */\nvar IDate = function(options) {\n};\n\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your date after it's defined: \n * IDate._constructors[\"mytype\"] = IDate.MyTypeConstructor;\n */\nIDate._constructors = {};\n\nIDate.prototype = {\n\tgetType: function() {\n\t\treturn \"date\";\n\t},\n\t\n\t/**\n\t * Return the unix time equivalent to this date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This \n\t * method only returns a valid number for dates between midnight, \n\t * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when \n\t * the unix time runs out. If this instance encodes a date outside of that range, \n\t * this method will return -1. For date types that are not Gregorian, the point \n\t * in time represented by this date object will only give a return value if it\n\t * is in the correct range in the Gregorian calendar as given previously.\n\t * \n\t * @return {number} a number giving the unix time, or -1 if the date is outside the\n\t * valid unix time range\n\t */\n\tgetTime: function() {\n\t\treturn this.rd.getTime(); \n\t},\n\t\n\t/**\n\t * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n\t * (or the type \"time_t\" in C/C++) is only encoded with an unsigned 32 bit integer, and thus \n\t * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \n\t * 32 bits and the Date object allows you to encode up to 100 million days worth of time \n\t * after Jan 1, 1970, and even more interestingly, 100 million days worth of time before\n\t * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \n\t * range. If this instance encodes a date outside of that range, this method will return\n\t * NaN.\n\t * \n\t * @return {number} a number giving the extended unix time, or Nan if the date is outside \n\t * the valid extended unix time range\n\t */\n\tgetTimeExtended: function() {\n\t\treturn this.rd.getTimeExtended();\n\t},\n\n\t/**\n\t * Set the time of this instance according to the given unix time. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970.\n\t * \n\t * @param {number} millis the unix time to set this date to in milliseconds \n\t */\n\tsetTime: function(millis) {\n\t\tthis.rd = this.newRd({\n\t\t\tunixtime: millis,\n\t\t\tcal: this.cal\n\t\t});\n\t\tthis._calcDateComponents();\n\t},\n\t\n\tgetDays: function() {\n\t\treturn this.day;\n\t},\n\tgetMonths: function() {\n\t\treturn this.month;\n\t},\n\tgetYears: function() {\n\t\treturn this.year;\n\t},\n\tgetHours: function() {\n\t\treturn this.hour;\n\t},\n\tgetMinutes: function() {\n\t\treturn this.minute;\n\t},\n\tgetSeconds: function() {\n\t\treturn this.second;\n\t},\n\tgetMilliseconds: function() {\n\t\treturn this.millisecond;\n\t},\n\tgetEra: function() {\n\t\treturn (this.year < 1) ? -1 : 1;\n\t},\n\n\tsetDays: function(day) {\n\t\tthis.day = parseInt(day, 10) || 1;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetMonths: function(month) {\n\t\tthis.month = parseInt(month, 10) || 1;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetYears: function(year) {\n\t\tthis.year = parseInt(year, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\t\n\tsetHours: function(hour) {\n\t\tthis.hour = parseInt(hour, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetMinutes: function(minute) {\n\t\tthis.minute = parseInt(minute, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetSeconds: function(second) {\n\t\tthis.second = parseInt(second, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetMilliseconds: function(milli) {\n\t\tthis.millisecond = parseInt(milli, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\t\n\t/**\n\t * Return a new date instance in the current calendar that represents the first instance \n\t * of the given day of the week before the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t * \n\t * @param {number} dow the day of the week before the current date that is being sought\n\t * @return {IDate} the date being sought\n\t */\n\tbefore: function (dow) {\n\t\treturn new this.constructor({\n\t\t\trd: this.rd.before(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\t\n\t/**\n\t * Return a new date instance in the current calendar that represents the first instance \n\t * of the given day of the week after the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t * \n\t * @param {number} dow the day of the week after the current date that is being sought\n\t * @return {IDate} the date being sought\n\t */\n\tafter: function (dow) {\n\t\treturn new this.constructor({\n\t\t\trd: this.rd.after(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\n\t/**\n\t * Return a new Gregorian date instance that represents the first instance of the \n\t * given day of the week on or before the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t * \n\t * @param {number} dow the day of the week on or before the current date that is being sought\n\t * @return {IDate} the date being sought\n\t */\n\tonOrBefore: function (dow) {\n\t\treturn new this.constructor({\n\t\t\trd: this.rd.onOrBefore(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\n\t/**\n\t * Return a new Gregorian date instance that represents the first instance of the \n\t * given day of the week on or after the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t * \n\t * @param {number} dow the day of the week on or after the current date that is being sought\n\t * @return {IDate} the date being sought\n\t */\n\tonOrAfter: function (dow) {\n\t\treturn new this.constructor({\n\t\t\trd: this.rd.onOrAfter(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\t\n\t/**\n\t * Return a Javascript Date object that is equivalent to this date\n\t * object.\n\t * \n\t * @return {Date|undefined} a javascript Date object\n\t */\n\tgetJSDate: function() {\n\t\tvar unix = this.rd.getTimeExtended();\n\t\treturn isNaN(unix) ? undefined : new Date(unix); \n\t},\n\t\n\t/**\n\t * Return the Rata Die (fixed day) number of this date.\n\t * \n\t * @protected\n\t * @return {number} the rd date as a number\n\t */\n\tgetRataDie: function() {\n\t\treturn this.rd.getRataDie();\n\t},\n\t\n\t/**\n\t * Set the date components of this instance based on the given rd.\n\t * @protected\n\t * @param {number} rd the rata die date to set\n\t */\n\tsetRd: function (rd) {\n\t\tthis.rd = this.newRd({\n\t\t\trd: rd,\n\t\t\tcal: this.cal\n\t\t});\n\t\tthis._calcDateComponents();\n\t},\n\t\n\t/**\n\t * Return the Julian Day equivalent to this calendar date as a number.\n\t * \n\t * @return {number} the julian date equivalent of this date\n\t */\n\tgetJulianDay: function() {\n\t\treturn this.rd.getJulianDay();\n\t},\n\t\n\t/**\n\t * Set the date of this instance using a Julian Day.\n\t * @param {number|JulianDay} date the Julian Day to use to set this date\n\t */\n\tsetJulianDay: function (date) {\n\t\tthis.rd = this.newRd({\n\t\t\tjulianday: (typeof(date) === 'object') ? date.getDate() : date,\n\t\t\tcal: this.cal\n\t\t});\n\t\tthis._calcDateComponents();\n\t},\n\n\t/**\n\t * Return the time zone associated with this date, or \n\t * undefined if none was specified in the constructor.\n\t * \n\t * @return {string|undefined} the name of the time zone for this date instance\n\t */\n\tgetTimeZone: function() {\n\t\treturn this.timezone || \"local\";\n\t},\n\t\n\t/**\n\t * Set the time zone associated with this date.\n\t * @param {string=} tzName the name of the time zone to set into this date instance,\n\t * or \"undefined\" to unset the time zone \n\t */\n\tsetTimeZone: function (tzName) {\n\t\tif (!tzName || tzName === \"\") {\n\t\t\t// same as undefining it\n\t\t\tthis.timezone = undefined;\n\t\t\tthis.tz = undefined;\n\t\t} else if (typeof(tzName) === 'string') {\n\t\t\tthis.timezone = tzName;\n\t\t\tthis.tz = undefined;\n\t\t\t// assuming the same UTC time, but a new time zone, now we have to \n\t\t\t// recalculate what the date components are\n\t\t\tthis._calcDateComponents();\n\t\t}\n\t},\n\t\n\t/**\n\t * Return the rd number of the first Sunday of the given ISO year.\n\t * @protected\n\t * @param {number} year the year for which the first Sunday is being sought\n\t * @return {number} the rd of the first Sunday of the ISO year\n\t */\n\tfirstSunday: function (year) {\n\t\tvar firstDay = this.newRd({\n\t\t\tyear: year,\n\t\t\tmonth: 1,\n\t\t\tday: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisecond: 0,\n\t\t\tcal: this.cal\n\t\t});\n\t\tvar firstThu = this.newRd({\n\t\t\trd: firstDay.onOrAfter(4),\n\t\t\tcal: this.cal\n\t\t});\n\t\treturn firstThu.before(0);\n\t},\n\t\n\t/**\n\t * Return the ISO 8601 week number in the current year for the current date. The week\n\t * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some\n\t * calendars.\n\t * \n\t * @return {number} the week number for the current date\n\t */\n\tgetWeekOfYear: function() {\n\t\tvar rd = Math.floor(this.rd.getRataDie());\n\t\tvar year = this._calcYear(rd + this.offset);\n\t\tvar yearStart = this.firstSunday(year);\n\t\tvar nextYear;\n\t\t\n\t\t// if we have a January date, it may be in this ISO year or the previous year\n\t\tif (rd < yearStart) {\n\t\t\tyearStart = this.firstSunday(year-1);\n\t\t} else {\n\t\t\t// if we have a late December date, it may be in this ISO year, or the next year\n\t\t\tnextYear = this.firstSunday(year+1);\n\t\t\tif (rd >= nextYear) {\n\t\t\t\tyearStart = nextYear;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn Math.floor((rd-yearStart)/7) + 1;\n\t},\n\t\n\t/**\n\t * Return the ordinal number of the week within the month. The first week of a month is\n\t * the first one that contains 4 or more days in that month. If any days precede this\n\t * first week, they are marked as being in week 0. This function returns values from 0\n\t * through 6.<p>\n\t * \n\t * The locale is a required parameter because different locales that use the same \n\t * Gregorian calendar consider different days of the week to be the beginning of\n\t * the week. This can affect the week of the month in which some days are located.\n\t * \n\t * @param {Locale|string} locale the locale or locale spec to use when figuring out \n\t * the first day of the week\n\t * @return {number} the ordinal number of the week within the current month\n\t */\n\tgetWeekOfMonth: function(locale) {\n\t\tvar li = new LocaleInfo(locale);\n\t\t\n\t\tvar first = this.newRd({\n\t\t\tyear: this._calcYear(this.rd.getRataDie()+this.offset),\n\t\t\tmonth: this.getMonths(),\n\t\t\tday: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisecond: 0,\n\t\t\tcal: this.cal\n\t\t});\n\t\tvar weekStart = first.onOrAfter(li.getFirstDayOfWeek());\n\t\t\n\t\tif (weekStart - first.getRataDie() > 3) {\n\t\t\t// if the first week has 4 or more days in it of the current month, then consider\n\t\t\t// that week 1. Otherwise, it is week 0. To make it week 1, move the week start\n\t\t\t// one week earlier.\n\t\t\tweekStart -= 7;\n\t\t}\n\t\treturn Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;\n\t}\n};\n\nmodule.exports = IDate;","/*\n * CalendarFactory.js - Constructs new instances of the right subclass of Calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nLocale.js\nLocaleInfo.js\nCalendar.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar Calendar = require(\"./Calendar.js\");\n\n/**\n * Factory method to create a new instance of a calendar subclass.<p>\n * \n * The options parameter can be an object that contains the following\n * properties:\n * \n * <ul>\n * <li><i>type</i> - specify the type of the calendar desired. The\n * list of valid values changes depending on which calendars are \n * defined. When assembling your iliball.js, include those calendars \n * you wish to use in your program or web page, and they will register \n * themselves with this factory method. The \"official\", \"gregorian\",\n * and \"julian\" calendars are all included by default, as they are the\n * standard calendars for much of the world.\n * <li><i>locale</i> - some calendars vary depending on the locale.\n * For example, the \"official\" calendar transitions from a Julian-style\n * calendar to a Gregorian-style calendar on a different date for\n * each country, as the governments of those countries decided to\n * adopt the Gregorian calendar at different times.\n *  \n * <li><i>onLoad</i> - a callback function to call when the calendar object is fully \n * loaded. When the onLoad option is given, the calendar factory will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *  \n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * If a locale is specified, but no type, then the calendar that is default for\n * the locale will be instantiated and returned. If neither the type nor\n * the locale are specified, then the calendar for the default locale will\n * be used. \n * \n * @static\n * @param {Object=} options options controlling the construction of this instance, or\n * undefined to use the default options\n * @return {Calendar} an instance of a calendar object of the appropriate type\n */\nvar CalendarFactory = function (options) {\n\tvar locale,\n\t\ttype,\n\t\tsync = true,\n\t\tinstance;\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tlocale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\n\t\t}\n\t\t\n\t\ttype = options.type || options.calendar;\n\t\t\n\t\tif (typeof(options.sync) === 'boolean') {\n\t\t\tsync = options.sync;\n\t\t}\n\t}\n\t\n\tif (!locale) {\n\t\tlocale = new Locale();\t// default locale\n\t}\n\t\n\tif (!type) {\n\t\tnew LocaleInfo(locale, {\n\t\t\tsync: sync,\n\t\t\tloadParams: options && options.loadParams,\n\t\t\tonLoad: ilib.bind(this, function(info) {\n\t\t\t\ttype = info.getCalendar();\n\t\t\t\t\n\t\t\t\tinstance = CalendarFactory._init(type, options);\n\t\t\t\t\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(instance);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tinstance = CalendarFactory._init(type, options);\n\t}\n\t\n\treturn instance;\n};\n\n/**\n * Map calendar names to classes to initialize in the dynamic code model.\n * TODO: Need to figure out some way that this doesn't have to be updated by hand.\n * @private\n */\nCalendarFactory._dynMap = {\n\t\"coptic\":       \"Coptic\",\n\t\"ethiopic\":     \"Ethiopic\",\n\t\"gregorian\":    \"Gregorian\",\n\t\"han\":          \"Han\",\n\t\"hebrew\":       \"Hebrew\",\n\t\"islamic\":      \"Islamic\",\n\t\"julian\":       \"Julian\",\n\t\"persian\":      \"Persian\",\n\t\"persian-algo\": \"PersianAlgo\",\n\t\"thaisolar\":    \"ThaiSolar\"\n};\n\n/**\n * Dynamically load the code for a calendar and calendar class if necessary.\n * @protected\n */\nCalendarFactory._dynLoadCalendar = function (name) {\n\tif (!Calendar._constructors[name]) {\n\t\tvar entry = CalendarFactory._dynMap[name];\n\t\tif (entry) {\n\t\t\tCalendar._constructors[name] = require(\"./\" + entry + \"Cal.js\");\n\t\t}\n\t}\n\treturn Calendar._constructors[name];\n};\n\n/** @private */\nCalendarFactory._init = function(type, options) {\n\tvar cons;\n\t\n\tif (ilib.isDynCode()) {\n\t\tCalendarFactory._dynLoadCalendar(type);\n\t}\n\t\n\tcons = Calendar._constructors[type];\n\t\n\t// pass the same options through to the constructor so the subclass\n\t// has the ability to do something with if it needs to\n\treturn cons && new cons(options);\n};\n\n/**\n * Return an array of known calendar types that the factory method can instantiate.\n * \n * @return {Array.<string>} an array of calendar types\n */\nCalendarFactory.getCalendars = function () {\n\tvar arr = [],\n\t\tc;\n\t\n\tif (ilib.isDynCode()) {\n\t\tfor (c in CalendarFactory._dynMap) {\n\t\t\tCalendarFactory._dynLoadCalendar(c);\n\t\t}\n\t}\n\t\n\tfor (c in Calendar._constructors) {\n\t\tif (c && Calendar._constructors[c]) {\n\t\t\tarr.push(c); // code like a pirate\n\t\t}\n\t}\n\t\n\treturn arr;\n};\n\nmodule.exports = CalendarFactory;","/*\n * ResBundle.js - Resource bundle definition\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilib.js Locale.js LocaleInfo.js IString.js Utils.js JSUtils.js\n\n// !data pseudomap\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar IString = require(\"./IString.js\");\n\n/**\n * @class\n * Create a new resource bundle instance. The resource bundle loads strings\n * appropriate for a particular locale and provides them via the getString \n * method.<p>\n * \n * The options object may contain any (or none) of the following properties:\n * \n * <ul>\n * <li><i>locale</i> - The locale of the strings to load. If not specified, the default\n * locale is the the default for the web page or app in which the bundle is \n * being loaded.\n * \n * <li><i>name</i> - Base name of the resource bundle to load. If not specified the default\n * base name is \"resources\".\n * \n * <li><i>type</i> - Name the type of strings this bundle contains. Valid values are \n * \"xml\", \"html\", \"text\", or \"raw\". The default is \"text\". If the type is \"xml\" or \"html\",\n * then XML/HTML entities and tags are not pseudo-translated. During a real translation, \n * HTML character entities are translated to their corresponding characters in a source\n * string before looking that string up in the translations. Also, the characters \"<\", \">\",\n * and \"&\" are converted to entities again in the output, but characters are left as they\n * are. If the type is \"xml\", \"html\", or \"text\" types, then the replacement parameter names\n * are not pseudo-translated as well so that the output can be used for formatting with \n * the IString class. If the type is raw, all characters are pseudo-translated, \n * including replacement parameters as well as XML/HTML tags and entities.\n * \n * <li><i>lengthen</i> - when pseudo-translating the string, tell whether or not to \n * automatically lengthen the string to simulate \"long\" languages such as German\n * or French. This is a boolean value. Default is false.\n * \n * <li><i>missing</i> - what to do when a resource is missing. The choices are:\n * <ul>\n *   <li><i>source</i> - return the source string unchanged\n *   <li><i>pseudo</i> - return the pseudo-translated source string, translated to the\n *   script of the locale if the mapping is available, or just the default Latin \n *   pseudo-translation if not\n *   <li><i>empty</i> - return the empty string \n * </ul>\n * The default behaviour is the same as before, which is to return the source string\n * unchanged.\n * \n * <li><i>onLoad</i> - a callback function to call when the resources are fully \n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two. \n * \n * <li>sync - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while. \n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * The locale option may be given as a locale spec string or as an \n * Locale object. If the locale option is not specified, then strings for\n * the default locale will be loaded.<p> \n * \n * The name option can be used to put groups of strings together in a\n * single bundle. The strings will then appear together in a JS object in\n * a JS file that can be included before the ilib.<p>\n * \n * A resource bundle with a particular name is actually a set of bundles\n * that are each specific to a language, a language plus a region, etc. \n * All bundles with the same base name should\n * contain the same set of source strings, but with different translations for \n * the given locale. The user of the bundle does not need to be aware of \n * the locale of the bundle, as long as it contains values for the strings \n * it needs.<p>\n * \n * Strings in bundles for a particular locale are inherited from parent bundles\n * that are more generic. In general, the hierarchy is as follows (from \n * least locale-specific to most locale-specific):\n * \n * <ol>\n * <li> language\n * <li> region\n * <li> language_script\n * <li> language_region\n * <li> region_variant\n * <li> language_script_region\n * <li> language_region_variant\n * <li> language_script_region_variant\n * </ol>\n * \n * That is, if the translation for a string does not exist in the current\n * locale, the more-generic parent locale is searched for the string. In the\n * worst case scenario, the string is not found in the base locale's strings. \n * In this case, the missing option guides this class on what to do. If\n * the missing option is \"source\", then the original source is returned as \n * the translation. If it is \"empty\", the empty string is returned. If it\n * is \"pseudo\", then the pseudo-translated string that is appropriate for\n * the default script of the locale is returned.<p> \n * \n * This allows developers to create code with new or changed strings in it and check in that\n * code without waiting for the translations to be done first. The translated\n * version of the app or web site will still function properly, but will show \n * a spurious untranslated string here and there until the translations are \n * done and also checked in.<p>   \n *  \n * The base is whatever language your developers use to code in. For\n * a German web site, strings in the source code may be written in German \n * for example. Often this base is English, as many web sites are coded in\n * English, but that is not required.<p>\n * \n * The strings can be extracted with the ilib localization tool (which will be\n * shipped at some future time.) Once the strings\n * have been translated, the set of translated files can be generated with the\n * same tool. The output from the tool can be used as input to the ResBundle\n * object. It is up to the web page or app to make sure the JS file that defines\n * the bundle is included before creating the ResBundle instance.<p>\n * \n * A special locale \"zxx-XX\" is used as the pseudo-translation locale because\n * zxx means \"no linguistic information\" in the ISO 639 standard, and the region \n * code XX is defined to be user-defined in the ISO 3166 standard. \n * Pseudo-translation is a locale where the translations are generated on\n * the fly based on the contents of the source string. Characters in the source \n * string are replaced with other characters and returned. \n * \n * Example. If the source string is:\n * \n * <pre>\n * \"This is a string\"\n * </pre>\n * \n * then the pseudo-translated version might look something like this: \n * \n * <pre>\n * \"Ţħïş ïş á şţřïñĝ\"\n * </pre>\n * <p>\n * \n * Pseudo-translation can be used to test that your app or web site is translatable\n * before an actual translation has happened. These bugs can then be fixed \n * before the translation starts, avoiding an explosion of bugs later when\n * each language's tester registers the same bug complaining that the same \n * string is not translated. When pseudo-localizing with\n * the Latin script, this allows the strings to be readable in the UI in the \n * source language (if somewhat funky-looking), \n * so that a tester can easily verify that the string is properly externalized \n * and loaded from a resource bundle without the need to be able to read a\n * foreign language.<p> \n * \n * If one of a list of script tags is given in the pseudo-locale specifier, then the\n * pseudo-localization can map characters to very rough transliterations of\n * characters in the given script. For example, zxx-Hebr-XX maps strings to\n * Hebrew characters, which can be used to test your UI in a right-to-left\n * language to catch bidi bugs before a translation is done. Currently, the\n * list of target scripts includes Hebrew (Hebr), Chinese Simplified Han (Hans),\n * and Cyrillic (Cyrl) with more to be added later. If no script is explicitly\n * specified in the locale spec, or if the script is not supported,\n * then the default mapping maps Latin base characters to accented versions of\n * those Latin characters as in the example above.\n *  \n * When the \"lengthen\" property is set to true in the options, the \n * pseudotranslation code will add digits to the end of the string to simulate\n * the lengthening that occurs when translating to other languages. The above \n * example will come out like this:\n * \n * <pre>\n * \"Ţħïş ïş á şţřïñĝ76543210\"\n * </pre>\n * \n * The string is lengthened according to the length of the source string. If\n * the source string is less than 20 characters long, the string is lengthened \n * by 50%. If the source string is 20-40 \n * characters long, the string is lengthened by 33%. If te string is greater\n * than 40 characters long, the string is lengthened by 20%.<p>\n * \n * The pseudotranslation always ends a string with the digit \"0\". If you do\n * not see the digit \"0\" in the UI for your app, you know that truncation\n * has occurred, and the number you see at the end of the string tells you \n * how many characters were truncated.<p>\n * \n * \n * @constructor\n * @param {?Object} options Options controlling how the bundle is created\n */\nvar ResBundle = function (options) {\n\tvar lookupLocale, spec;\n\t\n\tthis.locale = new Locale();\t// use the default locale\n\tthis.baseName = \"strings\";\n\tthis.type = \"text\";\n\tthis.loadParams = {};\n\tthis.missing = \"source\";\n\tthis.sync = true;\n\t\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? \n\t\t\t\t\tnew Locale(options.locale) :\n\t\t\t\t\toptions.locale;\n\t\t}\n\t\tif (options.name) {\n\t\t\tthis.baseName = options.name;\n\t\t}\n\t\tif (options.type) {\n\t\t\tthis.type = options.type;\n\t\t}\n\t\tthis.lengthen = options.lengthen || false;\n\t\t\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = (options.sync == true);\n\t\t}\n\t\t\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\t\tif (typeof(options.missing) !== 'undefined') {\n\t\t\tif (options.missing === \"pseudo\" || options.missing === \"empty\") {\n\t\t\t\tthis.missing = options.missing;\n\t\t\t}\n\t\t}\n\t} else {\n\t\toptions = {};\n\t}\n\t\n\tthis.map = {};\n\n\tif (!ResBundle[this.baseName]) {\n\t\tResBundle[this.baseName] = {};\n\t}\n\n\tlookupLocale = this.locale.isPseudo() ? new Locale(\"en-US\") : this.locale;\n\n\tUtils.loadData({\n\t\tobject: ResBundle[this.baseName], \n\t\tlocale: lookupLocale, \n\t\tname: this.baseName + \".json\", \n\t\tsync: this.sync, \n\t\tloadParams: this.loadParams, \n\t\tcallback: ilib.bind(this, function (map) {\n\t\t\tif (!map) {\n\t\t\t\tmap = ilib.data[this.baseName] || {};\n\t\t\t\tspec = lookupLocale.getSpec().replace(/-/g, '_');\n\t\t\t\tResBundle[this.baseName].cache[spec] = map;\n\t\t\t}\n\t\t\tthis.map = map;\n\t\t\tif (this.locale.isPseudo()) {\n\t\t\t\tif (!ResBundle.pseudomap) {\n\t\t\t\t\tResBundle.pseudomap = {};\n\t\t\t\t}\n\t\n\t\t\t\tthis._loadPseudo(this.locale, options.onLoad);\n\t\t\t} else if (this.missing === \"pseudo\") {\n\t\t\t\tif (!ResBundle.pseudomap) {\n\t\t\t\t\tResBundle.pseudomap = {};\n\t\t\t\t}\n\t\n\t\t\t\tnew LocaleInfo(this.locale, {\n\t\t\t\t\tsync: this.sync,\n\t\t\t\t\tloadParams: this.loadParams,\n\t\t\t\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t\t\t\tvar pseudoLocale = new Locale(\"zxx\", \"XX\", undefined, li.getDefaultScript());\n\t\t\t\t\t\tthis._loadPseudo(pseudoLocale, options.onLoad);\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n\n\t// console.log(\"Merged resources \" + this.locale.toString() + \" are: \" + JSON.stringify(this.map));\n\t//if (!this.locale.isPseudo() && JSUtils.isEmpty(this.map)) {\n\t//\tconsole.log(\"Resources for bundle \" + this.baseName + \" locale \" + this.locale.toString() + \" are not available.\");\n\t//}\n};\n\nResBundle.defaultPseudo = ilib.data.pseudomap || {\n\t\"a\": \"à\",\n\t\"e\": \"ë\",\n\t\"i\": \"í\",\n\t\"o\": \"õ\",\n\t\"u\": \"ü\",\n\t\"y\": \"ÿ\",\n\t\"A\": \"Ã\",\n\t\"E\": \"Ë\",\n\t\"I\": \"Ï\",\n\t\"O\": \"Ø\",\n\t\"U\": \"Ú\",\n\t\"Y\": \"Ŷ\"\n};\n\nResBundle.prototype = {\n    /**\n     * @protected\n     */\n    _loadPseudo: function (pseudoLocale, onLoad) {\n\t\tUtils.loadData({\n\t\t\tobject: ResBundle.pseudomap, \n\t\t\tlocale: pseudoLocale, \n\t\t\tname: \"pseudomap.json\", \n\t\t\tsync: this.sync, \n\t\t\tloadParams: this.loadParams, \n\t\t\tcallback: ilib.bind(this, function (map) {\n\t\t\t\tif (!map || JSUtils.isEmpty(map)) {\n\t\t\t\t\tmap = ResBundle.defaultPseudo;\n\t\t\t\t\tvar spec = pseudoLocale.getSpec().replace(/-/g, '_');\n\t\t\t\t\tResBundle.pseudomap.cache[spec] = map;\n\t\t\t\t}\n\t\t\t\tthis.pseudomap = map;\n\t\t\t\tif (typeof(onLoad) === 'function') {\n\t\t\t\t\tonLoad(this);\n\t\t\t\t}\t\n\t\t\t})\n\t\t});\n    },\n    \n\t/**\n\t * Return the locale of this resource bundle.\n\t * @return {Locale} the locale of this resource bundle object \n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\t\n\t/**\n\t * Return the name of this resource bundle. This corresponds to the name option\n\t * given to the constructor.\n\t * @return {string} name of the the current instance\n\t */\n\tgetName: function () {\n\t\treturn this.baseName;\n\t},\n\t\n\t/**\n\t * Return the type of this resource bundle. This corresponds to the type option\n\t * given to the constructor.\n\t * @return {string} type of the the current instance\n\t */\n\tgetType: function () {\n\t\treturn this.type;\n\t},\n\n\t/*\n\t * @private\n\t * Pseudo-translate a string\n\t */\n\tpseudo: function (str) {\n\t\tif (!str) {\n\t\t\treturn undefined;\n\t\t}\n\t\tvar ret = \"\", i;\n\t\tfor (i = 0; i < str.length; i++) {\n\t\t\tif (this.type !== \"raw\") {\n\t\t\t\tif (this.type === \"html\" || this.type === \"xml\") {\n\t\t\t\t\tif (str.charAt(i) === '<') {\n\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== '>') {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i < str.length) {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (str.charAt(i) === '&') {\n\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== ';' && str.charAt(i) !== ' ') {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i < str.length) {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (i < str.length) { \n\t\t\t\t\tif (str.charAt(i) === '{') {\n\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== '}') {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i < str.length) {\n\t\t\t\t\t\t\tret += str.charAt(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tret += this.pseudomap[str.charAt(i)] || str.charAt(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tret += this.pseudomap[str.charAt(i)] || str.charAt(i);\n\t\t\t}\n\t\t}\n\t\tif (this.lengthen) {\n\t\t\tvar add;\n\t\t\tif (ret.length <= 20) {\n\t\t\t\tadd = Math.round(ret.length / 2);\n\t\t\t} else if (ret.length > 20 && ret.length <= 40) {\n\t\t\t\tadd = Math.round(ret.length / 3);\n\t\t\t} else {\n\t\t\t\tadd = Math.round(ret.length / 5);\n\t\t\t}\n\t\t\tfor (i = add-1; i >= 0; i--) {\n\t\t\t\tret += (i % 10);\n\t\t\t}\n\t\t}\n\t\tif (this.locale.getScript() === \"Hans\" || this.locale.getScript() === \"Hant\" ||\n\t\t\t\tthis.locale.getScript() === \"Hani\" ||\n\t\t\t\tthis.locale.getScript() === \"Hrkt\" || this.locale.getScript() === \"Jpan\" ||\n\t\t\t\tthis.locale.getScript() === \"Hira\" || this.locale.getScript() === \"Kana\" ) {\n\t\t\t// simulate Asian languages by getting rid of all the spaces\n\t\t\tret = ret.replace(/ /g, \"\");\n\t\t}\n\t\treturn ret;\n\t},\n\t\n\t/*\n\t * @private\n\t * Escape html characters in the output.\n\t */\n\tescapeXml: function (str) {\n\t\tstr = str.replace(/&/g, '&amp;');\n\t\tstr = str.replace(/</g, '&lt;');\n\t\tstr = str.replace(/>/g, '&gt;');\n\t\treturn str;\n\t},\n\n\t/*\n\t * @private\n\t * @param {string} str the string to unescape\n\t */\n\tunescapeXml: function (str) {\n\t\tstr = str.replace(/&amp;/g, '&');\n\t\tstr = str.replace(/&lt;/g, '<');\n\t\tstr = str.replace(/&gt;/g, '>');\n\t\treturn str;\n\t},\n\t\n\t/*\n\t * @private\n\t * Create a key name out of a source string. All this does so far is \n\t * compress sequences of white space into a single space on the assumption\n\t * that this doesn't really change the meaning of the string, and therefore\n\t * all such strings that compress to the same thing should share the same\n\t * translation.\n\t * @param {string} source the source string to make a key out of\n\t */\n\tmakeKey: function (source) {\n\t\tvar key = source.replace(/\\s+/gm, ' ');\n\t\treturn (this.type === \"xml\" || this.type === \"html\") ? this.unescapeXml(key) : key;\n\t},\n\t\n\t/**\n\t * Return a localized string. If the string is not found in the loaded set of\n\t * resources, the original source string is returned. If the key is not given,\n\t * then the source string itself is used as the key. In the case where the \n\t * source string is used as the key, the whitespace is compressed down to 1 space\n\t * each, and the whitespace at the beginning and end of the string is trimmed.<p>\n\t * \n\t * The escape mode specifies what type of output you are escaping the returned\n\t * string for. Modes are similar to the types: \n\t * \n\t * <ul>\n\t * <li>\"html\" -- prevents HTML injection by escaping the characters &lt &gt; and &amp;\n\t * <li>\"xml\" -- currently same as \"html\" mode\n\t * <li>\"js\" -- prevents breaking Javascript syntax by backslash escaping all quote and \n\t * double-quote characters\n\t * <li>\"attribute\" -- meant for HTML attribute values. Currently this is the same as\n\t * \"js\" escape mode.\n\t * <li>\"default\" -- use the type parameter from the constructor as the escape mode as well\n\t * <li>\"none\" or undefined -- no escaping at all.\n\t * </ul>\n\t * \n\t * The type parameter of the constructor specifies what type of strings this bundle\n\t * is operating upon. This allows pseudo-translation and automatic key generation\n\t * to happen properly by telling this class how to parse the string. The escape mode \n\t * for this method is different in that it specifies how this string will be used in \n\t * the calling code and therefore how to escape it properly.<p> \n\t * \n\t * For example, a section of Javascript code may be constructing an HTML snippet in a \n\t * string to add to the web page. In this case, the type parameter in the constructor should\n\t * be \"html\" so that the source string can be parsed properly, but the escape mode should\n\t * be \"js\" so that the output string can be used in Javascript without causing syntax\n\t * errors.\n\t * \n\t * @param {?string=} source the source string to translate\n\t * @param {?string=} key optional name of the key, if any\n\t * @param {?string=} escapeMode escape mode, if any\n\t * @return {IString|undefined} the translation of the given source/key or undefined \n\t * if the translation is not found and the source is undefined \n\t */\n\tgetString: function (source, key, escapeMode) {\n\t\tif (!source && !key) return new IString(\"\");\n\n\t\tvar trans;\n\t\tif (this.locale.isPseudo()) {\n\t\t\tvar str = source ? source : this.map[key];\n\t\t\ttrans = this.pseudo(str || key);\n\t\t} else {\n\t\t\tvar keyName = key || this.makeKey(source);\n\t\t\tif (typeof(this.map[keyName]) !== 'undefined') {\n\t\t\t\ttrans = this.map[keyName];\n\t\t\t} else if (this.missing === \"pseudo\") {\n\t\t\t\ttrans = this.pseudo(source || key);\n\t\t\t} else if (this.missing === \"empty\") {\n\t\t\t\ttrans = \"\";\n\t\t\t} else {\n\t\t\t\ttrans = source;\n\t\t\t}\n\t\t}\n\n\t\tif (escapeMode && escapeMode !== \"none\") {\n\t\t\tif (escapeMode == \"default\") {\n\t\t\t\tescapeMode = this.type;\n\t\t\t}\n\t\t\tif (escapeMode === \"xml\" || escapeMode === \"html\") {\n\t\t\t\ttrans = this.escapeXml(trans);\n\t\t\t} else if (escapeMode == \"js\" || escapeMode === \"attribute\") {\n\t\t\t\ttrans = trans.replace(/'/g, \"\\\\\\'\").replace(/\"/g, \"\\\\\\\"\");\n\t\t\t}\n\t\t}\n\t\tif (trans === undefined) {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\tvar ret = new IString(trans);\n\t\t\tret.setLocale(this.locale.getSpec(), true, this.loadParams); // no callback\n\t\t\treturn ret;\n\t\t}\n\t},\n\t\n\t/**\n\t * Return a localized string as a Javascript object. This does the same thing as\n\t * the getString() method, but it returns a regular Javascript string instead of\n\t * and IString instance. This means it cannot be formatted with the format()\n\t * method without being wrapped in an IString instance first.\n\t * \n\t * @param {?string=} source the source string to translate\n\t * @param {?string=} key optional name of the key, if any\n\t * @param {?string=} escapeMode escape mode, if any\n\t * @return {string|undefined} the translation of the given source/key or undefined \n\t * if the translation is not found and the source is undefined\n\t */\n\tgetStringJS: function(source, key, escapeMode) {\n\t\treturn this.getString(source, key, escapeMode).toString();\n\t},\n\t\n\t/**\n\t * Return true if the current bundle contains a translation for the given key and\n\t * source. The\n\t * getString method will always return a string for any given key and source \n\t * combination, so it cannot be used to tell if a translation exists. Either one\n\t * or both of the source and key must be specified. If both are not specified,\n\t * this method will return false.\n\t * \n\t * @param {?string=} source source string to look up\n\t * @param {?string=} key key to look up\n\t * @return {boolean} true if this bundle contains a translation for the key, and \n\t * false otherwise\n\t */\n\tcontainsKey: function(source, key) {\n\t\tif (typeof(source) === 'undefined' && typeof(key) === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tvar keyName = key || this.makeKey(source);\n\t\treturn typeof(this.map[keyName]) !== 'undefined';\n\t},\n\t\n\t/**\n\t * Return the merged resources as an entire object. When loading resources for a\n\t * locale that are not just a set of translated strings, but instead an entire \n\t * structured javascript object, you can gain access to that object via this call. This method\n\t * will ensure that all the of the parts of the object are correct for the locale.<p>\n\t * \n\t * For pre-assembled data, it starts by loading <i>ilib.data[name]</i>, where \n\t * <i>name</i> is the base name for this set of resources. Then, it successively \n\t * merges objects in the base data using progressively more locale-specific data. \n\t * It loads it in this order from <i>ilib.data</i>:\n\t * \n\t * <ol>\n\t * <li> language\n\t * <li> region\n\t * <li> language_script\n\t * <li> language_region\n\t * <li> region_variant\n\t * <li> language_script_region\n\t * <li> language_region_variant\n\t * <li> language_script_region_variant\n\t * </ol>\n\t * \n\t * For dynamically loaded data, the code attempts to load the same sequence as\n\t * above, but with slash path separators instead of underscores.<p>\n\t *  \n\t * Loading the resources this way allows the program to share resources between all\n\t * locales that share a common language, region, or script. As a \n\t * general rule-of-thumb, resources should be as generic as possible in order to\n\t * cover as many locales as possible.\n\t * \n\t * @return {Object} returns the object that is the basis for this resources instance\n\t */\n\tgetResObj: function () {\n\t\treturn this.map;\n\t}\n};\n\nmodule.exports = ResBundle;","/*\n * caseMapper.js - define upper- and lower-case mapper\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends Locale.js IString.js\n\nvar ilib = require(\"./ilib.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar IString = require(\"./IString.js\");\n\n/**\n * @class\n * Create a new string mapper instance that maps strings to upper or\n * lower case. This mapping will work for any string as characters \n * that have no case will be returned unchanged.<p>\n * \n * The options may contain any of the following properties:\n * \n * <ul>\n * <li><i>locale</i> - locale to use when loading the mapper. Some maps are \n * locale-dependent, and this locale selects the right one. Default if this is\n * not specified is the current locale.\n * \n * <li><i>direction</i> - \"toupper\" for upper-casing, or \"tolower\" for lower-casing.\n * Default if not specified is \"toupper\".\n * </ul>\n * \n * \n * @constructor\n * @param {Object=} options options to initialize this mapper \n */\nvar CaseMapper = function (options) {\n\tthis.up = true;\n\tthis.locale = new Locale();\n\t\n\tif (options) {\n\t\tif (typeof(options.locale) !== 'undefined') {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\n\t\t}\n\t\t\n\t\tthis.up = (!options.direction || options.direction === \"toupper\");\n\t}\n\n\tthis.mapData = this.up ? {\n\t\t\"ß\": \"SS\",\t\t// German\n\t\t'ΐ': 'Ι',\t\t// Greek\n\t\t'ά': 'Α',\n\t\t'έ': 'Ε',\n\t\t'ή': 'Η',\n\t\t'ί': 'Ι',\n\t\t'ΰ': 'Υ',\n\t\t'ϊ': 'Ι',\n\t\t'ϋ': 'Υ',\n\t\t'ό': 'Ο',\n\t\t'ύ': 'Υ',\n\t\t'ώ': 'Ω',\n\t\t'Ӏ': 'Ӏ',\t\t// Russian and slavic languages\n\t\t'ӏ': 'Ӏ'\n\t} : {\n\t\t'Ӏ': 'Ӏ'\t\t// Russian and slavic languages\n\t};\n\n\tswitch (this.locale.getLanguage()) {\n\t\tcase \"az\":\n\t\tcase \"tr\":\n\t\tcase \"crh\":\n\t\tcase \"kk\":\n\t\tcase \"krc\":\n\t\tcase \"tt\":\n\t\t\tvar lower = \"iı\";\n\t\t\tvar upper = \"İI\";\n\t\t\tthis._setUpMap(lower, upper);\n\t\t\tbreak;\n\t\tcase \"fr\":\n\t\t\tif (this.up && this.locale.getRegion() !== \"CA\") {\n\t\t\t\tthis._setUpMap(\"àáâãäçèéêëìíîïñòóôöùúûü\", \"AAAAACEEEEIIIINOOOOUUUU\");\n\t\t\t}\n\t\t\tbreak;\n\t}\n\t\n\tif (ilib._getBrowser() === \"ie\") {\n\t\t// IE is missing these mappings for some reason\n\t\tif (this.up) {\n\t\t\tthis.mapData['ς'] = 'Σ';\n\t\t}\n\t\tthis._setUpMap(\"ⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⳁⳉⳋ\", \"ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⳀⳈⳊ\"); // Coptic\n\t\t// Georgian Nuskhuri <-> Asomtavruli\n\t\tthis._setUpMap(\"ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ\", \"ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ\");\t\n\t}\n};\n\nCaseMapper.prototype = {\n\t/** \n\t * @private \n\t */\n\t_charMapper: function(string) {\n\t\tif (!string) {\n\t\t\treturn string;\n\t\t}\n\t\tvar input = (typeof(string) === 'string') ? new IString(string) : string.toString();\n\t\tvar ret = \"\";\n\t\tvar it = input.charIterator();\n\t\tvar c;\n\t\t\n\t\twhile (it.hasNext()) {\n\t\t\tc = it.next();\n\t\t\tif (!this.up && c === 'Σ') {\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tc = it.next();\n\t\t\t\t\tvar code = c.charCodeAt(0);\n\t\t\t\t\t// if the next char is not a greek letter, this is the end of the word so use the\n\t\t\t\t\t// final form of sigma. Otherwise, use the mid-word form.\n\t\t\t\t\tret += ((code < 0x0388 && code !== 0x0386) || code > 0x03CE) ? 'ς' : 'σ';\n\t\t\t\t\tret += c.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\t// no next char means this is the end of the word, so use the final form of sigma\n\t\t\t\t\tret += 'ς';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.mapData[c]) {\n\t\t\t\t\tret += this.mapData[c];\n\t\t\t\t} else {\n\t\t\t\t\tret += this.up ? c.toUpperCase() : c.toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn ret;\n\t},\n\n\t/** @private */\n\t_setUpMap: function(lower, upper) {\n\t\tvar from, to;\n\t\tif (this.up) {\n\t\t\tfrom = lower;\n\t\t\tto = upper;\n\t\t} else {\n\t\t\tfrom = upper;\n\t\t\tto = lower;\n\t\t}\n\t\tfor (var i = 0; i < upper.length; i++) {\n\t\t\tthis.mapData[from[i]] = to[i];\n\t\t}\n\t},\n\n\t/**\n\t * Return the locale that this mapper was constructed with. \n\t * @returns {Locale} the locale that this mapper was constructed with\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\t\t\n\t/**\n\t * Map a string to lower case in a locale-sensitive manner.\n\t * \n\t * @param {string|undefined} string\n\t * @return {string|undefined}\n\t */\n\tmap: function (string) {\n\t\treturn this._charMapper(string);\n\t}\n};\n\nmodule.exports = CaseMapper;","/*\n * gregratadie.js - Represent the RD date number in the Gregorian calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nGregorianCal.js\nRataDie.js\nMathUtils.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar GregorianCal = require(\"./GregorianCal.js\");\nvar RataDie = require(\"./RataDie.js\");\n\n/**\n * @class\n * Construct a new Gregorian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date\n */\nvar GregRataDie = function(params) {\n\tthis.cal = params && params.cal || new GregorianCal();\n\t/** @type {number|undefined} */\n\tthis.rd = undefined;\n\tRataDie.call(this, params);\n};\n\nGregRataDie.prototype = new RataDie();\nGregRataDie.prototype.parent = RataDie;\nGregRataDie.prototype.constructor = GregRataDie;\n\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\nGregRataDie.cumMonthLengths = [\n    0,   /* Jan */\n\t31,  /* Feb */\n\t59,  /* Mar */\n\t90,  /* Apr */\n\t120, /* May */\n\t151, /* Jun */\n\t181, /* Jul */\n\t212, /* Aug */\n\t243, /* Sep */\n\t273, /* Oct */\n\t304, /* Nov */\n\t334, /* Dec */\n\t365\n];\n\n/**\n * the cumulative lengths of each month, for a leap year \n * @private\n * @const\n * @type Array.<number>\n */\nGregRataDie.cumMonthLengthsLeap = [\n\t0,   /* Jan */\n\t31,  /* Feb */\n\t60,  /* Mar */\n\t91,  /* Apr */\n\t121, /* May */\n\t152, /* Jun */\n\t182, /* Jul */\n\t213, /* Aug */\n\t244, /* Sep */\n\t274, /* Oct */\n\t305, /* Nov */\n\t335, /* Dec */\n\t366\n];\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date.\n * \n * @private\n * @param {Object} date the date components to calculate the RD from\n */\nGregRataDie.prototype._setDateComponents = function(date) {\n\tvar year = parseInt(date.year, 10) || 0;\n\tvar month = parseInt(date.month, 10) || 1;\n\tvar day = parseInt(date.day, 10) || 1;\n\tvar hour = parseInt(date.hour, 10) || 0;\n\tvar minute = parseInt(date.minute, 10) || 0;\n\tvar second = parseInt(date.second, 10) || 0;\n\tvar millisecond = parseInt(date.millisecond, 10) || 0;\n\n\tvar years = 365 * (year - 1) +\n\t\tMath.floor((year-1)/4) -\n\t\tMath.floor((year-1)/100) +\n\t\tMath.floor((year-1)/400);\n\t\n\tvar dayInYear = (month > 1 ? GregRataDie.cumMonthLengths[month-1] : 0) +\n\t\tday +\n\t\t(GregorianCal.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);\n\tvar rdtime = (hour * 3600000 +\n\t\tminute * 60000 +\n\t\tsecond * 1000 +\n\t\tmillisecond) / \n\t\t86400000; \n\t/*\n\tdebug(\"getRataDie: converting \" +  JSON.stringify(this));\n\tdebug(\"getRataDie: year is \" +  years);\n\tdebug(\"getRataDie: day in year is \" +  dayInYear);\n\tdebug(\"getRataDie: rdtime is \" +  rdtime);\n\tdebug(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n\t*/\n\t\n\t/**\n\t * @type {number|undefined} the RD number of this Gregorian date\n\t */\n\tthis.rd = years + dayInYear + rdtime;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\nGregRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n\nmodule.exports = GregRataDie;","/*\n * thaisolar.js - Represent a Thai solar calendar object.\n *\n * Copyright © 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends ilib.js Calendar.js GregorianCal.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar Calendar = require(\"./Calendar.js\");\nvar GregorianCal = require(\"./GregorianCal.js\");\n\n/**\n * @class\n * Construct a new Thai solar calendar object. This class encodes information about\n * a Thai solar calendar.<p>\n *\n *\n * @constructor\n * @extends Calendar\n */\nvar ThaiSolarCal = function() {\n\tthis.type = \"thaisolar\";\n};\n\nThaiSolarCal.prototype = new GregorianCal({noinstance: true});\nThaiSolarCal.prototype.parent = GregorianCal;\nThaiSolarCal.prototype.constructor = ThaiSolarCal;\n\n/**\n * Return true if the given year is a leap year in the Thai solar calendar.\n * The year parameter may be given as a number, or as a ThaiSolarDate object.\n * @param {number|ThaiSolarDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nThaiSolarCal.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) === 'number' ? year : year.getYears());\n\ty -= 543;\n\tvar centuries = MathUtils.mod(y, 400);\n\treturn (MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);\n};\n\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"thaisolar\"] = ThaiSolarCal;\n\nmodule.exports = ThaiSolarCal;","/*\n * coptic.js - Represent a Coptic calendar object.\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends ilib.js Calendar.js Locale.js Utils.js EthiopicCal.js */\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar Locale = require(\"./Locale.js\");\nvar Calendar = require(\"./Calendar.js\");\nvar EthiopicCal = require(\"./EthiopicCal.js\");\n\n/**\n * @class\n * Construct a new Coptic calendar object. This class encodes information about\n * a Coptic calendar.<p>\n * \n * \n * @constructor\n * @extends EthiopicCal\n */\nvar CopticCal = function() {\n\tthis.type = \"coptic\";\n};\n\nCopticCal.prototype = new EthiopicCal();\nCopticCal.prototype.parent = EthiopicCal;\nCopticCal.prototype.constructor = CopticCal;\n\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"coptic\"] = CopticCal;\n\nmodule.exports = CopticCal;","/*\n * EthiopicRataDie.js - Represent an RD date in the Ethiopic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nEthiopicCal.js\nRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar EthiopicCal = require(\"./EthiopicCal.js\");\nvar RataDie = require(\"./RataDie.js\");\n\n/**\n * @class\n * Construct a new Ethiopic RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\n * \n * <li><i>day</i> - 1 to 30\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Ethiopic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic RD date\n */\nvar EthiopicRataDie = function(params) {\n\tthis.cal = params && params.cal || new EthiopicCal();\n\tthis.rd = undefined;\n\tRataDie.call(this, params);\n};\n\nEthiopicRataDie.prototype = new RataDie();\nEthiopicRataDie.prototype.parent = RataDie;\nEthiopicRataDie.prototype.constructor = EthiopicRataDie;\n\n/**\n * The difference between the zero Julian day and the first Ethiopic date\n * of Friday, August 29, 8 CE Julian at 6:00am UTC.<p> \n * \n * See <a href=\"http://us.wow.com/wiki/Time_in_Ethiopia?s_chn=90&s_pt=aolsem&v_t=aolsem\"\n * Time in Ethiopia</a> for information about how time is handled in Ethiopia.\n * \n * @protected\n * @type number\n */\nEthiopicRataDie.prototype.epoch = 1724219.75;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n * \n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nEthiopicRataDie.prototype._setDateComponents = function(date) {\n\tvar year = date.year;\n\tvar years = 365 * (year - 1) + Math.floor(year/4);\n\tvar dayInYear = (date.month-1) * 30 + date.day;\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) / \n\t\t86400000;\n\t\n\t/*\n\tconsole.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\n\tconsole.log(\"getRataDie: year is \" +  years);\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n\t*/\n\t\n\tthis.rd = years + dayInYear + rdtime;\n};\n\nmodule.exports = EthiopicRataDie;\n","/*\n * TimeZone.js - Definition of a time zone class\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends \nilib.js \nLocale.js\nLocaleInfo.js\nUtils.js\nMathUtils.js\nJSUtils.js\nGregRataDie.js\nIString.js\nCalendarFactory.js\n*/\n\n// !data localeinfo zoneinfo\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar GregRataDie = require(\"./GregRataDie.js\");\nvar CalendarFactory = require(\"./CalendarFactory.js\");\nvar IString = require(\"./IString.js\");\n\n/**\n * @class\n * Create a time zone instance. \n * \n * This class reports and transforms\n * information about particular time zones.<p>\n * \n * The options parameter may contain any of the following properties:\n * \n * <ul>\n * <li><i>id</i> - The id of the requested time zone such as \"Europe/London\" or \n * \"America/Los_Angeles\". These are taken from the IANA time zone database. (See\n * http://www.iana.org/time-zones for more information.) <p>\n * \n * There is one special \n * time zone that is not taken from the IANA database called simply \"local\". In\n * this case, this class will attempt to discover the current time zone and\n * daylight savings time settings by calling standard Javascript classes to \n * determine the offsets from UTC. \n * \n * <li><i>locale</i> - The locale for this time zone.\n * \n * <li><i>offset</i> - Choose the time zone based on the offset from UTC given in\n * number of minutes (negative is west, positive is east).\n * \n * <li><i>onLoad</i> - a callback function to call when the data is fully \n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the data is loaded, the onLoad function is called with the current \n * instance as a parameter. \n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *  \n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * There is currently no way in the ECMAscript\n * standard to tell which exact time zone is currently in use. Choosing the\n * id \"locale\" or specifying an explicit offset will not give a specific time zone, \n * as it is impossible to tell with certainty which zone the offsets \n * match.<p>\n * \n * When the id \"local\" is given or the offset option is specified, this class will\n * have the following behaviours:\n * <ul>\n * <li>The display name will always be given as the RFC822 style, no matter what\n * style is requested\n * <li>The id will also be returned as the RFC822 style display name\n * <li>When the offset is explicitly given, this class will assume the time zone \n * does not support daylight savings time, and the offsets will be calculated \n * the same way year round.\n * <li>When the offset is explicitly given, the inDaylightSavings() method will \n * always return false.\n * <li>When the id \"local\" is given, this class will attempt to determine the \n * daylight savings time settings by examining the offset from UTC on Jan 1\n * and June 1 of the current year. If they are different, this class assumes\n * that the local time zone uses DST. When the offset for a particular date is\n * requested, it will use the built-in Javascript support to determine the \n * offset for that date.\n * </ul> \n * \n * If a more specific time zone is \n * needed with display names and known start/stop times for DST, use the \"id\" \n * property instead to specify the time zone exactly. You can perhaps ask the\n * user which time zone they prefer so that your app does not need to guess.<p>\n * \n * If the id and the offset are both not given, the default time zone for the \n * locale is retrieved from\n * the locale info. If the locale is not specified, the default locale for the\n * library is used.<p>\n * \n * Because this class was designed for use in web sites, and the vast majority\n * of dates and times being formatted are recent date/times, this class is simplified\n * by not implementing historical time zones. That is, when governments change the \n * time zone rules for a particular zone, only the latest such rule is implemented \n * in this class. That means that determining the offset for a date that is prior \n * to the last change may give the wrong result. Historical time zone calculations\n * may be implemented in a later version of iLib if there is enough demand for it,\n * but it would entail a much larger set of time zone data that would have to be\n * loaded.  \n * \n * \n * @constructor\n * @param {Object} options Options guiding the construction of this time zone instance\n */\nvar TimeZone = function(options) {\n\tthis.sync = true;\n\tthis.locale = new Locale();\n\tthis.isLocal = false;\n\t\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\n\t\t}\n\t\t\n\t\tif (options.id) {\n\t\t\tvar id = options.id.toString();\n\t\t\tif (id === 'local') {\n\t\t\t\tthis.isLocal = true;\n\t\t\t\t\n\t\t\t\t// use standard Javascript Date to figure out the time zone offsets\n\t\t\t\tvar now = new Date(), \n\t\t\t\t\tjan1 = new Date(now.getFullYear(), 0, 1),  // months in std JS Date object are 0-based\n\t\t\t\t\tjun1 = new Date(now.getFullYear(), 5, 1);\n\t\t\t\t\n\t\t\t\t// Javascript's method returns the offset backwards, so we have to\n\t\t\t\t// take the negative to get the correct offset\n\t\t\t\tthis.offsetJan1 = -jan1.getTimezoneOffset();\n\t\t\t\tthis.offsetJun1 = -jun1.getTimezoneOffset();\n\t\t\t\t// the offset of the standard time for the time zone is always the one that is closest \n\t\t\t\t// to negative infinity of the two, no matter whether you are in the northern or southern \n\t\t\t\t// hemisphere, east or west\n\t\t\t\tthis.offset = Math.min(this.offsetJan1, this.offsetJun1);\n\t\t\t}\n\t\t\tthis.id = id;\n\t\t} else if (options.offset) {\n\t\t\tthis.offset = (typeof(options.offset) === 'string') ? parseInt(options.offset, 10) : options.offset;\n\t\t\tthis.id = this.getDisplayName(undefined, undefined);\n\t\t}\n\t\t\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = !!options.sync;\n\t\t}\n\t\t\n\t\tthis.loadParams = options.loadParams;\n\t\tthis.onLoad = options.onLoad;\n\t}\n\n\t//console.log(\"timezone: locale is \" + this.locale);\n\t\n\tif (!this.id) {\n\t\tnew LocaleInfo(this.locale, {\n\t\t\tsync: this.sync,\n\t\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t\tthis.id = li.getTimeZone() || \"Etc/UTC\";\n\t\t\t\tthis._loadtzdata();\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis._loadtzdata();\n\t}\n\n\t//console.log(\"localeinfo is: \" + JSON.stringify(this.locinfo));\n\t//console.log(\"id is: \" + JSON.stringify(this.id));\n};\n\n/*\n * Explanation of the compressed time zone info properties.\n * {\n *     \"o\": \"8:0\",      // offset from UTC\n *     \"f\": \"W{c}T\",    // standard abbreviation. For time zones that observe DST, the {c} replacement is replaced with the \n *                      // letter in the e.c or s.c properties below \n *     \"e\": {           // info about the end of DST\n *         \"j\": 78322.5 // Julian day when the transition happens. Either specify the \"j\" property or all of the \"m\", \"r\", and \n *                      // \"t\" properties, but not both sets.\n *         \"m\": 3,      // month that it ends\n *         \"r\": \"l0\",   // rule for the day it ends \"l\" = \"last\", numbers are Sun=0 through Sat=6. Other syntax is \"0>7\". \n *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=\n *         \"t\": \"2:0\",  // time of day that the DST turns off, hours:minutes\n *         \"c\": \"S\"     // character to replace into the abbreviation for standard time \n *     },\n *     \"s\": {           // info about the start of DST\n *         \"j\": 78189.5 // Julian day when the transition happens. Either specify the \"j\" property or all of the \"m\", \"r\", and \n *                      // \"t\" properties, but not both sets.\n *         \"m\": 10,     // month that it starts\n *         \"r\": \"l0\",   // rule for the day it starts \"l\" = \"last\", numbers are Sun=0 through Sat=6. Other syntax is \"0>7\".\n *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=\n *         \"t\": \"2:0\",  // time of day that the DST turns on, hours:minutes\n *         \"v\": \"1:0\",  // amount of time saved in hours:minutes\n *         \"c\": \"D\"     // character to replace into the abbreviation for daylight time\n *     },\n *     \"c\": \"AU\",       // ISO code for the country that contains this time zone\n *     \"n\": \"W. Australia {c} Time\"\n *                      // long English name of the zone. The {c} replacement is for the word \"Standard\" or \"Daylight\" as appropriate\n * }\n */\nTimeZone.prototype._loadtzdata = function () {\n\t// console.log(\"id is: \" + JSON.stringify(this.id));\n\t// console.log(\"zoneinfo is: \" + JSON.stringify(ilib.data.zoneinfo[this.id]));\n\tif (!ilib.data.zoneinfo[this.id] && typeof(this.offset) === 'undefined') {\n\t\tUtils.loadData({\n\t\t\tobject: TimeZone, \n\t\t\tnonlocale: true,\t// locale independent \n\t\t\tname: \"zoneinfo/\" + this.id + \".json\", \n\t\t\tsync: this.sync, \n\t\t\tloadParams: this.loadParams, \n\t\t\tcallback: ilib.bind(this, function (tzdata) {\n\t\t\t\tif (tzdata && !JSUtils.isEmpty(tzdata)) {\n\t\t\t\t\tilib.data.zoneinfo[this.id] = tzdata;\n\t\t\t\t}\n\t\t\t\tthis._initZone();\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis._initZone();\n\t}\n};\n\nTimeZone.prototype._initZone = function() {\n\t/** \n\t * @private\n\t * @type {{o:string,f:string,e:Object.<{m:number,r:string,t:string,z:string}>,s:Object.<{m:number,r:string,t:string,z:string,v:string,c:string}>,c:string,n:string}} \n\t */\n\tthis.zone = ilib.data.zoneinfo[this.id];\n\tif (!this.zone && typeof(this.offset) === 'undefined') {\n\t\tthis.id = \"Etc/UTC\";\n\t\tthis.zone = ilib.data.zoneinfo[this.id];\n\t}\n\t\n\tthis._calcDSTSavings();\n\t\n\tif (typeof(this.offset) === 'undefined' && this.zone.o) {\n\t\tvar offsetParts = this._offsetStringToObj(this.zone.o);\n\t\t/**\n\t\t * @private\n\t\t * @type {number} raw offset from UTC without DST, in minutes\n\t\t */\n\t\tthis.offset = (Math.abs(offsetParts.h || 0) * 60 + (offsetParts.m || 0)) * MathUtils.signum(offsetParts.h || 0);\n\t}\n\t\n\tif (this.onLoad && typeof(this.onLoad) === 'function') {\n\t\tthis.onLoad(this);\n\t}\n};\n\n/** @private */\nTimeZone._marshallIds = function (country, sync, callback) {\n\tvar tz, ids = [];\n\t\n\tif (!country) {\n\t\t// local is a special zone meaning \"the local time zone according to the JS engine we are running upon\"\n\t\tids.push(\"local\");\n\t\tfor (tz in ilib.data.timezones) {\n\t\t\tif (ilib.data.timezones[tz]) {\n\t\t\t\tids.push(ilib.data.timezones[tz]);\n\t\t\t}\n\t\t}\n\t\tif (typeof(callback) === 'function') {\n\t\t\tcallback(ids);\n\t\t}\n\t} else {\n\t\tif (!ilib.data.zoneinfo.zonetab) {\n\t\t\tUtils.loadData({\n\t\t\t\tobject: TimeZone, \n\t\t\t\tnonlocale: true,\t// locale independent \n\t\t\t\tname: \"zoneinfo/zonetab.json\", \n\t\t\t\tsync: sync, \n\t\t\t\tcallback: ilib.bind(this, function (tzdata) {\n\t\t\t\t\tif (tzdata) {\n\t\t\t\t\t\tilib.data.zoneinfo.zonetab = tzdata;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tids = ilib.data.zoneinfo.zonetab[country];\n\t\t\t\t\t\n\t\t\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\t\t\tcallback(ids);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t} else {\n\t\t\tids = ilib.data.zoneinfo.zonetab[country];\n\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\tcallback(ids);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn ids;\n};\n\n/**\n * Return an array of available zone ids that the constructor knows about.\n * The country parameter is optional. If it is not given, all time zones will\n * be returned. If it specifies a country code, then only time zones for that\n * country will be returned.\n * \n * @param {string|undefined} country country code for which time zones are being sought\n * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)\n * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading\n * @return {Array.<string>} an array of zone id strings\n */\nTimeZone.getAvailableIds = function (country, sync, onLoad) {\n\tvar tz, ids = [];\n\t\n\tif (typeof(sync) !== 'boolean') {\n\t\tsync = true;\n\t}\n\t\n\tif (ilib.data.timezones.length === 0) {\n\t\tif (typeof(ilib._load) !== 'undefined' && typeof(ilib._load.listAvailableFiles) === 'function') {\n\t\t\tilib._load.listAvailableFiles(sync, function(hash) {\n\t\t\t\tfor (var dir in hash) {\n\t\t\t\t\tvar files = hash[dir];\n\t\t\t\t\tif (ilib.isArray(files)) {\n\t\t\t\t\t\tfiles.forEach(function (filename) {\n\t\t\t\t\t\t\tif (filename && filename.match(/^zoneinfo/)) {\n\t\t\t\t\t\t\t\tilib.data.timezones.push(filename.replace(/^zoneinfo\\//, \"\").replace(/\\.json$/, \"\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tids = TimeZone._marshallIds(country, sync, onLoad);\n\t\t\t});\n\t\t} else {\n\t\t\tfor (tz in ilib.data.zoneinfo) {\n\t\t\t\tif (ilib.data.zoneinfo[tz]) {\n\t\t\t\t\tilib.data.timezones.push(tz);\n\t\t\t\t}\n\t\t\t}\n\t\t\tids = TimeZone._marshallIds(country, sync, onLoad);\n\t\t}\n\t} else {\n\t\tids = TimeZone._marshallIds(country, sync, onLoad);\n\t}\n\t\n\treturn ids;\n};\n\n/**\n * Return the id used to uniquely identify this time zone.\n * @return {string} a unique id for this time zone\n */\nTimeZone.prototype.getId = function () {\n\treturn this.id.toString();\n};\n\n/**\n * Return the abbreviation that is used for the current time zone on the given date.\n * The date may be in DST or during standard time, and many zone names have different\n * abbreviations depending on whether or not the date is falls within DST.<p>\n * \n * There are two styles that are supported:\n * \n * <ol>\n * <li>standard - returns the 3 to 5 letter abbreviation of the time zone name such \n * as \"CET\" for \"Central European Time\" or \"PDT\" for \"Pacific Daylight Time\"\n * <li>rfc822 - returns an RFC 822 style time zone specifier, which specifies more\n * explicitly what the offset is from UTC\n * <li>long - returns the long name of the zone in English\n * </ol>\n *  \n * @param {IDate=} date a date to determine if it is in daylight time or standard time\n * @param {string=} style one of \"standard\" or \"rfc822\". Default if not specified is \"standard\"\n * @return {string} the name of the time zone, abbreviated according to the style \n */\nTimeZone.prototype.getDisplayName = function (date, style) {\n\tstyle = (this.isLocal || typeof(this.zone) === 'undefined') ? \"rfc822\" : (style || \"standard\");\n\tswitch (style) {\n\t\tdefault:\n\t\tcase 'standard':\n\t\t\tif (this.zone.f && this.zone.f !== \"zzz\") {\n\t\t\t\tif (this.zone.f.indexOf(\"{c}\") !== -1) {\n\t\t\t\t\tvar letter = \"\";\n\t\t\t\t\tletter = this.inDaylightTime(date) ? this.zone.s && this.zone.s.c : this.zone.e && this.zone.e.c; \n\t\t\t\t\tvar temp = new IString(this.zone.f);\n\t\t\t\t\treturn temp.format({c: letter || \"\"});\n\t\t\t\t}\n\t\t\t\treturn this.zone.f;\n\t\t\t} \n\t\t\tvar temp = \"GMT\" + this.zone.o;\n\t\t\tif (this.inDaylightTime(date)) {\n\t\t\t\ttemp += \"+\" + this.zone.s.v;\n\t\t\t}\n\t\t\treturn temp;\n\t\t\tbreak;\n\t\tcase 'rfc822':\n\t\t\tvar offset = this.getOffset(date), // includes the DST if applicable\n\t\t\t\tret = \"UTC\",\n\t\t\t\thour = offset.h || 0,\n\t\t\t\tminute = offset.m || 0;\n\t\t\t\n\t\t\tif (hour !== 0) {\n\t\t\t\tret += (hour > 0) ? \"+\" : \"-\";\n\t\t\t\tif (Math.abs(hour) < 10) {\n\t\t\t\t\tret += \"0\";\n\t\t\t\t}\n\t\t\t\tret += (hour < 0) ? -hour : hour;\n\t\t\t\tif (minute < 10) {\n\t\t\t\t\tret += \"0\";\n\t\t\t\t}\n\t\t\t\tret += minute;\n\t\t\t}\n\t\t\treturn ret; \n\t\tcase 'long':\n\t\t\tif (this.zone.n) {\n\t\t\t\tif (this.zone.n.indexOf(\"{c}\") !== -1) {\n\t\t\t\t\tvar str = this.inDaylightTime(date) ? \"Daylight\" : \"Standard\"; \n\t\t\t\t\tvar temp = new IString(this.zone.n);\n\t\t\t\t\treturn temp.format({c: str || \"\"});\n\t\t\t\t}\n\t\t\t\treturn this.zone.n;\n\t\t\t}\n\t\t\tvar temp = \"GMT\" + this.zone.o;\n\t\t\tif (this.inDaylightTime(date)) {\n\t\t\t\ttemp += \"+\" + this.zone.s.v;\n\t\t\t}\n\t\t\treturn temp;\n\t\t\tbreak;\n\t}\n};\n\n/**\n * Convert the offset string to an object with an h, m, and possibly s property\n * to indicate the hours, minutes, and seconds.\n * \n * @private\n * @param {string} str the offset string to convert to an object\n * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset for the zone at \n * the given date/time, in hours, minutes, and seconds\n */\nTimeZone.prototype._offsetStringToObj = function (str) {\n\tvar offsetParts = (typeof(str) === 'string') ? str.split(\":\") : [],\n\t\tret = {h:0},\n\t\ttemp;\n\t\n\tif (offsetParts.length > 0) {\n\t\tret.h = parseInt(offsetParts[0], 10);\n\t\tif (offsetParts.length > 1) {\n\t\t\ttemp = parseInt(offsetParts[1], 10);\n\t\t\tif (temp) {\n\t\t\t\tret.m = temp;\n\t\t\t}\n\t\t\tif (offsetParts.length > 2) {\n\t\t\t\ttemp = parseInt(offsetParts[2], 10);\n\t\t\t\tif (temp) {\n\t\t\t\t\tret.s = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ret;\n};\n\n/**\n * Returns the offset of this time zone from UTC at the given date/time. If daylight saving \n * time is in effect at the given date/time, this method will return the offset value \n * adjusted by the amount of daylight saving.\n * @param {IDate=} date the date for which the offset is needed\n * @return {Object.<{h:number,m:number}>} an object giving the offset for the zone at \n * the given date/time, in hours, minutes, and seconds  \n */\nTimeZone.prototype.getOffset = function (date) {\n\tif (!date) {\n\t\treturn this.getRawOffset();\n\t}\n\tvar offset = this.getOffsetMillis(date)/60000;\n\t\n\tvar hours = MathUtils.down(offset/60),\n\t\tminutes = Math.abs(offset) - Math.abs(hours)*60;\n\n\tvar ret = {\n\t\th: hours\n\t};\n\tif (minutes != 0) {\n\t\tret.m = minutes;\n\t}\n\treturn ret;\n};\n\n/**\n * Returns the offset of this time zone from UTC at the given date/time expressed in \n * milliseconds. If daylight saving \n * time is in effect at the given date/time, this method will return the offset value \n * adjusted by the amount of daylight saving. Negative numbers indicate offsets west\n * of UTC and conversely, positive numbers indicate offset east of UTC.\n *  \n * @param {IDate=} date the date for which the offset is needed, or null for the\n * present date\n * @return {number} the number of milliseconds of offset from UTC that the given date is\n */\nTimeZone.prototype.getOffsetMillis = function (date) {\n\tvar ret;\n\t\n\t// check if the dst property is defined -- the intrinsic JS Date object doesn't work so\n\t// well if we are in the overlap time at the end of DST\n\tif (this.isLocal && typeof(date.dst) === 'undefined') {\n\t\tvar d = (!date) ? new Date() : new Date(date.getTimeExtended());\n\t\treturn -d.getTimezoneOffset() * 60000;\n\t} \n\t\n\tret = this.offset;\n\t\n\tif (date && this.inDaylightTime(date)) {\n\t\tret += this.dstSavings;\n\t}\n\t\n\treturn ret * 60000;\n};\n\n/**\n * Return the offset in milliseconds when the date has an RD number in wall\n * time rather than in UTC time.\n * @protected\n * @param date the date to check in wall time\n * @returns {number} the number of milliseconds of offset from UTC that the given date is\n */\nTimeZone.prototype._getOffsetMillisWallTime = function (date) {\n\tvar ret;\n\t\n\tret = this.offset;\n\t\n\tif (date && this.inDaylightTime(date, true)) {\n\t\tret += this.dstSavings;\n\t}\n\t\n\treturn ret * 60000;\n};\n\n/**\n * Returns the offset of this time zone from UTC at the given date/time. If daylight saving \n * time is in effect at the given date/time, this method will return the offset value \n * adjusted by the amount of daylight saving.\n * @param {IDate=} date the date for which the offset is needed\n * @return {string} the offset for the zone at the given date/time as a string in the \n * format \"h:m:s\" \n */\nTimeZone.prototype.getOffsetStr = function (date) {\n\tvar offset = this.getOffset(date),\n\t\tret;\n\t\n\tret = offset.h;\n\tif (typeof(offset.m) !== 'undefined') {\n\t\tret += \":\" + offset.m;\n\t\tif (typeof(offset.s) !== 'undefined') {\n\t\t\tret += \":\" + offset.s;\n\t\t}\n\t} else {\n\t\tret += \":0\";\n\t}\n\t\n\treturn ret;\n};\n\n/**\n * Gets the offset from UTC for this time zone.\n * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset from \n * UTC for this time zone, in hours, minutes, and seconds \n */\nTimeZone.prototype.getRawOffset = function () {\n\tvar hours = MathUtils.down(this.offset/60),\n\t\tminutes = Math.abs(this.offset) - Math.abs(hours)*60;\n\t\n\tvar ret = {\n\t\th: hours\n\t};\n\tif (minutes != 0) {\n\t\tret.m = minutes;\n\t}\n\treturn ret;\n};\n\n/**\n * Gets the offset from UTC for this time zone expressed in milliseconds. Negative numbers\n * indicate zones west of UTC, and positive numbers indicate zones east of UTC.\n * \n * @return {number} an number giving the offset from \n * UTC for this time zone in milliseconds \n */\nTimeZone.prototype.getRawOffsetMillis = function () {\n\treturn this.offset * 60000;\n};\n\n/**\n * Gets the offset from UTC for this time zone without DST savings.\n * @return {string} the offset from UTC for this time zone, in the format \"h:m:s\" \n */\nTimeZone.prototype.getRawOffsetStr = function () {\n\tvar off = this.getRawOffset();\n\treturn off.h + \":\" + (off.m || \"0\");\n};\n\n/**\n * Return the amount of time in hours:minutes that the clock is advanced during\n * daylight savings time.\n * @return {Object.<{h:number,m:number,s:number}>} the amount of time that the \n * clock advances for DST in hours, minutes, and seconds \n */\nTimeZone.prototype.getDSTSavings = function () {\n\tif (this.isLocal) {\n\t\t// take the absolute because the difference in the offsets may be positive or\n\t\t// negative, depending on the hemisphere\n\t\tvar savings = Math.abs(this.offsetJan1 - this.offsetJun1);\n\t\tvar hours = MathUtils.down(savings/60),\n\t\t\tminutes = savings - hours*60;\n\t\treturn {\n\t\t\th: hours,\n\t\t\tm: minutes\n\t\t};\n\t} else if (this.zone && this.zone.s) {\n\t\treturn this._offsetStringToObj(this.zone.s.v);\t// this.zone.start.savings\n\t}\n\treturn {h:0};\n};\n\n/**\n * Return the amount of time in hours:minutes that the clock is advanced during\n * daylight savings time.\n * @return {string} the amount of time that the clock advances for DST in the\n * format \"h:m:s\"\n */\nTimeZone.prototype.getDSTSavingsStr = function () {\n\tif (this.isLocal) {\n\t\tvar savings = this.getDSTSavings();\n\t\treturn savings.h + \":\" + savings.m;\n\t} else if (typeof(this.offset) !== 'undefined' && this.zone && this.zone.s) {\n\t\treturn this.zone.s.v;\t// this.zone.start.savings\n\t}\n\treturn \"0:0\";\n};\n\n/**\n * return the rd of the start of DST transition for the given year\n * @protected\n * @param {Object} rule set of rules\n * @param {number} year year to check\n * @return {number} the rd of the start of DST for the year\n */\nTimeZone.prototype._calcRuleStart = function (rule, year) {\n\tvar type = \"=\", \n\t\tweekday = 0, \n\t\tday, \n\t\trefDay, \n\t\tcal, \n\t\thour = 0, \n\t\tminute = 0, \n\t\tsecond = 0,\n\t\ttime,\n\t\ti;\n\t\n\tif (typeof(rule.j) !== 'undefined') {\n\t\trefDay = new GregRataDie({\n\t\t\tjulianday: rule.j\n\t\t});\n\t} else {\n\t\tif (rule.r.charAt(0) == 'l' || rule.r.charAt(0) == 'f') {\n\t\t\tcal = CalendarFactory({type: \"gregorian\"});\n\t\t\ttype = rule.r.charAt(0);\n\t\t\tweekday = parseInt(rule.r.substring(1), 10);\n\t\t\tday = (type === 'l') ? cal.getMonLength(rule.m, year) : 1;\n\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + \n\t\t\t//\t\t(rule.r.charAt(0) == 'f' ? \"first \" : \"last \") + weekday + \n\t\t\t//\t\t\" of month \" + rule.m);\n\t\t} else {\n\t\t\ti = rule.r.indexOf('<');\n\t\t\tif (i == -1) {\n\t\t\t\ti = rule.r.indexOf('>');\n\t\t\t}\n\t\t\t\n\t\t\tif (i != -1) {\n\t\t\t\ttype = rule.r.charAt(i);\n\t\t\t\tweekday = parseInt(rule.r.substring(0, i), 10);\n\t\t\t\tday = parseInt(rule.r.substring(i+1), 10); \n\t\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + weekday + \n\t\t\t\t//\t\ttype + day + \" of month \" + rule.m);\n\t\t\t} else {\n\t\t\t\tday = parseInt(rule.r, 10);\n\t\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + day + \" of month \" + rule.m);\n\t\t\t}\n\t\t}\n\t\n\t\tif (rule.t) {\n\t\t\ttime = rule.t.split(\":\");\n\t\t\thour = parseInt(time[0], 10);\n\t\t\tif (time.length > 1) {\n\t\t\t\tminute = parseInt(time[1], 10);\n\t\t\t\tif (time.length > 2) {\n\t\t\t\t\tsecond = parseInt(time[2], 10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//console.log(\"calculating rd of \" + year + \"/\" + rule.m + \"/\" + day);\n\t\trefDay = new GregRataDie({\n\t\t\tyear: year, \n\t\t\tmonth: rule.m, \n\t\t\tday: day, \n\t\t\thour: hour, \n\t\t\tminute: minute, \n\t\t\tsecond: second\n\t\t});\n\t}\n\t//console.log(\"refDay is \" + JSON.stringify(refDay));\n\tvar d = refDay.getRataDie();\n\t\n\tswitch (type) {\n\t\tcase 'l':\n\t\tcase '<':\n\t\t\t//console.log(\"returning \" + refDay.onOrBefore(rd, weekday));\n\t\t\td = refDay.onOrBefore(weekday); \n\t\t\tbreak;\n\t\tcase 'f':\n\t\tcase '>':\n\t\t\t//console.log(\"returning \" + refDay.onOrAfterRd(rd, weekday));\n\t\t\td = refDay.onOrAfter(weekday); \n\t\t\tbreak;\n\t}\n\treturn d;\n};\n\n/**\n * @private\n */\nTimeZone.prototype._calcDSTSavings = function () {\n\tvar saveParts = this.getDSTSavings();\n\t\n\t/**\n\t * @private\n\t * @type {number} savings in minutes when DST is in effect \n\t */\n\tthis.dstSavings = (Math.abs(saveParts.h || 0) * 60 + (saveParts.m || 0)) * MathUtils.signum(saveParts.h || 0);\n};\n\n/**\n * @private\n */\nTimeZone.prototype._getDSTStartRule = function (year) {\n\t// TODO: update this when historic/future zones are supported\n\treturn this.zone.s;\n};\n\n/**\n * @private\n */\nTimeZone.prototype._getDSTEndRule = function (year) {\n\t// TODO: update this when historic/future zones are supported\n\treturn this.zone.e;\n};\n\n/**\n * Returns whether or not the given date is in daylight saving time for the current\n * zone. Note that daylight savings time is observed for the summer. Because\n * the seasons are reversed, daylight savings time in the southern hemisphere usually\n * runs from the end of the year through New Years into the first few months of the\n * next year. This method will correctly calculate the start and end of DST for any\n * location.\n * \n * @param {IDate=} date a date for which the info about daylight time is being sought,\n * or undefined to tell whether we are currently in daylight savings time\n * @param {boolean=} wallTime if true, then the given date is in wall time. If false or\n * undefined, it is in the usual UTC time.\n * @return {boolean} true if the given date is in DST for the current zone, and false\n * otherwise.\n */\nTimeZone.prototype.inDaylightTime = function (date, wallTime) {\n\tvar rd, startRd, endRd, year;\n\n\tif (this.isLocal) {\n\t\t// check if the dst property is defined -- the intrinsic JS Date object doesn't work so\n\t\t// well if we are in the overlap time at the end of DST, so we have to work around that\n\t\t// problem by adding in the savings ourselves\n\t\tvar offset = 0;\n\t\tif (typeof(date.dst) !== 'undefined' && !date.dst) {\n\t\t\toffset = this.dstSavings * 60000;\n\t\t}\n\t\t\n\t\tvar d = new Date(date ? date.getTimeExtended() + offset: undefined);\n\t\t// the DST offset is always the one that is closest to positive infinity, no matter \n\t\t// if you are in the northern or southern hemisphere, east or west\n\t\tvar dst = Math.max(this.offsetJan1, this.offsetJun1);\n\t\treturn (-d.getTimezoneOffset() === dst);\n\t}\n\t\n\tif (!date || !date.cal || date.cal.type !== \"gregorian\") {\n\t\t// convert to Gregorian so that we can tell if it is in DST or not\n\t\tvar time = date && typeof(date.getTimeExtended) === 'function' ? date.getTimeExtended() : undefined;\n\t\trd = new GregRataDie({unixtime: time}).getRataDie();\n\t\tyear = new Date(time).getUTCFullYear();\n\t} else {\n\t\trd = date.rd.getRataDie();\n\t\tyear = date.year;\n\t}\n\t// rd should be a Gregorian RD number now, in UTC\n\t\n\t// if we aren't using daylight time in this zone for the given year, then we are \n\t// not in daylight time\n\tif (!this.useDaylightTime(year)) {\n\t\treturn false;\n\t}\n\t\n\t// these calculate the start/end in local wall time\n\tvar startrule = this._getDSTStartRule(year);\n\tvar endrule = this._getDSTEndRule(year);\n\tstartRd = this._calcRuleStart(startrule, year);\n\tendRd = this._calcRuleStart(endrule, year);\n\t\n\tif (wallTime) {\n\t\t// rd is in wall time, so we have to make sure to skip the missing time\n\t\t// at the start of DST when standard time ends and daylight time begins\n\t\tstartRd += this.dstSavings/1440;\n\t} else {\n\t\t// rd is in UTC, so we have to convert the start/end to UTC time so \n\t\t// that they can be compared directly to the UTC rd number of the date\n\t\t\n\t\t// when DST starts, time is standard time already, so we only have\n\t\t// to subtract the offset to get to UTC and not worry about the DST savings\n\t\tstartRd -= this.offset/1440;  \n\t\t\n\t\t// when DST ends, time is in daylight time already, so we have to\n\t\t// subtract the DST savings to get back to standard time, then the\n\t\t// offset to get to UTC\n\t\tendRd -= (this.offset + this.dstSavings)/1440;\n\t}\n\t\n\t// In the northern hemisphere, the start comes first some time in spring (Feb-Apr), \n\t// then the end some time in the fall (Sept-Nov). In the southern\n\t// hemisphere, it is the other way around because the seasons are reversed. Standard\n\t// time is still in the winter, but the winter months are May-Aug, and daylight \n\t// savings time usually starts Aug-Oct of one year and runs through Mar-May of the \n\t// next year.\n\tif (rd < endRd && endRd - rd <= this.dstSavings/1440 && typeof(date.dst) === 'boolean') {\n\t\t// take care of the magic overlap time at the end of DST\n\t\treturn date.dst;\n\t}\n\tif (startRd < endRd) {\n\t\t// northern hemisphere\n\t\treturn (rd >= startRd && rd < endRd) ? true : false;\n\t} \n\t// southern hemisphere\n\treturn (rd >= startRd || rd < endRd) ? true : false;\n};\n\n/**\n * Returns true if this time zone switches to daylight savings time at some point\n * in the year, and false otherwise.\n * @param {number} year Whether or not the time zone uses daylight time in the given year. If\n * this parameter is not given, the current year is assumed.\n * @return {boolean} true if the time zone uses daylight savings time\n */\nTimeZone.prototype.useDaylightTime = function (year) {\n\t\n\t// this zone uses daylight savings time iff there is a rule defining when to start\n\t// and when to stop the DST\n\treturn (this.isLocal && this.offsetJan1 !== this.offsetJun1) ||\n\t\t(typeof(this.zone) !== 'undefined' && \n\t\ttypeof(this.zone.s) !== 'undefined' && \n\t\ttypeof(this.zone.e) !== 'undefined');\n};\n\n/**\n * Returns the ISO 3166 code of the country for which this time zone is defined.\n * @return {string} the ISO 3166 code of the country for this zone\n */\nTimeZone.prototype.getCountry = function () {\n\treturn this.zone.c;\n};\n\nmodule.exports = TimeZone;\n","/*\n * CopticRataDie.js - Represent an RD date in the Coptic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nCopticCal.js \nJSUtils.js\nEthiopicRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar JSUtils = require(\"./JSUtils.js\");\nvar CopticCal = require(\"./CopticCal.js\");\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\n\n/**\n * @class\n * Construct a new Coptic RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n * \n * <li><i>day</i> - 1 to 30\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Coptic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends EthiopicRataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic RD date\n */\nvar CopticRataDie = function(params) {\n\tthis.cal = params && params.cal || new CopticCal();\n\tthis.rd = undefined;\n\t/**\n\t * The difference between the zero Julian day and the first Coptic date\n\t * of Friday, August 29, 284 CE Julian at 7:00am UTC. \n\t * @private\n\t * @const\n\t * @type number\n\t */\n\tthis.epoch = 1825028.5;\n\n\tvar tmp = {};\n\tif (params) {\n\t\tJSUtils.shallowCopy(params, tmp);\n\t}\n\ttmp.cal = this.cal; // override the cal parameter that may be passed in\n\tEthiopicRataDie.call(this, tmp);\n};\n\nCopticRataDie.prototype = new EthiopicRataDie();\nCopticRataDie.prototype.parent = EthiopicRataDie;\nCopticRataDie.prototype.constructor = CopticRataDie;\n\nmodule.exports = CopticRataDie;","/*\n * GregorianDate.js - Represent a date in the Gregorian calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nGregorianCal.js \nSearchUtils.js\nMathUtils.js\nLocale.js\nLocaleInfo.js \nJulianDay.js\nGregRataDie.js\nTimeZone.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar SearchUtils = require(\"./SearchUtils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar JulianDay = require(\"./JulianDay.js\");\nvar IDate = require(\"./IDate.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar GregorianCal = require(\"./GregorianCal.js\");\nvar GregRataDie = require(\"./GregRataDie.js\");\n\n/**\n * @class\n * Construct a new Gregorian date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>dst</i> - boolean used to specify whether the given time components are\n * intended to be in daylight time or not. This is only used in the overlap\n * time when transitioning from DST to standard time, and the time components are \n * ambiguous. Otherwise at all other times of the year, this flag is ignored.\n * If you specify the date using unix time (UTC) or a julian day, then the time is\n * already unambiguous and this flag does not need to be specified.\n * <p>\n * For example, in the US, the transition out of daylight savings time \n * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls \n * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as \n * \"Nov 2, 2014 1:30am\", then there are two 1:30am times in that day, and you would \n * have to give the standard flag to indicate which of those two you mean. \n * (dst=true means daylight time, dst=false means standard time).   \n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this gregorian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this gregorian date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale.\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date\n */\nvar GregorianDate = function(params) {\n\tthis.cal = new GregorianCal();\n\tthis.timezone = \"local\";\n\n\tif (params) {\n\t\tif (typeof(params.noinstance) === 'boolean' && params.noinstance) {\n\t\t\t// for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\n\t\t\treturn;\n\t\t}\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone(); \n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone.toString();\n\t\t}\n\t\t\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\t\t\tthis.rd = this.newRd(params);\n\t\t\t\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tthis.offset = 0;\n\t\t\tif (this.timezone === \"local\" && typeof(params.dst) === 'undefined') {\n\t\t\t\t// if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean\n\t\t\t\t// in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this\n\t\t\t\t// case, use the ilib calculations below, which can distinguish between the two properly\n\t\t\t\tvar d = new Date(this.year, this.month-1, this.day, this.hour, this.minute, this.second, this.millisecond);\n\t\t\t\tthis.offset = -d.getTimezoneOffset() / 1440;\n\t\t\t} else {\n\t\t\t\tif (!this.tz) {\n\t\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t\t}\n\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t\t// what the offset is at that point in the year\n\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\t}\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} \n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nGregorianDate.prototype = new IDate({noinstance: true});\nGregorianDate.prototype.parent = IDate;\nGregorianDate.prototype.constructor = GregorianDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @private\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nGregorianDate.prototype.newRd = function (params) {\n\treturn new GregRataDie(params);\n};\n\n/**\n * Calculates the Gregorian year for a given rd number.\n * @private\n * @static\n */\nGregorianDate._calcYear = function(rd) {\n\tvar days400,\n\t\tdays100,\n\t\tdays4,\n\t\tyears400,\n\t\tyears100,\n\t\tyears4,\n\t\tyears1,\n\t\tyear;\n\n\tyears400 = Math.floor((rd - 1) / 146097);\n\tdays400 = MathUtils.mod((rd - 1), 146097);\n\tyears100 = Math.floor(days400 / 36524);\n\tdays100 = MathUtils.mod(days400, 36524);\n\tyears4 = Math.floor(days100 / 1461);\n\tdays4 = MathUtils.mod(days100, 1461);\n\tyears1 = Math.floor(days4 / 365);\n\t\n\tyear = 400 * years400 + 100 * years100 + 4 * years4 + years1;\n\tif (years100 !== 4 && years1 !== 4) {\n\t\tyear++;\n\t}\n\treturn year;\n};\n\n/**\n * @private\n */\nGregorianDate.prototype._calcYear = function(rd) {\n\treturn GregorianDate._calcYear(rd);\n};\n\n/**\n * Calculate the date components for the current time zone\n * @private\n */\nGregorianDate.prototype._calcDateComponents = function () {\n\tif (this.timezone === \"local\" && this.rd.getRataDie() >= -99280837 && this.rd.getRataDie() <= 100719163) {\n\t\t// console.log(\"using js Date to calculate offset\");\n\t\t// use the intrinsic JS Date object to do the tz conversion for us, which \n\t\t// guarantees that it follows the system tz database settings \n\t\tvar d = new Date(this.rd.getTimeExtended());\n\t\n\t\t/**\n\t\t * Year in the Gregorian calendar.\n\t\t * @type number\n\t\t */\n\t\tthis.year = d.getFullYear();\n\t\t\n\t\t/**\n\t\t * The month number, ranging from 1 (January) to 12 (December).\n\t\t * @type number\n\t\t */\n\t\tthis.month = d.getMonth()+1;\n\t\t\n\t\t/**\n\t\t * The day of the month. This ranges from 1 to 31.\n\t\t * @type number\n\t\t */\n\t\tthis.day = d.getDate();\n\t\t\n\t\t/**\n\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t * stored unambiguously in the 24-hour clock.\n\t\t * @type number\n\t\t */\n\t\tthis.hour = d.getHours();\n\t\t\n\t\t/**\n\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t * @type number\n\t\t */\n\t\tthis.minute = d.getMinutes();\n\t\t\n\t\t/**\n\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t * @type number\n\t\t */\n\t\tthis.second = d.getSeconds();\n\t\t\n\t\t/**\n\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t * @type number\n\t\t */\n\t\tthis.millisecond = d.getMilliseconds();\n\t\t\n\t\tthis.offset = -d.getTimezoneOffset() / 1440;\n\t} else {\n\t\t// console.log(\"using ilib to calculate offset. tz is \" + this.timezone);\n\t\t// console.log(\"GregDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\t\tif (typeof(this.offset) === \"undefined\") {\n\t\t\t// console.log(\"calculating offset\");\n\t\t\tthis.year = this._calcYear(this.rd.getRataDie());\n\t\t\t\n\t\t\t// now offset the RD by the time zone, then recalculate in case we were \n\t\t\t// near the year boundary\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t\t// } else {\n\t\t\t// console.log(\"offset is already defined somehow. type is \" + typeof(this.offset));\n\t\t\t// console.trace(\"Stack is this one\");\n\t\t}\n\t\t// console.log(\"offset is \" + this.offset);\n\t\tvar rd = this.rd.getRataDie();\n\t\tif (this.offset !== 0) {\n\t\t\trd += this.offset;\n\t\t}\n\t\tthis.year = this._calcYear(rd);\n\t\t\n\t\tvar yearStartRd = this.newRd({\n\t\t\tyear: this.year,\n\t\t\tmonth: 1,\n\t\t\tday: 1,\n\t\t\tcal: this.cal\n\t\t});\n\t\t\n\t\t// remainder is days into the year\n\t\tvar remainder = rd - yearStartRd.getRataDie() + 1;\n\t\t\n\t\tvar cumulative = GregorianCal.prototype.isLeapYear.call(this.cal, this.year) ? \n\t\t\tGregRataDie.cumMonthLengthsLeap : \n\t\t\tGregRataDie.cumMonthLengths; \n\t\t\n\t\tthis.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\n\t\tremainder = remainder - cumulative[this.month-1];\n\t\t\n\t\tthis.day = Math.floor(remainder);\n\t\tremainder -= this.day;\n\t\t// now convert to milliseconds for the rest of the calculation\n\t\tremainder = Math.round(remainder * 86400000);\n\t\t\n\t\tthis.hour = Math.floor(remainder/3600000);\n\t\tremainder -= this.hour * 3600000;\n\t\t\n\t\tthis.minute = Math.floor(remainder/60000);\n\t\tremainder -= this.minute * 60000;\n\t\t\n\t\tthis.second = Math.floor(remainder/1000);\n\t\tremainder -= this.second * 1000;\n\t\t\n\t\tthis.millisecond = Math.floor(remainder);\n\t}\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nGregorianDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn MathUtils.mod(rd, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and \n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nGregorianDate.prototype.getDayOfYear = function() {\n\tvar cumulativeMap = this.cal.isLeapYear(this.year) ? \n\t\tGregRataDie.cumMonthLengthsLeap : \n\t\tGregRataDie.cumMonthLengths; \n\t\t\n\treturn cumulativeMap[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Gregorian \n * calendars is -1 for \"before the common era\" (BCE) and 1 for \"the common era\" (CE). \n * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar, \n * there is a year 0, so any years that are negative or zero are BCE. In the Julian\n * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to \n * 1.\n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\nGregorianDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nGregorianDate.prototype.getCalendar = function() {\n\treturn \"gregorian\";\n};\n\n// register with the factory method\nIDate._constructors[\"gregorian\"] = GregorianDate;\n\nmodule.exports = GregorianDate;","/*\n * EthiopicDate.js - Represent a date in the Ethiopic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nEthiopicCal.js \nMathUtils.js\nLocale.js\nLocaleInfo.js \nTimeZone.js\nEthiopicRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar IDate = require(\"./IDate.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar Calendar = require(\"./Calendar.js\");\nvar EthiopicCal = require(\"./EthiopicCal.js\");\n\n/**\n * @class\n * Construct a new date object for the Ethiopic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this ethiopic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *  \n * If called with another Ethiopic date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic date\n */\nvar EthiopicDate = function(params) {\n\tthis.cal = new EthiopicCal();\n\t\n\tif (params) {\n\t\tif (typeof(params.noinstance) === 'boolean' && params.noinstance) {\n\t\t\t// for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\n\t\t\treturn;\n\t\t}\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone(); \n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t\t\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Ethiopic calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 (Maskaram) to 13 (Paguemen).\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 366.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\t\t\t\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\t\t\t\n\t\t\tthis.rd = this.newRd(this);\n\t\t\t\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nEthiopicDate.prototype = new IDate({ noinstance: true });\nEthiopicDate.prototype.parent = IDate;\nEthiopicDate.prototype.constructor = EthiopicDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nEthiopicDate.prototype.newRd = function (params) {\n\treturn new EthiopicRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\nEthiopicDate.prototype._calcYear = function(rd) {\n\tvar year = Math.floor((4*(Math.floor(rd)-1) + 1463)/1461);\n\t\n\treturn year;\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nEthiopicDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\tcumulative,\n\t\trd = this.rd.getRataDie();\n\t\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\t\t\n\t\t// now offset the RD by the time zone, then recalculate in case we were \n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\t\n\tvar jan1 = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd + 1 - jan1.getRataDie();\n\t\n\tthis.month = Math.floor((remainder-1)/30) + 1;\n\tremainder = remainder - (this.month-1) * 30;\n\t\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\t\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\t\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\t\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\t\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nEthiopicDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn MathUtils.mod(rd-4, 7);\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nEthiopicDate.prototype.getCalendar = function() {\n\treturn \"ethiopic\";\n};\n\n//register with the factory method\nIDate._constructors[\"ethiopic\"] = EthiopicDate;\n\nmodule.exports = EthiopicDate;\n","/*\n * HebrewDate.js - Represent a date in the Hebrew calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nLocaleInfo.js\nTimeZone.js\nIDate.js\nMathUtils.js\nCalendar.js\nHebrewCal.js\nHebrewRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar IDate = require(\"./IDate.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar HebrewCal = require(\"./HebrewCal.js\");\nvar HebrewRataDie = require(\"./HebrewRataDie.js\");\n\n/**\n * @class\n * Construct a new civil Hebrew date object. The constructor can be called\n * with a params object that can contain the following properties:<p>\n * \n * <ul>\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\n * <li><i>month</i> - 1 to 12, where 1 means Nisan, 2 means Iyyar, etc.\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \n * the parts or specify the minutes, seconds, and milliseconds, but not both. \n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond</i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n * \n * If called with another Hebrew date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>julianday</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew date\n */\nvar HebrewDate = function(params) {\n\tthis.cal = new HebrewCal();\n\t\n\tif (params) {\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tif (!this.timezone) {\n\t\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\t\tthis.timezone = li.getTimeZone(); \n\t\t\t}\n\t\t}\n\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond || params.parts ) {\n\t\t\t/**\n\t\t\t * Year in the Hebrew calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 to 13.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\tif (typeof(params.parts) !== 'undefined') {\n\t\t\t\t/**\n\t\t\t\t * The parts (halaqim) of the hour. This can be a number from 0 to 1079.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.parts = parseInt(params.parts, 10);\n\t\t\t\tvar seconds = parseInt(params.parts, 10) * 3.333333333333;\n\t\t\t\tthis.minute = Math.floor(seconds / 60);\n\t\t\t\tseconds -= this.minute * 60;\n\t\t\t\tthis.second = Math.floor(seconds);\n\t\t\t\tthis.millisecond = (seconds - this.second);\t\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\n\t\t\t\t/**\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\n\t\t\t\t/**\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t}\n\t\t\t\t\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 383.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\t\t\t\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\t\t\t\n\t\t\tthis.rd = this.newRd(this);\n\t\t\t\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} \n\t\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nHebrewDate.prototype = new IDate({noinstance: true});\nHebrewDate.prototype.parent = IDate;\nHebrewDate.prototype.constructor = HebrewDate;\n\n/**\n * the cumulative lengths of each month for a non-leap year, without new years corrections,\n * that can be used in reverse to map days to months\n * @private\n * @const\n * @type Array.<number>\n */\nHebrewDate.cumMonthLengthsReverse = [\n//  [days, monthnumber],                                                \n\t[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t[30,  8],  /* Heshvan */\n\t[59,  9],  /* Kislev */\n\t[88,  10], /* Teveth */\n\t[117, 11], /* Shevat */\n\t[147, 12], /* Adar I */\n\t[176, 1],  /* Nisan */\n\t[206, 2],  /* Iyyar */\n\t[235, 3],  /* Sivan */\n\t[265, 4],  /* Tammuz */\n\t[294, 5],  /* Av */\n\t[324, 6],  /* Elul */\n\t[354, 7]   /* end of year sentinel value */\n];\n\n/**\n * the cumulative lengths of each month for a leap year, without new years corrections\n * that can be used in reverse to map days to months \n * \n * @private\n * @const\n * @type Array.<number>\n */\nHebrewDate.cumMonthLengthsLeapReverse = [\n//  [days, monthnumber],                                                \n\t[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t[30,  8],  /* Heshvan */\n\t[59,  9],  /* Kislev */\n\t[88,  10], /* Teveth */\n\t[117, 11], /* Shevat */\n\t[147, 12], /* Adar I */\n\t[177, 13], /* Adar II */\n\t[206, 1],  /* Nisan */\n\t[236, 2],  /* Iyyar */\n\t[265, 3],  /* Sivan */\n\t[295, 4],  /* Tammuz */\n\t[324, 5],  /* Av */\n\t[354, 6],  /* Elul */\n\t[384, 7]   /* end of year sentinel value */\n];\n\n/**\n * Number of days difference between RD 0 of the Hebrew calendar \n * (Jan 1, 1 Gregorian = JD 1721057.5) and RD 0 of the Hebrew calendar\n * (September 7, -3760 Gregorian = JD 347997.25)\n * @private\n * @const\n * @type number\n */\nHebrewDate.GregorianDiff = 1373060.25;\n\n/**\n * Return a new RD for this date type using the given params.\n * @private\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nHebrewDate.prototype.newRd = function (params) {\n\treturn new HebrewRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\nHebrewDate.prototype._calcYear = function(rd) {\n\tvar year, approximation, nextNewYear;\n\t\n\t// divide by the average number of days per year in the Hebrew calendar\n\t// to approximate the year, then tweak it to get the real year\n\tapproximation = Math.floor(rd / 365.246822206) + 1;\n\t\n\t// console.log(\"HebrewDate._calcYear: approx is \" + approximation);\n\t\n\t// search forward from approximation-1 for the year that actually contains this rd\n\tyear = approximation;\n\tnextNewYear = HebrewCal.newYear(year);\n\twhile (rd >= nextNewYear) {\n\t\tyear++;\n\t\tnextNewYear = HebrewCal.newYear(year);\n\t}\n\treturn year - 1;\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nHebrewDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\ti,\n\t\ttable,\n\t\ttarget,\n\t\trd = this.rd.getRataDie();\n\t\n\t// console.log(\"HebrewDate.calcComponents: calculating for rd \" + rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\t\t\n\t\t// now offset the RD by the time zone, then recalculate in case we were \n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\t\n\t// console.log(\"HebrewDate.calcComponents: year is \" + this.year + \" with starting rd \" + thisNewYear);\n\t\n\tremainder = rd - HebrewCal.newYear(this.year);\n\t// console.log(\"HebrewDate.calcComponents: remainder is \" + remainder);\n\n\t// take out new years corrections so we get the right month when we look it up in the table\n\tif (remainder >= 59) {\n\t\tif (remainder >= 88) {\n\t\t\tif (HebrewCal.longKislev(this.year)) {\n\t\t\t\tremainder--;\n\t\t\t}\n\t\t}\n\t\tif (HebrewCal.longHeshvan(this.year)) {\n\t\t\tremainder--;\n\t\t}\n\t}\n\t\n\t// console.log(\"HebrewDate.calcComponents: after new years corrections, remainder is \" + remainder);\n\t\n\ttable = this.cal.isLeapYear(this.year) ? \n\t\t\tHebrewDate.cumMonthLengthsLeapReverse :\n\t\t\tHebrewDate.cumMonthLengthsReverse;\n\t\n\ti = 0;\n\ttarget = Math.floor(remainder);\n\twhile (i+1 < table.length && target >= table[i+1][0]) {\n\t\ti++;\n\t}\n\t\n\tthis.month = table[i][1];\n\t// console.log(\"HebrewDate.calcComponents: remainder is \" + remainder);\n\tremainder -= table[i][0];\n\t\n\t// console.log(\"HebrewDate.calcComponents: month is \" + this.month + \" and remainder is \" + remainder);\n\t\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\tthis.day++; // days are 1-based\n\t\n\t// console.log(\"HebrewDate.calcComponents: day is \" + this.day + \" and remainder is \" + remainder);\n\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\t\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\t\n\t// the hours from 0 to 6 are actually 18:00 to midnight of the previous\n\t// gregorian day, so we have to adjust for that\n\tif (this.hour >= 6) {\n\t\tthis.hour -= 6;\n\t} else {\n\t\tthis.hour += 18;\n\t}\n\t\t\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\t\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\t\n\tthis.millisecond = Math.floor(remainder);\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nHebrewDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn MathUtils.mod(rd+1, 7);\n};\n\n/**\n * Get the Halaqim (parts) of an hour. There are 1080 parts in an hour, which means\n * each part is 3.33333333 seconds long. This means the number returned may not\n * be an integer.\n * \n * @return {number} the halaqim parts of the current hour\n */\nHebrewDate.prototype.getHalaqim = function() {\n\tif (this.parts < 0) {\n\t\t// convert to ms first, then to parts\n\t\tvar h = this.minute * 60000 + this.second * 1000 + this.millisecond;\n\t\tthis.parts = (h * 0.0003);\n\t}\n\treturn this.parts;\n};\n\n/**\n * Return the rd number of the first Sunday of the given ISO year.\n * @protected\n * @return the rd of the first Sunday of the ISO year\n */\nHebrewDate.prototype.firstSunday = function (year) {\n\tvar tishri1 = this.newRd({\n\t\tyear: year,\n\t\tmonth: 7,\n\t\tday: 1,\n\t\thour: 18,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0,\n\t\tcal: this.cal\n\t});\n\tvar firstThu = this.newRd({\n\t\trd: tishri1.onOrAfter(4),\n\t\tcal: this.cal\n\t});\n\treturn firstThu.before(0);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 385, regardless of months or weeks, etc. That is, Tishri 1st is day 1, and \n * Elul 29 is 385 for a leap year with a long Heshvan and long Kislev.\n * @return {number} the ordinal day of the year\n */\nHebrewDate.prototype.getDayOfYear = function() {\n\tvar table = this.cal.isLeapYear(this.year) ? \n\t\t\t\tHebrewRataDie.cumMonthLengthsLeap : \n\t\t\t\tHebrewRataDie.cumMonthLengths;\n\tvar days = table[this.month-1];\n\tif ((this.month < 7 || this.month > 8) && HebrewCal.longHeshvan(this.year)) {\n\t\tdays++;\n\t}\n\tif ((this.month < 7 || this.month > 9) && HebrewCal.longKislev(this.year)) {\n\t\tdays++;\n\t}\n\n\treturn days + this.day;\n};\n\n/**\n * Return the ordinal number of the week within the month. The first week of a month is\n * the first one that contains 4 or more days in that month. If any days precede this\n * first week, they are marked as being in week 0. This function returns values from 0\n * through 6.<p>\n * \n * The locale is a required parameter because different locales that use the same \n * Hebrew calendar consider different days of the week to be the beginning of\n * the week. This can affect the week of the month in which some days are located.\n * \n * @param {Locale|string} locale the locale or locale spec to use when figuring out \n * the first day of the week\n * @return {number} the ordinal number of the week within the current month\n */\nHebrewDate.prototype.getWeekOfMonth = function(locale) {\n\tvar li = new LocaleInfo(locale),\n\t\tfirst = this.newRd({\n\t\t\tyear: this.year,\n\t\t\tmonth: this.month,\n\t\t\tday: 1,\n\t\t\thour: 18,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisecond: 0\n\t\t}),\n\t\trd = this.rd.getRataDie(),\n\t\tweekStart = first.onOrAfter(li.getFirstDayOfWeek());\n\t\n\tif (weekStart - first.getRataDie() > 3) {\n\t\t// if the first week has 4 or more days in it of the current month, then consider\n\t\t// that week 1. Otherwise, it is week 0. To make it week 1, move the week start\n\t\t// one week earlier.\n\t\tweekStart -= 7;\n\t}\n\treturn (rd < weekStart) ? 0 : Math.floor((rd - weekStart) / 7) + 1;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Hebrew \n * calendars is -1 for \"before the Hebrew era\" and 1 for \"the Hebrew era\". \n * Hebrew era dates are any date after Tishri 1, 1, which is the same as\n * September 7, 3760 BC in the Gregorian calendar. \n * \n * @return {number} 1 if this date is in the Hebrew era, -1 if it is before the \n * Hebrew era \n */\nHebrewDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nHebrewDate.prototype.getCalendar = function() {\n\treturn \"hebrew\";\n};\n\n// register with the factory method\nIDate._constructors[\"hebrew\"] = HebrewDate;\n\nmodule.exports = HebrewDate;\n","/*\n * islamicDate.js - Represent a date in the Islamic calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nLocaleInfo.js\nTimeZone.js\nIDate.js\nMathUtils.js\nSearchUtils.js\nCalendar.js\nIslamicCal.js\nIslamicRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar SearchUtils = require(\"./SearchUtils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar IDate = require(\"./IDate.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar IslamicRataDie = require(\"./IslamicRataDie.js\");\nvar IslamicCal = require(\"./IslamicCal.js\");\n\n/**\n * @class\n * Construct a new civil Islamic date object. The constructor can be called\n * with a params object that can contain the following properties:<p>\n * \n * <ul>\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\n * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond</i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n * \n * If called with another Islamic date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>julianday</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date\n */\nvar IslamicDate = function(params) {\n\tthis.cal = new IslamicCal();\n\t\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone(); \n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t\t\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Islamic calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 to 12 (December).\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 355.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\t\t\t\n\t\t\tthis.rd = this.newRd(this);\n\t\t\t\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nIslamicDate.prototype = new IDate({noinstance: true});\nIslamicDate.prototype.parent = IDate;\nIslamicDate.prototype.constructor = IslamicDate;\n\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\nIslamicDate.cumMonthLengths = [\n\t0,  /* Muharram */\n\t30,  /* Saffar */\n\t59,  /* Rabi'I */\n\t89,  /* Rabi'II */\n\t118,  /* Jumada I */\n\t148,  /* Jumada II */\n\t177,  /* Rajab */\n\t207,  /* Sha'ban */\n\t236,  /* Ramadan */\n\t266,  /* Shawwal */\n\t295,  /* Dhu al-Qa'da */\n\t325,  /* Dhu al-Hijja */\n\t354\n];\n\n/**\n * Number of days difference between RD 0 of the Gregorian calendar and\n * RD 0 of the Islamic calendar. \n * @private\n * @const\n * @type number\n */\nIslamicDate.GregorianDiff = 227015;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nIslamicDate.prototype.newRd = function (params) {\n\treturn new IslamicRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\nIslamicDate.prototype._calcYear = function(rd) {\n\treturn Math.floor((30 * rd + 10646) / 10631);\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nIslamicDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\trd = this.rd.getRataDie();\n\t\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\t\t\n\t\t// now offset the RD by the time zone, then recalculate in case we were \n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\n\t//console.log(\"IslamicDate.calcComponent: calculating for rd \" + rd);\n\t//console.log(\"IslamicDate.calcComponent: year is \" + ret.year);\n\tvar yearStart = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd - yearStart.getRataDie() + 1;\n\t\n\tthis.dayOfYear = remainder;\n\t\n\t//console.log(\"IslamicDate.calcComponent: remainder is \" + remainder);\n\t\n\tthis.month = SearchUtils.bsearch(remainder, IslamicDate.cumMonthLengths);\n\tremainder -= IslamicDate.cumMonthLengths[this.month-1];\n\n\t//console.log(\"IslamicDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\t\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\n\t//console.log(\"IslamicDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\t\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\t\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\t\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\t\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nIslamicDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn MathUtils.mod(rd-2, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and \n * Dhu al-Hijja 29 is 354.\n * @return {number} the ordinal day of the year\n */\nIslamicDate.prototype.getDayOfYear = function() {\n\treturn IslamicDate.cumMonthLengths[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Islamic \n * calendars is -1 for \"before the Islamic era\" and 1 for \"the Islamic era\". \n * Islamic era dates are any date after Muharran 1, 1, which is the same as\n * July 16, 622 CE in the Gregorian calendar. \n * \n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\nIslamicDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nIslamicDate.prototype.getCalendar = function() {\n\treturn \"islamic\";\n};\n\n//register with the factory method\nIDate._constructors[\"islamic\"] = IslamicDate;\n\nmodule.exports = IslamicDate;","/*\n * JulianDate.js - Represent a date in the Julian calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nIDate.js \nTimeZone.js\nCalendar.js \nJulianCal.js \nSearchUtils.js \nMathUtils.js\nLocaleInfo.js \nJulianRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar SearchUtils = require(\"./SearchUtils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar IDate = require(\"./IDate.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar JulianRataDie = require(\"./JulianRataDie.js\");\nvar JulianCal = require(\"./JulianCal.js\");\n\n/**\n * @class\n * Construct a new date object for the Julian Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero \n * year which doesn't exist in the Julian calendar\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * <li><i>day</i> - 1 to 31\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n * \n * NB. The <a href=\"http://en.wikipedia.org/wiki/Julian_date\">Julian Day</a> \n * (JulianDay) object is a <i>different</i> object than a \n * <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">date in\n * the Julian calendar</a> and the two are not to be confused. The Julian Day \n * object represents time as a number of whole and fractional days since the \n * beginning of the epoch, whereas a date in the Julian \n * calendar is a regular date that signifies year, month, day, etc. using the rules\n * of the Julian calendar. The naming of Julian Days and the Julian calendar are\n * unfortunately close, and come from history.<p>\n *  \n * If called with another Julian date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian date\n */\nvar JulianDate = function(params) {\n\tthis.cal = new JulianCal();\n\t\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone(); \n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t\t\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Julian calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 (January) to 12 (December).\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 31.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 383.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\t\t\t\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\t\t\t\n\t\t\tthis.rd = this.newRd(this);\n\t\t\t\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nJulianDate.prototype = new IDate({noinstance: true});\nJulianDate.prototype.parent = IDate;\nJulianDate.prototype.constructor = JulianDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nJulianDate.prototype.newRd = function (params) {\n\treturn new JulianRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\nJulianDate.prototype._calcYear = function(rd) {\n\tvar year = Math.floor((4*(Math.floor(rd)-1) + 1464)/1461);\n\t\n\treturn (year <= 0) ? year - 1 : year;\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nJulianDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\tcumulative,\n\t\trd = this.rd.getRataDie();\n\t\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\t\t\n\t\t// now offset the RD by the time zone, then recalculate in case we were \n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\t\n\tvar jan1 = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd + 1 - jan1.getRataDie();\n\t\n\tcumulative = this.cal.isLeapYear(this.year) ? \n\t\tJulianCal.cumMonthLengthsLeap : \n\t\tJulianCal.cumMonthLengths; \n\t\n\tthis.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\n\tremainder = remainder - cumulative[this.month-1];\n\t\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\t\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\t\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\t\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\t\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nJulianDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn MathUtils.mod(rd-2, 7);\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nJulianDate.prototype.getCalendar = function() {\n\treturn \"julian\";\n};\n\n//register with the factory method\nIDate._constructors[\"julian\"] = JulianDate;\n\nmodule.exports = JulianDate;","/*\n * PersianAlgoDate.js - Represent a date in the Persian algorithmic calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nLocaleInfo.js\nTimeZone.js\nIDate.js\nPersianAlgoCal.js \nSearchUtils.js\nMathUtils.js\nPersAlgoRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar SearchUtils = require(\"./SearchUtils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar IDate = require(\"./IDate.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\nvar PersAlgoRataDie = require(\"./PersAlgoRataDie.js\");\n\n/**\n * @class\n * \n * Construct a new Persian date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this persian date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale.\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\nvar PersianAlgoDate = function(params) {\n\tthis.cal = new PersianAlgoCal();\n\tthis.timezone = \"local\";\n\t\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone(); \n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t\t\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Persian calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 to 12\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 31.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 366.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\t\t\t\n\t\t\tthis.rd = this.newRd(this);\n\t\t\t\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nPersianAlgoDate.prototype = new IDate({noinstance: true});\nPersianAlgoDate.prototype.parent = IDate;\nPersianAlgoDate.prototype.constructor = PersianAlgoDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nPersianAlgoDate.prototype.newRd = function (params) {\n\treturn new PersAlgoRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\nPersianAlgoDate.prototype._calcYear = function(rd) {\n\tvar shiftedRd = rd - 173126;\n\tvar numberOfCycles = Math.floor(shiftedRd / 1029983);\n\tvar shiftedDayInCycle = MathUtils.mod(shiftedRd, 1029983);\n\tvar yearInCycle = (shiftedDayInCycle === 1029982) ? 2820 : Math.floor((2816 * shiftedDayInCycle + 1031337) / 1028522);\n\tvar year = 474 + 2820 * numberOfCycles + yearInCycle;\n\treturn (year > 0) ? year : year - 1;\n};\n\n/**\n * @private\n * Calculate date components for the given RD date.\n */\nPersianAlgoDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\trd = this.rd.getRataDie();\n\t\n\tthis.year = this._calcYear(rd);\n\t\n\tif (typeof(this.offset) === \"undefined\") {\n\t\t// now offset the RD by the time zone, then recalculate in case we were \n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\t\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\t\n\t//console.log(\"PersAlgoDate.calcComponent: calculating for rd \" + rd);\n\t//console.log(\"PersAlgoDate.calcComponent: year is \" + ret.year);\n\tvar yearStart = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd - yearStart.getRataDie() + 1;\n\t\n\tthis.dayOfYear = remainder;\n\t\n\t//console.log(\"PersAlgoDate.calcComponent: remainder is \" + remainder);\n\t\n\tthis.month = SearchUtils.bsearch(remainder, PersAlgoRataDie.cumMonthLengths);\n\tremainder -= PersAlgoRataDie.cumMonthLengths[this.month-1];\n\t\n\t//console.log(\"PersAlgoDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\t\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\t\n\t//console.log(\"PersAlgoDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n\t\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\t\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\t\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\t\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\t\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nPersianAlgoDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.getRataDie());\n\treturn MathUtils.mod(rd-3, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nPersianAlgoDate.prototype.getDayOfYear = function() {\n\treturn PersAlgoRataDie.cumMonthLengths[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Persian \n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno \n * persico or AP). \n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, \n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\nPersianAlgoDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nPersianAlgoDate.prototype.getCalendar = function() {\n\treturn \"persian-algo\";\n};\n\n// register with the factory method\nIDate._constructors[\"persian-algo\"] = PersianAlgoDate;\n\nmodule.exports = PersianAlgoDate;","/*\n * ThaiSolarDate.js - Represent a date in the ThaiSolar calendar\n * \n * Copyright © 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nJSUtils.js\nGregorianDate.js\nThaiSolarCal.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\nvar IDate = require(\"./IDate.js\");\n\nvar ThaiSolarCal = require(\"./ThaiSolarCal.js\");\nvar GregorianDate = require(\"./GregorianDate.js\");\nvar GregRataDie = require(\"./GregRataDie.js\");\n\n/**\n * @class\n * Construct a new Thai solar date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this Thai solar date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * </ul>\n *\n * If the constructor is called with another Thai solar date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends GregorianDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date\n */\nvar ThaiSolarDate = function(params) {\n\tvar p = params;\n\tif (params) {\n\t\t// there is 198327 days difference between the Thai solar and \n\t\t// Gregorian epochs which is equivalent to 543 years\n\t\tp = {};\n\t\tJSUtils.shallowCopy(params, p);\n\t\tif (typeof(p.year) !== 'undefined') {\n\t\t\tp.year -= 543;\t\n\t\t}\n\t\tif (typeof(p.rd) !== 'undefined') {\n\t\t\tp.rd -= 198327;\n\t\t}\n\t}\n\tthis.rd = undefined; // clear these out so that the GregorianDate constructor can set it\n\tthis.offset = undefined;\n\t//console.log(\"ThaiSolarDate.constructor: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\tGregorianDate.call(this, p);\n\tthis.cal = new ThaiSolarCal();\n\t// make sure the year is set correctly\n\tif (params && typeof(params.year) !== 'undefined') {\n\t\tthis.year = parseInt(params.year, 10);\n\t}\n};\n\nThaiSolarDate.prototype = new GregorianDate({noinstance: true});\nThaiSolarDate.prototype.parent = GregorianDate.prototype;\nThaiSolarDate.prototype.constructor = ThaiSolarDate;\n\n/**\n * the difference between a zero Julian day and the zero Thai Solar date.\n * This is some 543 years before the start of the Gregorian epoch. \n * @private\n * @const\n * @type number\n */\nThaiSolarDate.epoch = 1523097.5;\n\n/**\n * Calculate the date components for the current time zone\n * @protected\n */\nThaiSolarDate.prototype._calcDateComponents = function () {\n\t// there is 198327 days difference between the Thai solar and \n\t// Gregorian epochs which is equivalent to 543 years\n\t// console.log(\"ThaiSolarDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\tthis.parent._calcDateComponents.call(this);\n\tthis.year += 543;\n};\n\n/**\n * Return the Rata Die (fixed day) number of this date.\n * \n * @protected\n * @return {number} the rd date as a number\n */\nThaiSolarDate.prototype.getRataDie = function() {\n\t// there is 198327 days difference between the Thai solar and \n\t// Gregorian epochs which is equivalent to 543 years\n\treturn this.rd.getRataDie() + 198327;\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week before the current date that is being sought\n * @return {IDate} the date being sought\n */\nThaiSolarDate.prototype.before = function (dow) {\n\treturn new ThaiSolarDate({\n\t\trd: this.rd.before(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week after the current date that is being sought\n * @return {IDate} the date being sought\n */\nThaiSolarDate.prototype.after = function (dow) {\n\treturn new ThaiSolarDate({\n\t\trd: this.rd.after(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week on or before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week on or before the current date that is being sought\n * @return {IDate} the date being sought\n */\nThaiSolarDate.prototype.onOrBefore = function (dow) {\n\treturn new ThaiSolarDate({\n\t\trd: this.rd.onOrBefore(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week on or after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week on or after the current date that is being sought\n * @return {IDate} the date being sought\n */\nThaiSolarDate.prototype.onOrAfter = function (dow) {\n\treturn new ThaiSolarDate({\n\t\trd: this.rd.onOrAfter(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nThaiSolarDate.prototype.getCalendar = function() {\n\treturn \"thaisolar\";\n};\n\n//register with the factory method\nIDate._constructors[\"thaisolar\"] = ThaiSolarDate;\n\nmodule.exports = ThaiSolarDate;\n","/*\n * astro.js - Static functions to support astronomical calculations\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nIDate.js\nUtils.js\nMathUtils.js\nSearchUtils.js\nGregorianDate.js\nGregRataDie.js\n*/\n\n// !data astro\n\n/*\n * These routines were derived from a public domain set of JavaScript \n * functions for positional astronomy by John Walker of Fourmilab, \n * September 1999.\n */\n\nvar ilib = require(\"./ilib.js\");\nvar Utils = require(\"./Utils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar GregorianDate = require(\"./GregorianDate.js\");\nvar RataDie = require(\"./RataDie.js\");\nvar GregRataDie = require(\"./GregRataDie.js\");\n\nvar Astro = {};\n\n/**\n * Load in all the data needed for astrological calculations.\n * \n * @private\n * @param {boolean} sync\n * @param {*} loadParams\n * @param {function(*)|undefined} callback\n */\nAstro.initAstro = function(sync, loadParams, callback) {\n\tif (!ilib.data.astro) {\n\t\tUtils.loadData({\n\t\t\tname: \"astro.json\", // countries in their own language \n\t\t\tlocale: \"-\", // only need to load the root file \n\t\t\tnonLocale: true,\n\t\t\tsync: sync, \n\t\t\tloadParams: loadParams, \n\t\t\tcallback: ilib.bind(this, /** @type function() */ function(astroData) {\n\t\t\t\t/** \n\t\t\t\t * @type {{\n\t\t\t\t *  \t_EquinoxpTerms:Array.<number>, \n\t\t\t\t *  \t_JDE0tab1000:Array.<number>, \n\t\t\t\t *  \t_JDE0tab2000:Array.<number>, \n\t\t\t\t *  \t_deltaTtab:Array.<number>,\n\t\t\t\t *  \t_oterms:Array.<number>,\n\t\t\t\t *  \t_nutArgMult:Array.<number>, \n\t\t\t\t *  \t_nutArgCoeff:Array.<number>, \n\t\t\t\t *  \t_nutCoeffA:Array.<number>,\n\t\t\t\t *  \t_nutCoeffB:Array.<number>,\n\t\t\t\t *  \t_coeff19th:Array.<number>,\n\t\t\t\t *  \t_coeff18th:Array.<number>,\n\t\t\t\t *  \t_solarLongCoeff:Array.<number>, \n\t\t\t\t *  \t_solarLongMultipliers:Array.<number>, \n\t\t\t\t *  \t_solarLongAddends:Array.<number>, \n\t\t\t\t *  \t_meanMoonCoeff:Array.<number>,\n\t\t\t\t *  \t_elongationCoeff:Array.<number>,\n\t\t\t\t *  \t_solarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_lunarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_moonFromNodeCoeff:Array.<number>,\n\t\t\t\t *  \t_eCoeff:Array.<number>,\n\t\t\t\t *  \t_lunarElongationLongCoeff:Array.<number>,\n\t\t\t\t *  \t_solarAnomalyLongCoeff:Array.<number>,\n\t\t\t\t *  \t_lunarAnomalyLongCoeff:Array.<number>,\n\t\t\t\t *  \t_moonFromNodeLongCoeff:Array.<number>,\n\t\t\t\t *  \t_sineCoeff:Array.<number>,\n\t\t\t\t *  \t_nmApproxCoeff:Array.<number>,\n\t\t\t\t *  \t_nmCapECoeff:Array.<number>,\n\t\t\t\t *  \t_nmSolarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_nmLunarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_nmMoonArgumentCoeff:Array.<number>,\n\t\t\t\t *  \t_nmCapOmegaCoeff:Array.<number>,\n\t\t\t\t *  \t_nmEFactor:Array.<number>,\n\t\t\t\t *  \t_nmSolarCoeff:Array.<number>,\n\t\t\t\t *  \t_nmLunarCoeff:Array.<number>,\n\t\t\t\t *  \t_nmMoonCoeff:Array.<number>,\n\t\t\t\t *  \t_nmSineCoeff:Array.<number>,\n\t\t\t\t *  \t_nmAddConst:Array.<number>,\n\t\t\t\t *  \t_nmAddCoeff:Array.<number>,\n\t\t\t\t *  \t_nmAddFactor:Array.<number>,\n\t\t\t\t *  \t_nmExtra:Array.<number>\n\t\t\t\t *  }}\n\t\t\t\t */ \t\n\t\t\t \tilib.data.astro = astroData;\n\t\t\t\tif (callback && typeof(callback) === 'function') {\n\t\t\t\t\tcallback(astroData);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tif (callback && typeof(callback) === 'function') {\n\t\t\tcallback(ilib.data.astro);\n\t\t}\n\t}\n};\n\n/**\n * Convert degrees to radians.\n * \n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} angle in radians \n */\nAstro._dtr = function(d) {\n\treturn (d * Math.PI) / 180.0;\n};\n\n/**\n * Convert radians to degrees.\n * \n * @static\n * @protected\n * @param {number} r angle in radians\n * @return {number} angle in degrees \n */\nAstro._rtd = function(r) {\n\treturn (r * 180.0) / Math.PI;\n};\n\n/**\n * Return the cosine of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} cosine of the angle.\n */  \nAstro._dcos = function(d) {\n\treturn Math.cos(Astro._dtr(d));\n};\n\n/**\n * Return the sine of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} sine of the angle.\n */  \nAstro._dsin = function(d) {\n\treturn Math.sin(Astro._dtr(d));\n};\n\n/**\n * Return the tan of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} tan of the angle.\n */  \nAstro._dtan = function(d) {\n\treturn Math.tan(Astro._dtr(d));\n};\n\n/**\n * Range reduce angle in degrees.\n * \n * @static\n * @param {number} a angle to reduce\n * @return {number} the reduced angle  \n */\nAstro._fixangle = function(a) {\n\treturn a - 360.0 * (Math.floor(a / 360.0));\n};\n\n/**\n * Range reduce angle in radians.\n * \n * @static\n * @protected\n * @param {number} a angle to reduce\n * @return {number} the reduced angle  \n */\nAstro._fixangr = function(a) {\n\treturn a - (2 * Math.PI) * (Math.floor(a / (2 * Math.PI)));\n};\n\n/**\n * Determine the Julian Ephemeris Day of an equinox or solstice.  The \"which\" \n * argument selects the item to be computed:\n * \n * <ul>\n * <li>0   March equinox\n * <li>1   June solstice\n * <li>2   September equinox\n * <li>3   December solstice\n * </ul>\n * \n * @static\n * @protected\n * @param {number} year Gregorian year to calculate for\n * @param {number} which Which equinox or solstice to calculate\n */\nAstro._equinox = function(year, which) {\n\tvar deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;\n\n\t/*  Initialize terms for mean equinox and solstices.  We\n\t    have two sets: one for years prior to 1000 and a second\n\t    for subsequent years.  */\n\n\tif (year < 1000) {\n\t\tJDE0tab = ilib.data.astro._JDE0tab1000;\n\t\tY = year / 1000;\n\t} else {\n\t\tJDE0tab = ilib.data.astro._JDE0tab2000;\n\t\tY = (year - 2000) / 1000;\n\t}\n\n\tJDE0 = JDE0tab[which][0] + (JDE0tab[which][1] * Y)\n\t\t\t+ (JDE0tab[which][2] * Y * Y) + (JDE0tab[which][3] * Y * Y * Y)\n\t\t\t+ (JDE0tab[which][4] * Y * Y * Y * Y);\n\n\t//document.debug.log.value += \"JDE0 = \" + JDE0 + \"\\n\";\n\n\tT = (JDE0 - 2451545.0) / 36525;\n\t//document.debug.log.value += \"T = \" + T + \"\\n\";\n\tW = (35999.373 * T) - 2.47;\n\t//document.debug.log.value += \"W = \" + W + \"\\n\";\n\tdeltaL = 1 + (0.0334 * Astro._dcos(W)) + (0.0007 * Astro._dcos(2 * W));\n\t//document.debug.log.value += \"deltaL = \" + deltaL + \"\\n\";\n\n\t//  Sum the periodic terms for time T\n\n\tS = 0;\n\tj = 0;\n\tfor (i = 0; i < 24; i++) {\n\t\tS += ilib.data.astro._EquinoxpTerms[j]\n\t\t\t\t* Astro._dcos(ilib.data.astro._EquinoxpTerms[j + 1] + (ilib.data.astro._EquinoxpTerms[j + 2] * T));\n\t\tj += 3;\n\t}\n\n\t//document.debug.log.value += \"S = \" + S + \"\\n\";\n\t//document.debug.log.value += \"Corr = \" + ((S * 0.00001) / deltaL) + \"\\n\";\n\n\tJDE = JDE0 + ((S * 0.00001) / deltaL);\n\n\treturn JDE;\n};\n\n/* \n * The table of observed Delta T values at the beginning of\n * years from 1620 through 2014 as found in astro.json is taken from\n * http://www.staff.science.uu.nl/~gent0113/deltat/deltat.htm\n * and\n * ftp://maia.usno.navy.mil/ser7/deltat.data\n */\n\n/**  \n * Determine the difference, in seconds, between dynamical time and universal time.\n * \n * @static\n * @protected\n * @param {number} year to calculate the difference for\n * @return {number} difference in seconds between dynamical time and universal time  \n */\nAstro._deltat = function (year) {\n\tvar dt, f, i, t;\n\n\tif ((year >= 1620) && (year <= 2014)) {\n\t\ti = Math.floor(year - 1620);\n\t\tf = (year - 1620) - i; /* Fractional part of year */\n\t\tdt = ilib.data.astro._deltaTtab[i] + ((ilib.data.astro._deltaTtab[i + 1] - ilib.data.astro._deltaTtab[i]) * f);\n\t} else {\n\t\tt = (year - 2000) / 100;\n\t\tif (year < 948) {\n\t\t\tdt = 2177 + (497 * t) + (44.1 * t * t);\n\t\t} else {\n\t\t\tdt = 102 + (102 * t) + (25.3 * t * t);\n\t\t\tif ((year > 2000) && (year < 2100)) {\n\t\t\t\tdt += 0.37 * (year - 2100);\n\t\t\t}\n\t\t}\n\t}\n\treturn dt;\n};\n\n/**\n * Calculate the obliquity of the ecliptic for a given\n * Julian date.  This uses Laskar's tenth-degree\n * polynomial fit (J. Laskar, Astronomy and\n * Astrophysics, Vol. 157, page 68 [1986]) which is\n * accurate to within 0.01 arc second between AD 1000\n * and AD 3000, and within a few seconds of arc for\n * +/-10000 years around AD 2000.  If we're outside the\n * range in which this fit is valid (deep time) we\n * simply return the J2000 value of the obliquity, which\n * happens to be almost precisely the mean.\n * \n * @static\n * @protected\n * @param {number} jd Julian Day to calculate the obliquity for\n * @return {number} the obliquity\n */\nAstro._obliqeq = function (jd) {\n\tvar eps, u, v, i;\n\n \tv = u = (jd - 2451545.0) / 3652500.0;\n\n \teps = 23 + (26 / 60.0) + (21.448 / 3600.0);\n\n \tif (Math.abs(u) < 1.0) {\n \t\tfor (i = 0; i < 10; i++) {\n \t\t\teps += (ilib.data.astro._oterms[i] / 3600.0) * v;\n \t\t\tv *= u;\n \t\t}\n \t}\n \treturn eps;\n};\n\n/**\n * Return the position of the sun.  We return\n * intermediate values because they are useful in a\n * variety of other contexts.\n * @static\n * @protected\n * @param {number} jd find the position of sun on this Julian Day\n * @return {Object} the position of the sun and many intermediate\n * values\n */\nAstro._sunpos = function(jd) {\n\tvar ret = {}, \n\t\tT, T2, T3, Omega, epsilon, epsilon0;\n\n\tT = (jd - 2451545.0) / 36525.0;\n\t//document.debug.log.value += \"Sunpos.  T = \" + T + \"\\n\";\n\tT2 = T * T;\n\tT3 = T * T2;\n\tret.meanLongitude = Astro._fixangle(280.46646 + 36000.76983 * T + 0.0003032 * T2);\n\t//document.debug.log.value += \"ret.meanLongitude = \" + ret.meanLongitude + \"\\n\";\n\tret.meanAnomaly = Astro._fixangle(357.52911 + (35999.05029 * T) - 0.0001537 * T2 - 0.00000048 * T3);\n\t//document.debug.log.value += \"ret.meanAnomaly = \" + ret.meanAnomaly + \"\\n\";\n\tret.eccentricity = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2;\n\t//document.debug.log.value += \"e = \" + e + \"\\n\";\n\tret.equationOfCenter = ((1.914602 - 0.004817 * T - 0.000014 * T2) * Astro._dsin(ret.meanAnomaly))\n\t\t\t+ ((0.019993 - 0.000101 * T) * Astro._dsin(2 * ret.meanAnomaly))\n\t\t\t+ (0.000289 * Astro._dsin(3 * ret.meanAnomaly));\n\t//document.debug.log.value += \"ret.equationOfCenter = \" + ret.equationOfCenter + \"\\n\";\n\tret.sunLongitude = ret.meanLongitude + ret.equationOfCenter;\n\t//document.debug.log.value += \"ret.sunLongitude = \" + ret.sunLongitude + \"\\n\";\n\t//ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;\n\t//document.debug.log.value += \"ret.sunAnomaly = \" + ret.sunAnomaly + \"\\n\";\n\t// ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * Astro._dcos(ret.sunAnomaly)));\n\t//document.debug.log.value += \"ret.sunRadius = \" + ret.sunRadius + \"\\n\";\n\tOmega = 125.04 - (1934.136 * T);\n\t//document.debug.log.value += \"Omega = \" + Omega + \"\\n\";\n\tret.apparentLong = ret.sunLongitude + (-0.00569) + (-0.00478 * Astro._dsin(Omega));\n\t//document.debug.log.value += \"ret.apparentLong = \" + ret.apparentLong + \"\\n\";\n\tepsilon0 = Astro._obliqeq(jd);\n\t//document.debug.log.value += \"epsilon0 = \" + epsilon0 + \"\\n\";\n\tepsilon = epsilon0 + (0.00256 * Astro._dcos(Omega));\n\t//document.debug.log.value += \"epsilon = \" + epsilon + \"\\n\";\n\t//ret.rightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon0) * Astro._dsin(ret.sunLongitude), Astro._dcos(ret.sunLongitude))));\n\t//document.debug.log.value += \"ret.rightAscension = \" + ret.rightAscension + \"\\n\";\n\t// ret.declination = Astro._rtd(Math.asin(Astro._dsin(epsilon0) * Astro._dsin(ret.sunLongitude)));\n\t////document.debug.log.value += \"ret.declination = \" + ret.declination + \"\\n\";\n\tret.inclination = Astro._fixangle(23.4392911 - 0.013004167 * T - 0.00000016389 * T2 + 0.0000005036 * T3);\n\tret.apparentRightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon) * Astro._dsin(ret.apparentLong), Astro._dcos(ret.apparentLong))));\n\t//document.debug.log.value += \"ret.apparentRightAscension = \" + ret.apparentRightAscension + \"\\n\";\n\t//ret.apparentDeclination = Astro._rtd(Math.asin(Astro._dsin(epsilon) * Astro._dsin(ret.apparentLong)));\n\t//document.debug.log.value += \"ret.apparentDecliation = \" + ret.apparentDecliation + \"\\n\";\n\n\t// Angular quantities are expressed in decimal degrees\n\treturn ret;\n};\n\n/**\n * Calculate the nutation in longitude, deltaPsi, and obliquity, \n * deltaEpsilon for a given Julian date jd. Results are returned as an object\n * giving deltaPsi and deltaEpsilon in degrees.\n * \n * @static\n * @protected\n * @param {number} jd calculate the nutation of this Julian Day\n * @return {Object} the deltaPsi and deltaEpsilon of the nutation\n */\nAstro._nutation = function(jd) {\n\tvar i, j, \n\t\tt = (jd - 2451545.0) / 36525.0, \n\t\tt2, t3, to10, \n\t\tta = [], \n\t\tdp = 0, \n\t\tde = 0, \n\t\tang,\n\t\tret = {};\n\n\tt3 = t * (t2 = t * t);\n\n\t/*\n\t * Calculate angles. The correspondence between the elements of our array\n\t * and the terms cited in Meeus are:\n\t * \n\t * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \\Omega\n\t * \n\t */\n\n\tta[0] = Astro._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);\n\tta[1] = Astro._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);\n\tta[2] = Astro._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);\n\tta[3] = Astro._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);\n\tta[4] = Astro._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);\n\n\t/*\n\t * Range reduce the angles in case the sine and cosine functions don't do it\n\t * as accurately or quickly.\n\t */\n\n\tfor (i = 0; i < 5; i++) {\n\t\tta[i] = Astro._fixangr(ta[i]);\n\t}\n\n\tto10 = t / 10.0;\n\tfor (i = 0; i < 63; i++) {\n\t\tang = 0;\n\t\tfor (j = 0; j < 5; j++) {\n\t\t\tif (ilib.data.astro._nutArgMult[(i * 5) + j] != 0) {\n\t\t\t\tang += ilib.data.astro._nutArgMult[(i * 5) + j] * ta[j];\n\t\t\t}\n\t\t}\n\t\tdp += (ilib.data.astro._nutArgCoeff[(i * 4) + 0] + ilib.data.astro._nutArgCoeff[(i * 4) + 1] * to10) * Math.sin(ang);\n\t\tde += (ilib.data.astro._nutArgCoeff[(i * 4) + 2] + ilib.data.astro._nutArgCoeff[(i * 4) + 3] * to10) * Math.cos(ang);\n\t}\n\n\t/*\n\t * Return the result, converting from ten thousandths of arc seconds to\n\t * radians in the process.\n\t */\n\n\tret.deltaPsi = dp / (3600.0 * 10000.0);\n\tret.deltaEpsilon = de / (3600.0 * 10000.0);\n\n\treturn ret;\n};\n\n/**\n * Returns the equation of time as a fraction of a day.\n * \n * @static\n * @protected\n * @param {number} jd the Julian Day of the day to calculate for\n * @return {number} the equation of time for the given day  \n */\nAstro._equationOfTime = function(jd) {\n\tvar alpha, deltaPsi, E, epsilon, L0, tau, pos;\n\n\t// 2451545.0 is the Julian day of J2000 epoch\n\t// 365250.0 is the number of days in a Julian millenium\n\ttau = (jd - 2451545.0) / 365250.0;\n\t//console.log(\"equationOfTime.  tau = \" + tau);\n\tL0 = 280.4664567 + (360007.6982779 * tau) + (0.03032028 * tau * tau)\n\t\t\t+ ((tau * tau * tau) / 49931)\n\t\t\t+ (-((tau * tau * tau * tau) / 15300))\n\t\t\t+ (-((tau * tau * tau * tau * tau) / 2000000));\n\t//console.log(\"L0 = \" + L0);\n\tL0 = Astro._fixangle(L0);\n\t//console.log(\"L0 = \" + L0);\n\tpos = Astro._sunpos(jd);\n\talpha = pos.apparentRightAscension;\n\t//console.log(\"alpha = \" + alpha);\n\tvar nut = Astro._nutation(jd);\n\tdeltaPsi = nut.deltaPsi;\n\t//console.log(\"deltaPsi = \" + deltaPsi);\n\tepsilon = Astro._obliqeq(jd) + nut.deltaEpsilon;\n\t//console.log(\"epsilon = \" + epsilon);\n\t//console.log(\"L0 - 0.0057183 = \" + (L0 - 0.0057183));\n\t//console.log(\"L0 - 0.0057183 - alpha = \" + (L0 - 0.0057183 - alpha));\n\t//console.log(\"deltaPsi * cos(epsilon) = \" + deltaPsi * Astro._dcos(epsilon));\n\t\n\tE = L0 - 0.0057183 - alpha + deltaPsi * Astro._dcos(epsilon);\n\t// if alpha and L0 are in different quadrants, then renormalize\n\t// so that the difference between them is in the right range\n\tif (E > 180) {\n\t\tE -= 360;\n\t}\n\t//console.log(\"E = \" + E);\n\t// E = E - 20.0 * (Math.floor(E / 20.0));\n\tE = E * 4;\n\t//console.log(\"Efixed = \" + E);\n\tE = E / (24 * 60);\n\t//console.log(\"Eday = \" + E);\n\n\treturn E;\n};\n\n/**\n * @private\n * @static\n */\nAstro._poly = function(x, coefficients) {\n\tvar result = coefficients[0];\n\tvar xpow = x;\n\tfor (var i = 1; i < coefficients.length; i++) {\n\t\tresult += coefficients[i] * xpow;\n\t\txpow *= x;\n\t}\n\treturn result;\n};\n\n/**\n * Calculate the UTC RD from the local RD given \"zone\" number of minutes\n * worth of offset.\n * \n * @static\n * @protected\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone \n * @return {number} the UTC equivalent of the local RD\n */\nAstro._universalFromLocal = function(local, zone) {\n\treturn local - zone / 1440;\n};\n\n/**\n * Calculate the local RD from the UTC RD given \"zone\" number of minutes\n * worth of offset.\n * \n * @static\n * @protected\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone \n * @return {number} the UTC equivalent of the local RD\n */\nAstro._localFromUniversal = function(local, zone) {\n\treturn local + zone / 1440;\n};\n\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the aberration\n */\nAstro._aberration = function(c) {\n\treturn 9.74e-05 * Astro._dcos(177.63 + 35999.01847999999 * c) - 0.005575;\n};\n\n/**\n * @private\n *\nilib.data.astro._nutCoeffA = [124.90, -1934.134, 0.002063];\nilib.data.astro._nutCoeffB q= [201.11, 72001.5377, 0.00057];\n*/\n\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the nutation for the given julian century in radians\n */\nAstro._nutation2 = function(c) {\n\tvar a = Astro._poly(c, ilib.data.astro._nutCoeffA);\n\tvar b = Astro._poly(c, ilib.data.astro._nutCoeffB);\n\t// return -0.0000834 * Astro._dsin(a) - 0.0000064 * Astro._dsin(b);\n\treturn -0.004778 * Astro._dsin(a) - 0.0003667 * Astro._dsin(b);\n};\n\n/**\n * @static\n * @private\n */\nAstro._ephemerisCorrection = function(jd) {\n\tvar year = GregorianDate._calcYear(jd - 1721424.5);\n\t\n\tif (1988 <= year && year <= 2019) {\n\t\treturn (year - 1933) / 86400;\n\t}\n\t\n\tif (1800 <= year && year <= 1987) {\n\t\tvar jul1 = new GregRataDie({\n\t\t\tyear: year,\n\t\t\tmonth: 7,\n\t\t\tday: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0\n\t\t});\n\t\t// 693596 is the rd of Jan 1, 1900\n\t\tvar theta = (jul1.getRataDie() - 693596) / 36525;\n\t\treturn Astro._poly(theta, (1900 <= year) ? ilib.data.astro._coeff19th : ilib.data.astro._coeff18th);\n\t}\n\t\n\tif (1620 <= year && year <= 1799) {\n\t\tyear -= 1600;\n\t\treturn (196.58333 - 4.0675 * year + 0.0219167 * year * year) / 86400;\n\t}\n\t\n\t// 660724 is the rd of Jan 1, 1810\n\tvar jan1 = new GregRataDie({\n\t\tyear: year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0\n\t});\n\t// var x = 0.5 + (jan1.getRataDie() - 660724);\n\tvar x = 0.5 + (jan1.getRataDie() - 660724);\n\t\n\treturn ((x * x / 41048480) - 15) / 86400;\n};\n\n/**\n * @static\n * @private\n */\nAstro._ephemerisFromUniversal = function(jd) {\n\treturn jd + Astro._ephemerisCorrection(jd);\n};\n\n/**\n * @static\n * @private\n */\nAstro._universalFromEphemeris = function(jd) {\n\treturn jd - Astro._ephemerisCorrection(jd);\n};\n\n/**\n * @static\n * @private\n */\nAstro._julianCenturies = function(jd) {\n\t// 2451545.0 is the Julian day of J2000 epoch\n\t// 730119.5 is the Gregorian RD of J2000 epoch\n\t// 36525.0 is the number of days in a Julian century\n\treturn (Astro._ephemerisFromUniversal(jd) - 2451545.0) / 36525.0;\n};\n\n/**\n * Calculate the solar longitude\n * \n * @static\n * @protected\n * @param {number} jd julian day of the date to calculate the longitude for \n * @return {number} the solar longitude in degrees\n */\nAstro._solarLongitude = function(jd) {\n\tvar c = Astro._julianCenturies(jd),\n\t\tlongitude = 0,\n\t\tlen = ilib.data.astro._solarLongCoeff.length,\n\t\trow;\n\t\n\tfor (var i = 0; i < len; i++) {\n\t\tlongitude += ilib.data.astro._solarLongCoeff[i] * \n\t\t\tAstro._dsin(ilib.data.astro._solarLongAddends[i] + ilib.data.astro._solarLongMultipliers[i] * c);\n\t}\n\tlongitude *= 5.729577951308232e-06;\n\tlongitude += 282.77718340000001 + 36000.769537439999 * c;\n\tlongitude += Astro._aberration(c) + Astro._nutation2(c);\n\treturn Astro._fixangle(longitude);\n};\n\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\nAstro._lunarLongitude = function (jd) {\n\tvar c = Astro._julianCenturies(jd),\n\t    meanMoon = Astro._fixangle(Astro._poly(c, ilib.data.astro._meanMoonCoeff)),\n\t    elongation = Astro._fixangle(Astro._poly(c, ilib.data.astro._elongationCoeff)),\n\t    solarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._solarAnomalyCoeff)),\n\t    lunarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._lunarAnomalyCoeff)),\n\t    moonNode = Astro._fixangle(Astro._poly(c, ilib.data.astro._moonFromNodeCoeff)),\n\t    e = Astro._poly(c, ilib.data.astro._eCoeff);\n\t\n\tvar sum = 0;\n\tfor (var i = 0; i < ilib.data.astro._lunarElongationLongCoeff.length; i++) {\n\t\tvar x = ilib.data.astro._solarAnomalyLongCoeff[i];\n\n\t\tsum += ilib.data.astro._sineCoeff[i] * Math.pow(e, Math.abs(x)) * \n\t\t\tAstro._dsin(ilib.data.astro._lunarElongationLongCoeff[i] * elongation + x * solarAnomaly + \n\t\t\t\tilib.data.astro._lunarAnomalyLongCoeff[i] * lunarAnomaly + \n\t\t\t\tilib.data.astro._moonFromNodeLongCoeff[i] * moonNode);\n\t}\n\tvar longitude = sum / 1000000;\n\tvar venus = 3958.0 / 1000000 * Astro._dsin(119.75 + c * 131.84899999999999);\n\tvar jupiter = 318.0 / 1000000 * Astro._dsin(53.090000000000003 + c * 479264.28999999998);\n\tvar flatEarth = 1962.0 / 1000000 * Astro._dsin(meanMoon - moonNode);\n\t\n\treturn Astro._fixangle(meanMoon + longitude + venus + jupiter + flatEarth + Astro._nutation2(c));\n};\n\n/**\n * @static\n * @protected\n * @param {number} n\n * @return {number} julian day of the n'th new moon\n */\nAstro._newMoonTime = function(n) {\n\tvar k = n - 24724;\n\tvar c = k / 1236.8499999999999;\n\tvar approx = Astro._poly(c, ilib.data.astro._nmApproxCoeff);\n\tvar capE = Astro._poly(c, ilib.data.astro._nmCapECoeff);\n\tvar solarAnomaly = Astro._poly(c, ilib.data.astro._nmSolarAnomalyCoeff);\n\tvar lunarAnomaly = Astro._poly(c, ilib.data.astro._nmLunarAnomalyCoeff);\n\tvar moonArgument = Astro._poly(c, ilib.data.astro._nmMoonArgumentCoeff);\n\tvar capOmega = Astro._poly(c, ilib.data.astro._nmCapOmegaCoeff);\n\tvar correction = -0.00017 * Astro._dsin(capOmega);\n\tfor (var i = 0; i < ilib.data.astro._nmSineCoeff.length; i++) {\n\t\tcorrection = correction + ilib.data.astro._nmSineCoeff[i] * Math.pow(capE, ilib.data.astro._nmEFactor[i]) * \n\t\tAstro._dsin(ilib.data.astro._nmSolarCoeff[i] * solarAnomaly + \n\t\t\t\tilib.data.astro._nmLunarCoeff[i] * lunarAnomaly + \n\t\t\t\tilib.data.astro._nmMoonCoeff[i] * moonArgument);\n\t}\n\tvar additional = 0;\n\tfor (var i = 0; i < ilib.data.astro._nmAddConst.length; i++) {\n\t\tadditional = additional + ilib.data.astro._nmAddFactor[i] * \n\t\tAstro._dsin(ilib.data.astro._nmAddConst[i] + ilib.data.astro._nmAddCoeff[i] * k);\n\t}\n\tvar extra = 0.000325 * Astro._dsin(Astro._poly(c, ilib.data.astro._nmExtra));\n\treturn Astro._universalFromEphemeris(approx + correction + extra + additional + RataDie.gregorianEpoch);\n};\n\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\nAstro._lunarSolarAngle = function(jd) {\n\tvar lunar = Astro._lunarLongitude(jd);\n\tvar solar = Astro._solarLongitude(jd)\n\treturn Astro._fixangle(lunar - solar);\n};\n\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\nAstro._newMoonBefore = function (jd) {\n\tvar phase = Astro._lunarSolarAngle(jd);\n\t// 11.450086114414322 is the julian day of the 0th full moon\n\t// 29.530588853000001 is the average length of a month\n\tvar guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360) - 1;\n\tvar current, last;\n\tcurrent = last = Astro._newMoonTime(guess);\n\twhile (current < jd) {\n\t\tguess++;\n\t\tlast = current;\n\t\tcurrent = Astro._newMoonTime(guess);\n\t}\n\treturn last;\n};\n\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\nAstro._newMoonAtOrAfter = function (jd) {\n\tvar phase = Astro._lunarSolarAngle(jd);\n\t// 11.450086114414322 is the julian day of the 0th full moon\n\t// 29.530588853000001 is the average length of a month\n\tvar guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360);\n\tvar current;\n\twhile ((current = Astro._newMoonTime(guess)) < jd) {\n\t\tguess++;\n\t}\n\treturn current;\n};\n\n/**\n * @static\n * @protected\n * @param {number} jd JD to calculate from\n * @param {number} longitude longitude to seek \n * @returns {number} the JD of the next time that the solar longitude \n * is a multiple of the given longitude\n */\nAstro._nextSolarLongitude = function(jd, longitude) {\n\tvar rate = 365.242189 / 360.0;\n\tvar tau = jd + rate * Astro._fixangle(longitude - Astro._solarLongitude(jd));\n\tvar start = Math.max(jd, tau - 5.0);\n\tvar end = tau + 5.0;\n\t\n\treturn SearchUtils.bisectionSearch(0, start, end, 1e-6, function (l) {\n\t\treturn 180 - Astro._fixangle(Astro._solarLongitude(l) - longitude);\n\t});\n};\n\n/**\n * Floor the julian day to midnight of the current julian day.\n * \n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\nAstro._floorToJD = function(jd) {\n\treturn Math.floor(jd - 0.5) + 0.5;\n};\n\n/**\n * Floor the julian day to midnight of the current julian day.\n * \n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\nAstro._ceilToJD = function(jd) {\n\treturn Math.ceil(jd + 0.5) - 0.5;\n};\n\nmodule.exports = Astro;\n","/*\n * CopticDate.js - Represent a date in the Coptic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nCopticCal.js \nMathUtils.js\nJSUtils.js\nLocale.js\nLocaleInfo.js \nTimeZone.js\nEthiopicDate.js\nCopticRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar IDate = require(\"./IDate.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar EthiopicDate = require(\"./EthiopicDate.js\");\nvar CopticCal = require(\"./CopticCal.js\");\nvar CopticRataDie = require(\"./CopticRataDie.js\");\n\n/**\n * @class\n * Construct a new date object for the Coptic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this coptic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *  \n * If called with another Coptic date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends EthiopicDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic date\n */\nvar CopticDate = function(params) {\n\tthis.rd = undefined; // clear these out so that the EthiopicDate constructor can set it\n\tEthiopicDate.call(this, params);\n\tthis.cal = new CopticCal();\n};\n\nCopticDate.prototype = new EthiopicDate({noinstance: true});\nCopticDate.prototype.parent = EthiopicDate.prototype;\nCopticDate.prototype.constructor = CopticDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nCopticDate.prototype.newRd = function (params) {\n\treturn new CopticRataDie(params);\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nCopticDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn MathUtils.mod(rd-3, 7);\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nCopticDate.prototype.getCalendar = function() {\n\treturn \"coptic\";\n};\n\n//register with the factory method\nIDate._constructors[\"coptic\"] = CopticDate;\n\nmodule.exports = CopticDate;","/*\n * han.js - Represent a Han Chinese Lunar calendar object.\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js \nCalendar.js \nMathUtils.js \nAstro.js\nGregorianDate.js\nGregRataDie.js\nRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar Astro = require(\"./Astro.js\");\nvar RataDie = require(\"./RataDie.js\");\nvar GregorianDate = require(\"./GregorianDate.js\");\nvar GregRataDie = require(\"./GregRataDie.js\");\n\n/**\n * @class\n * Construct a new Han algorithmic calendar object. This class encodes information about\n * a Han algorithmic calendar.<p>\n * \n * \n * @constructor\n * @param {Object=} params optional parameters to load the calendrical data\n * @extends Calendar\n */\nvar HanCal = function(params) {\n\tthis.type = \"han\";\n\tvar sync = params && typeof(params.sync) === 'boolean' ? params.sync : true;\n\t\n\tAstro.initAstro(sync, params && params.loadParams, /** @type {function ((Object|null)=): ?} */ ilib.bind(this, function (x) {\n\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\tparams.callback(this);\n\t\t}\n\t}));\n};\n\n/**\n * @protected\n * @static\n * @param {number} year\n * @param {number=} cycle\n * @return {number}\n */\nHanCal._getElapsedYear = function(year, cycle) {\n\tvar elapsedYear = year || 0;\n\tif (typeof(year) !== 'undefined' && year < 61 && typeof(cycle) !== 'undefined') {\n\t\telapsedYear = 60 * cycle + year;\n\t}\n\treturn elapsedYear;\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @param {number} longitude longitude to seek \n * @returns {number} the julian day of the next time that the solar longitude \n * is a multiple of the given longitude\n */\nHanCal._hanNextSolarLongitude = function(jd, longitude) {\n\tvar tz = HanCal._chineseTZ(jd);\n\tvar uni = Astro._universalFromLocal(jd, tz);\n\tvar sol = Astro._nextSolarLongitude(uni, longitude);\n\treturn Astro._localFromUniversal(sol, tz);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from \n * @returns {number} the major solar term for the julian day\n */\nHanCal._majorSTOnOrAfter = function(jd) {\n\tvar tz = HanCal._chineseTZ(jd);\n\tvar uni = Astro._universalFromLocal(jd, tz);\n\tvar next = Astro._fixangle(30 * Math.ceil(Astro._solarLongitude(uni)/30));\n\treturn HanCal._hanNextSolarLongitude(jd, next);\n};\n\n/**\n * @protected\n * @static\n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n */\nHanCal._solsticeBefore = function (year, cycle) {\n\tvar elapsedYear = HanCal._getElapsedYear(year, cycle);\n\tvar gregyear = elapsedYear - 2697;\n\tvar rd = new GregRataDie({\n\t\tyear: gregyear-1, \n\t\tmonth: 12, \n\t\tday: 15, \n\t\thour: 0, \n\t\tminute: 0, \n\t\tsecond: 0, \n\t\tmillisecond: 0\n\t});\n\treturn HanCal._majorSTOnOrAfter(rd.getRataDie() + RataDie.gregorianEpoch);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {number} the current major solar term\n */\nHanCal._chineseTZ = function(jd) {\n\tvar year = GregorianDate._calcYear(jd - RataDie.gregorianEpoch);\n\treturn year < 1929 ? 465.6666666666666666 : 480;\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from \n * @returns {number} the julian day of next new moon on or after the given julian day date\n */\nHanCal._newMoonOnOrAfter = function(jd) {\n\tvar tz = HanCal._chineseTZ(jd);\n\tvar uni = Astro._universalFromLocal(jd, tz);\n\tvar moon = Astro._newMoonAtOrAfter(uni);\n\t// floor to the start of the julian day\n\treturn Astro._floorToJD(Astro._localFromUniversal(moon, tz)); \n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from \n * @returns {number} the julian day of previous new moon before the given julian day date\n */\nHanCal._newMoonBefore = function(jd) {\n\tvar tz = HanCal._chineseTZ(jd);\n\tvar uni = Astro._universalFromLocal(jd, tz);\n\tvar moon = Astro._newMoonBefore(uni);\n\t// floor to the start of the julian day\n\treturn Astro._floorToJD(Astro._localFromUniversal(moon, tz));\n};\n\n/**\n * @static\n * @protected\n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n */\nHanCal._leapYearCalc = function(year, cycle) {\n\tvar ret = {\n\t\telapsedYear: HanCal._getElapsedYear(year, cycle)\n\t};\n\tret.solstice1 = HanCal._solsticeBefore(ret.elapsedYear);\n\tret.solstice2 = HanCal._solsticeBefore(ret.elapsedYear+1);\n\t// ceil to the end of the julian day\n\tret.m1 = HanCal._newMoonOnOrAfter(Astro._ceilToJD(ret.solstice1));\n\tret.m2 = HanCal._newMoonBefore(Astro._ceilToJD(ret.solstice2));\n\t\n\treturn ret;\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {number} the current major solar term\n */\nHanCal._currentMajorST = function(jd) {\n\tvar s = Astro._solarLongitude(Astro._universalFromLocal(jd, HanCal._chineseTZ(jd)));\n\treturn MathUtils.amod(2 + Math.floor(s/30), 12);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {boolean} true if there is no major solar term in the same year\n */\nHanCal._noMajorST = function(jd) {\n\treturn HanCal._currentMajorST(jd) === HanCal._currentMajorST(HanCal._newMoonOnOrAfter(jd+1));\n};\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {number} The number of months in the given year\n */\nHanCal.prototype.getNumMonths = function(year, cycle) {\n\treturn this.isLeapYear(year, cycle) ? 13 : 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the elapsed month for which the length is sought\n * @param {number} year the elapsed year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nHanCal.prototype.getMonLength = function(month, year) {\n\t// distance between two new moons in Nanjing China\n\tvar calc = HanCal._leapYearCalc(year);\n\tvar priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + month * 29);\n\tvar postNewMoon = HanCal._newMoonOnOrAfter(priorNewMoon + 1);\n\treturn postNewMoon - priorNewMoon;\n};\n\n/**\n * Return the equivalent year in the 2820 year cycle that begins on \n * Far 1, 474. This particular cycle obeys the cycle-of-years formula \n * whereas the others do not specifically. This cycle can be used as\n * a proxy for other years outside of the cycle by shifting them into \n * the cycle.   \n * @param {number} year year to find the equivalent cycle year for\n * @returns {number} the equivalent cycle year\n */\nHanCal.prototype.equivalentCycleYear = function(year) {\n\tvar y = year - (year >= 0 ? 474 : 473);\n\treturn MathUtils.mod(y, 2820) + 474;\n};\n\n/**\n * Return true if the given year is a leap year in the Han calendar.\n * If the year is given as a year/cycle combination, then the year should be in the \n * range [1,60] and the given cycle is the cycle in which the year is located. If \n * the year is greater than 60, then\n * it represents the total number of years elapsed in the proleptic calendar since\n * the beginning of the Chinese epoch in on 15 Feb, -2636 (Gregorian). In this \n * case, the cycle parameter is ignored.\n * \n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {boolean} true if the given year is a leap year\n */\nHanCal.prototype.isLeapYear = function(year, cycle) {\n\tvar calc = HanCal._leapYearCalc(year, cycle);\n\treturn Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n};\n\n/**\n * Return the month of the year that is the leap month. If the given year is\n * not a leap year, then this method will return -1.\n * \n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {number} the number of the month that is doubled in this leap year, or -1\n * if this is not a leap year\n */\nHanCal.prototype.getLeapMonth = function(year, cycle) {\n\tvar calc = HanCal._leapYearCalc(year, cycle);\n\t\n\tif (Math.round((calc.m2 - calc.m1) / 29.530588853000001) != 12) {\n\t\treturn -1; // no leap month\n\t}\n\t\n\t// search between rd1 and rd2 for the first month with no major solar term. That is our leap month.\n\tvar month = 0;\n\tvar m = HanCal._newMoonOnOrAfter(calc.m1+1);\n\twhile (!HanCal._noMajorST(m)) {\n\t\tmonth++;\n\t\tm = HanCal._newMoonOnOrAfter(m+1);\n\t}\n\t\n\t// return the number of the month that is doubled\n\treturn month; \n};\n\n/**\n * Return the date of Chinese New Years in the given calendar year.\n * \n * @param {number} year the Chinese year for which the new year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {number} the julian day of the beginning of the given year \n */\nHanCal.prototype.newYears = function(year, cycle) {\n\tvar calc = HanCal._leapYearCalc(year, cycle);\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\n\tif (Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12 &&\n\t\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2)) ) {\n\t\treturn HanCal._newMoonOnOrAfter(m2+1);\n\t}\n\treturn m2;\n};\n\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\nHanCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"han\"] = HanCal;\n\nmodule.exports = HanCal;","/*\n * persratadie.js - Represent a rata die date in the Persian calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nMathUtils.js\nRataDie.js\nAstro.js\nGregorianDate.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Astro = require(\"./Astro.js\");\nvar RataDie = require(\"./RataDie.js\");\nvar GregorianDate = require(\"./GregorianDate.js\");\n\n\n/**\n * @class\n * Construct a new Persian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\nvar PersRataDie = function(params) {\n\tthis.rd = undefined;\n\tAstro.initAstro(\n\t\tparams && typeof(params.sync) === 'boolean' ? params.sync : true,\n\t\tparams && params.loadParams,\n\t\tilib.bind(this, function (x) {\n\t\t\tRataDie.call(this, params);\n\t\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\t\tparams.callback(this);\n\t\t\t}\n\t\t})\n\t);\n};\n\nPersRataDie.prototype = new RataDie();\nPersRataDie.prototype.parent = RataDie;\nPersRataDie.prototype.constructor = PersRataDie;\n\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @const\n * @type number\n */\nPersRataDie.prototype.epoch = 1948319.5;\n\n/**\n * @protected \n */\nPersRataDie.prototype._tehranEquinox = function(year) {\n    var equJED, equJD, equAPP, equTehran, dtTehran, eot;\n\n    //  March equinox in dynamical time\n    equJED = Astro._equinox(year, 0);\n\n    //  Correct for delta T to obtain Universal time\n    equJD = equJED - (Astro._deltat(year) / (24 * 60 * 60));\n\n    //  Apply the equation of time to yield the apparent time at Greenwich\n    eot = Astro._equationOfTime(equJED) * 360;\n    eot = (eot - 20 * Math.floor(eot/20)) / 360;\n    equAPP = equJD + eot;\n\n    /*  \n     * Finally, we must correct for the constant difference between\n     * the Greenwich meridian and the time zone standard for Iran \n     * Standard time, 52 degrees 30 minutes to the East.\n     */\n\n    dtTehran = 52.5 / 360;\n    equTehran = equAPP + dtTehran;\n\n    return equTehran;\n};\n\n/**\n * Calculate the year based on the given Julian day.\n * @protected\n * @param {number} jd the Julian day to get the year for\n * @return {{year:number,equinox:number}} the year and the last equinox\n */\nPersRataDie.prototype._getYear = function(jd) {\n\tvar gd = new GregorianDate({julianday: jd});\n    var guess = gd.getYears() - 2,\n    \tnexteq,\n    \tret = {};\n\n    //ret.equinox = Math.floor(this._tehranEquinox(guess));\n    ret.equinox = this._tehranEquinox(guess);\n\twhile (ret.equinox > jd) {\n\t    guess--;\n\t    // ret.equinox = Math.floor(this._tehranEquinox(guess));\n\t    ret.equinox = this._tehranEquinox(guess);\n\t}\n\tnexteq = ret.equinox - 1;\n\t// if the equinox falls after noon, then the day after that is the start of the \n\t// next year, so truncate the JD to get the noon of the day before the day with \n\t//the equinox on it, then add 0.5 to get the midnight of that day \n\twhile (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {\n\t    ret.equinox = nexteq;\n\t    guess++;\n\t    // nexteq = Math.floor(this._tehranEquinox(guess));\n\t    nexteq = this._tehranEquinox(guess);\n\t}\n\t\n\t// Mean solar tropical year is 365.24219878 days\n\tret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;\n\t\n\treturn ret;\n};\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nPersRataDie.prototype._setDateComponents = function(date) {\n    var adr, guess, jd;\n\n    // Mean solar tropical year is 365.24219878 days \n    guess = this.epoch + 1 + 365.24219878 * (date.year - 2);\n    adr = {year: date.year - 1, equinox: 0};\n\n    while (adr.year < date.year) {\n        adr = this._getYear(guess);\n        guess = adr.equinox + (365.24219878 + 2);\n    }\n\n    jd = Math.floor(adr.equinox) +\n            ((date.month <= 7) ?\n                ((date.month - 1) * 31) :\n                (((date.month - 1) * 30) + 6)\n            ) +\n    \t    (date.day - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight\n    \n\tjd += (date.hour * 3600000 +\n\t\t\tdate.minute * 60000 +\n\t\t\tdate.second * 1000 +\n\t\t\tdate.millisecond) /\n\t\t\t86400000;\n\n    this.rd = jd - this.epoch;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\nPersRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\nmodule.exports = PersRataDie;","/*\n * HanDate.js - Represent a date in the Han algorithmic calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nHanCal.js\nMathUtils.js\nRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\nvar HanCal = require(\"./HanCal.js\");\nvar RataDie = require(\"./RataDie.js\");\n\n/**\n * Construct a new Han RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \n * to 60 and treated as if it were a year in the regular 60-year cycle.\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Han date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @class\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Han RD date\n */\nvar HanRataDie = function(params) {\n\tthis.rd = undefined;\n\tif (params && params.cal) {\n\t\tthis.cal = params.cal;\n\t\tRataDie.call(this, params);\n\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\tparams.callback(this);\n\t\t}\n\t} else {\n\t\tnew HanCal({\n\t\t\tsync: params && params.sync,\n\t\t\tloadParams: params && params.loadParams,\n\t\t\tcallback: ilib.bind(this, function(c) {\n\t\t\t\tthis.cal = c;\n\t\t\t\tRataDie.call(this, params);\n\t\t\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\t\t\tparams.callback(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t}\n};\n\nHanRataDie.prototype = new RataDie();\nHanRataDie.prototype.parent = RataDie;\nHanRataDie.prototype.constructor = HanRataDie;\n\n/**\n * The difference between a zero Julian day and the first Han date\n * which is February 15, -2636 (Gregorian).\n * @private\n * @const\n * @type number\n */\nHanRataDie.epoch = 758325.5;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nHanRataDie.prototype._setDateComponents = function(date) {\n\tvar calc = HanCal._leapYearCalc(date.year, date.cycle);\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\n\tvar newYears;\n\tthis.leapYear = (Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12);\n\tif (this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2)) ) {\n\t\tnewYears = HanCal._newMoonOnOrAfter(m2+1);\n\t} else {\n\t\tnewYears = m2;\n\t}\n\n\tvar priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + date.month * 29); // this is a julian day\n\tthis.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(priorNewMoon));\n\tthis.leapMonth = (this.leapYear && HanCal._noMajorST(priorNewMoon) && !this.priorLeapMonth);\n\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) /\n\t\t86400000;\n\t\n\t/*\n\tconsole.log(\"getRataDie: converting \" +  JSON.stringify(date) + \" to an RD\");\n\tconsole.log(\"getRataDie: year is \" +  date.year + \" plus cycle \" + date.cycle);\n\tconsole.log(\"getRataDie: isLeapYear is \" +  this.leapYear);\n\tconsole.log(\"getRataDie: priorNewMoon is \" +  priorNewMoon);\n\tconsole.log(\"getRataDie: day in month is \" +  date.day);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (priorNewMoon + date.day - 1 + rdtime));\n\t*/\n\t\n\tthis.rd = priorNewMoon + date.day - 1 + rdtime - RataDie.gregorianEpoch;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\nHanRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd1 first julian day\n * @param {number} jd2 second julian day\n * @returns {boolean} true if there is a leap month earlier in the same year \n * as the given months \n */\nHanRataDie._priorLeapMonth = function(jd1, jd2) {\n\treturn jd2 >= jd1 &&\n\t\t(HanRataDie._priorLeapMonth(jd1, HanCal._newMoonBefore(jd2)) ||\n\t\t\t\tHanCal._noMajorST(jd2));\n};\n\n\nmodule.exports = HanRataDie;","/*\n * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends \nCalendar.js \nPersRataDie.js \nilib.js\nMathUtils.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar PersRataDie = require(\"./PersRataDie.js\");\n\n/**\n * @class\n * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes \n * information about a Persian calendar. This class differs from the \n * Persian calendar in that the leap years are calculated based on the\n * astronomical observations of the sun in Teheran, instead of calculating\n * the leap years based on a regular cyclical rhythm algorithm.<p>\n * \n * \n * @constructor\n * @extends Calendar\n */\nvar PersianCal = function() {\n\tthis.type = \"persian\";\n};\n\n/**\n * @private\n * @const\n * @type Array.<number> \n * the lengths of each month \n */\nPersianCal.monthLengths = [\n\t31,  // Farvardin\n\t31,  // Ordibehesht\n\t31,  // Khordad\n\t31,  // Tir\n\t31,  // Mordad\n\t31,  // Shahrivar\n\t30,  // Mehr\n\t30,  // Aban\n\t30,  // Azar\n\t30,  // Dey\n\t30,  // Bahman\n\t29   // Esfand\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\nPersianCal.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nPersianCal.prototype.getMonLength = function(month, year) {\n\tif (month !== 12 || !this.isLeapYear(year)) {\n\t\treturn PersianCal.monthLengths[month-1];\n\t} else {\n\t\t// Month 12, Esfand, has 30 days instead of 29 in leap years\n\t\treturn 30;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Persian astronomical calendar.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nPersianCal.prototype.isLeapYear = function(year) {\n\tvar rdNextYear = new PersRataDie({\n\t\tcal: this,\n\t\tyear: year + 1,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tvar rdThisYear = new PersRataDie({\n\t\tcal: this,\n\t\tyear: year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t}); \n    return (rdNextYear.getRataDie() - rdThisYear.getRataDie()) > 365;\n};\n\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\nPersianCal.prototype.getType = function() {\n\treturn this.type;\n};\n\n/* register this calendar for the factory method */\nCalendar._constructors[\"persian\"] = PersianCal;\n\nmodule.exports = PersianCal;","/*\n * HanDate.js - Represent a date in the Han algorithmic calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nIDate.js\nGregorianDate.js \nHanCal.js\nAstro.js \nJSUtils.js\nMathUtils.js\nLocaleInfo.js \nLocale.js\nTimeZone.js\nHanRataDie.js\nRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\nvar JSUtils = require(\"./JSUtils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar IDate = require(\"./IDate.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar Astro = require(\"./Astro.js\");\nvar HanCal = require(\"./HanCal.js\");\nvar GregorianDate = require(\"./GregorianDate.js\");\nvar HanRataDie = require(\"./HanRataDie.js\");\nvar RataDie = require(\"./RataDie.js\");\n\n/**\n * @class\n * \n * Construct a new Han date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \n * to 60 and treated as if it were a year in the regular 60-year cycle.\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this han date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this han date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale.\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Han date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Han date\n */\nvar HanDate = function(params) {\n\tthis.timezone = \"local\";\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone(); \n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t}\n\t\n\tnew HanCal({\n\t\tsync: params && typeof(params) === 'boolean' ? params.sync : true,\n\t\tloadParams: params && params.loadParams,\n\t\tcallback: ilib.bind(this, function (cal) {\n\t\t\tthis.cal = cal;\n\t\n\t\t\tif (params && (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond || params.cycle || params.cycleYear)) {\n\t\t\t\tif (typeof(params.cycle) !== 'undefined') {\n\t\t\t\t\t/**\n\t\t\t\t\t * Cycle number in the Han calendar.\n\t\t\t\t\t * @type number\n\t\t\t\t\t */\n\t\t\t\t\tthis.cycle = parseInt(params.cycle, 10) || 0;\n\t\t\t\t\t\n\t\t\t\t\tvar year = (typeof(params.year) !== 'undefined' ? parseInt(params.year, 10) : parseInt(params.cycleYear, 10)) || 0;\n\t\t\t\t\t\n\t\t\t\t\t/**\n\t\t\t\t\t * Year in the Han calendar.\n\t\t\t\t\t * @type number\n\t\t\t\t\t */\n\t\t\t\t\tthis.year = HanCal._getElapsedYear(year, this.cycle);\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof(params.year) !== 'undefined') {\n\t\t\t\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\t\t\t\tthis.cycle = Math.floor((this.year - 1) / 60);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.year = this.cycle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The month number, ranging from 1 to 13\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\t\n\t\t\t\t/**\n\t\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\t\n\t\t\t\t/**\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\n\t\t\t\t/**\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\n\t\t\t\t/**\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t\n\t\t\t\t// derived properties\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Year in the cycle of the Han calendar\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.cycleYear = MathUtils.amod(this.year, 60); \n\n\t\t\t\t/**\n\t\t\t\t * The day of the year. Ranges from 1 to 384.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\t\n\t\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\t\tthis.dst = params.dst;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.newRd({\n\t\t\t\t\tcal: this.cal,\n\t\t\t\t\tcycle: this.cycle,\n\t\t\t\t\tyear: this.year,\n\t\t\t\t\tmonth: this.month,\n\t\t\t\t\tday: this.day,\n\t\t\t\t\thour: this.hour,\n\t\t\t\t\tminute: this.minute,\n\t\t\t\t\tsecond: this.second,\n\t\t\t\t\tmillisecond: this.millisecond,\n\t\t\t\t\tsync: params && typeof(params.sync) === 'boolean' ? params.sync : true,\n\t\t\t\t\tloadParams: params && params.loadParams,\n\t\t\t\t\tcallback: ilib.bind(this, function (rd) {\n\t\t\t\t\t\tif (rd) {\n\t\t\t\t\t\t\tthis.rd = rd;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\t\t\t\t\tif (!this.tz) {\n\t\t\t\t\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t\t\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t\t\t\t\t// what the offset is at that point in the year\n\t\t\t\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\t\t\t\t\tif (this.offset !== 0) {\n\t\t\t\t\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\t\t\t\t\tcal: this.cal,\n\t\t\t\t\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tthis._calcLeap();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// re-use the derived properties from the RD calculations\n\t\t\t\t\t\t\t\tthis.leapMonth = this.rd.leapMonth;\n\t\t\t\t\t\t\t\tthis.priorLeapMonth = this.rd.priorLeapMonth;\n\t\t\t\t\t\t\t\tthis.leapYear = this.rd.leapYear;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!this.rd) {\n\t\t\t\t\t\t\tthis.rd = this.newRd(JSUtils.merge(params || {}, {\n\t\t\t\t\t\t\t\tcal: this.cal\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tthis._calcDateComponents();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (params && typeof(params.onLoad) === 'function') {\n\t\t\t\t\t\t\tparams.onLoad(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!this.rd) {\n\t\t\t\t\tthis.rd = this.newRd(JSUtils.merge(params || {}, {\n\t\t\t\t\t\tcal: this.cal\n\t\t\t\t\t}));\n\t\t\t\t\tthis._calcDateComponents();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (params && typeof(params.onLoad) === 'function') {\n\t\t\t\t\tparams.onLoad(this);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n\n};\n\nHanDate.prototype = new IDate({noinstance: true});\nHanDate.prototype.parent = IDate;\nHanDate.prototype.constructor = HanDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nHanDate.prototype.newRd = function (params) {\n\treturn new HanRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\nHanDate.prototype._calcYear = function(rd) {\n\tvar gregdate = new GregorianDate({\n\t\trd: rd,\n\t\ttimezone: this.timezone\n\t});\n\tvar hanyear = gregdate.year + 2697;\n\tvar newYears = this.cal.newYears(hanyear);\n\treturn hanyear - ((rd + RataDie.gregorianEpoch < newYears) ? 1 : 0);\n};\n\n/** \n * @private \n * Calculate the leap year and months from the RD.\n */\nHanDate.prototype._calcLeap = function() {\n\tvar jd = this.rd.getRataDie() + RataDie.gregorianEpoch;\n\t\n\tvar calc = HanCal._leapYearCalc(this.year);\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\n\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\t\n\tvar newYears = (this.leapYear &&\n\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) ?\n\t\t\t\tHanCal._newMoonOnOrAfter(m2+1) : m2;\n\t\n\tvar m = HanCal._newMoonBefore(jd + 1);\n\tthis.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(m));\n\tthis.leapMonth = (this.leapYear && HanCal._noMajorST(m) && !this.priorLeapMonth);\n};\n\n/**\n * @private\n * Calculate date components for the given RD date.\n */\nHanDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\tjd = this.rd.getRataDie() + RataDie.gregorianEpoch;\n\n\t// console.log(\"HanDate._calcDateComponents: calculating for jd \" + jd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\t// now offset the jd by the time zone, then recalculate in case we were \n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\t\n\tif (this.offset !== 0) {\n\t\tjd += this.offset;\n\t}\n\n\t// use the Gregorian calendar objects as a convenient way to short-cut some\n\t// of the date calculations\n\t\n\tvar gregyear = GregorianDate._calcYear(this.rd.getRataDie());\n\tthis.year = gregyear + 2697;\n\tvar calc = HanCal._leapYearCalc(this.year);\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\n\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\tvar newYears = (this.leapYear &&\n\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) ?\n\t\t\t\tHanCal._newMoonOnOrAfter(m2+1) : m2;\n\t\n\t// See if it's between Jan 1 and the Chinese new years of that Gregorian year. If\n\t// so, then the Han year is actually the previous one\n\tif (jd < newYears) {\n\t\tthis.year--;\n\t\tcalc = HanCal._leapYearCalc(this.year);\n\t\tm2 = HanCal._newMoonOnOrAfter(calc.m1+1);\n\t\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\t\tnewYears = (this.leapYear &&\n\t\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) ?\n\t\t\t\t\tHanCal._newMoonOnOrAfter(m2+1) : m2;\n\t}\n\t// month is elapsed month, not the month number + leap month boolean\n\tvar m = HanCal._newMoonBefore(jd + 1);\n\tthis.month = Math.round((m - calc.m1) / 29.530588853000001);\n\t\n\tthis.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(m));\n\tthis.leapMonth = (this.leapYear && HanCal._noMajorST(m) && !this.priorLeapMonth);\n\t\n\tthis.cycle = Math.floor((this.year - 1) / 60);\n\tthis.cycleYear = MathUtils.amod(this.year, 60);\n\tthis.day = Astro._floorToJD(jd) - m + 1;\n\n\t/*\n\tconsole.log(\"HanDate._calcDateComponents: year is \" + this.year);\n\tconsole.log(\"HanDate._calcDateComponents: isLeapYear is \" + this.leapYear);\n\tconsole.log(\"HanDate._calcDateComponents: cycle is \" + this.cycle);\n\tconsole.log(\"HanDate._calcDateComponents: cycleYear is \" + this.cycleYear);\n\tconsole.log(\"HanDate._calcDateComponents: month is \" + this.month);\n\tconsole.log(\"HanDate._calcDateComponents: isLeapMonth is \" + this.leapMonth);\n\tconsole.log(\"HanDate._calcDateComponents: day is \" + this.day);\n\t*/\n\n\t// floor to the start of the julian day\n\tremainder = jd - Astro._floorToJD(jd);\n\t\n\t// console.log(\"HanDate._calcDateComponents: time remainder is \" + remainder);\n\t\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\t\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\t\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\t\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\t\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the year within the Chinese cycle of this date. Cycles are 60 \n * years long, and the value returned from this method is the number of the year \n * within this cycle. The year returned from getYear() is the total elapsed \n * years since the beginning of the Chinese epoch and does not include \n * the cycles. \n * \n * @return {number} the year within the current Chinese cycle\n */\nHanDate.prototype.getCycleYears = function() {\n\treturn this.cycleYear;\n};\n\n/**\n * Return the Chinese cycle number of this date. Cycles are 60 years long,\n * and the value returned from getCycleYear() is the number of the year \n * within this cycle. The year returned from getYear() is the total elapsed \n * years since the beginning of the Chinese epoch and does not include \n * the cycles. \n * \n * @return {number} the current Chinese cycle\n */\nHanDate.prototype.getCycles = function() {\n\treturn this.cycle;\n};\n\n/**\n * Return whether the year of this date is a leap year in the Chinese Han \n * calendar. \n * \n * @return {boolean} true if the year of this date is a leap year in the \n * Chinese Han calendar. \n */\nHanDate.prototype.isLeapYear = function() {\n\treturn this.leapYear;\n};\n\n/**\n * Return whether the month of this date is a leap month in the Chinese Han \n * calendar.\n * \n * @return {boolean} true if the month of this date is a leap month in the \n * Chinese Han calendar.\n */\nHanDate.prototype.isLeapMonth = function() {\n\treturn this.leapMonth;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nHanDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn MathUtils.mod(rd, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nHanDate.prototype.getDayOfYear = function() {\n\tvar newYears = this.cal.newYears(this.year);\n\tvar priorNewMoon = HanCal._newMoonOnOrAfter(newYears + (this.month -1) * 29);\n\treturn priorNewMoon - newYears + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Han \n * calendars is -1 for \"before the han era\" (BP) and 1 for \"the han era\" (anno \n * persico or AP). \n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Han calendar, \n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\nHanDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nHanDate.prototype.getCalendar = function() {\n\treturn \"han\";\n};\n\n// register with the factory method\nIDate._constructors[\"han\"] = HanDate;\n\nmodule.exports = HanDate;","/*\n * PersianDate.js - Represent a date in the Persian astronomical (Hijjri) calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nTimeZone.js\nIDate.js\nPersRataDie.js\nPersianCal.js \nSearchUtils.js\nMathUtils.js\nLocaleInfo.js \nAstro.js\n*/\n\n// !data astro\n\nvar ilib = require(\"./ilib.js\");\nvar SearchUtils = require(\"./SearchUtils.js\");\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\nvar LocaleInfo = require(\"./LocaleInfo.js\");\nvar TimeZone = require(\"./TimeZone.js\");\nvar IDate = require(\"./IDate.js\");\nvar Calendar = require(\"./Calendar.js\");\n\nvar Astro = require(\"./Astro.js\");\nvar PersianCal = require(\"./PersianCal.js\");\nvar PersRataDie = require(\"./PersRataDie.js\");\n\n/**\n * @class\n * \n * Construct a new Persian astronomical date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this persian date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale.\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\nvar PersianDate = function(params) {\n\tthis.cal = new PersianCal();\n\tthis.timezone = \"local\";\n\t\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\n\t\t\tvar li = new LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone(); \n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t}\n\t\n\tAstro.initAstro(\n\t\tparams && typeof(params.sync) === 'boolean' ? params.sync : true,\n\t\tparams && params.loadParams,\n\t\tilib.bind(this, function (x) {\n\t\t\tif (params && (params.year || params.month || params.day || params.hour ||\n\t\t\t\t\tparams.minute || params.second || params.millisecond)) {\n\t\t\t\t/**\n\t\t\t\t * Year in the Persian calendar.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The month number, ranging from 1 to 12\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t\t/**\n\t\t\t\t * The day of the month. This ranges from 1 to 31.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The day of the year. Ranges from 1 to 366.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\t\tthis.dst = params.dst;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.rd = this.newRd(this);\n\t\t\t\t\n\t\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\t\tif (!this.tz) {\n\t\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t\t\t}\n\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \n\t\t\t\t// are set in order to figure out which time zone rules apply and \n\t\t\t\t// what the offset is at that point in the year\n\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\t\tif (this.offset !== 0) {\n\t\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!this.rd) {\n\t\t\t\tthis.rd = this.newRd(params);\n\t\t\t\tthis._calcDateComponents();\n\t\t\t}\n\t\t\t\n\t\t\tif (params && typeof(params.onLoad) === 'function') {\n\t\t\t\tparams.onLoad(this);\n\t\t\t}\n\t\t})\n\t);\n};\n\nPersianDate.prototype = new IDate({noinstance: true});\nPersianDate.prototype.parent = IDate;\nPersianDate.prototype.constructor = PersianDate;\n\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year \n */\nPersianDate.cumMonthLengths = [\n    0,    // Farvardin\n\t31,   // Ordibehesht\n\t62,   // Khordad\n\t93,   // Tir\n\t124,  // Mordad\n\t155,  // Shahrivar\n\t186,  // Mehr\n\t216,  // Aban\n\t246,  // Azar\n\t276,  // Dey\n\t306,  // Bahman\n\t336,  // Esfand\n\t366\n];\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\nPersianDate.prototype.newRd = function (params) {\n\treturn new PersRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\nPersianDate.prototype._calcYear = function(rd) {\n\tvar julianday = rd + this.rd.epoch;\n\treturn this.rd._getYear(julianday).year;\n};\n\n/**\n * @private\n * Calculate date components for the given RD date.\n */\nPersianDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\trd = this.rd.getRataDie();\n\t\n\tthis.year = this._calcYear(rd);\n\t\n\tif (typeof(this.offset) === \"undefined\") {\n\t\t// now offset the RD by the time zone, then recalculate in case we were \n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\t\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\t\n\t//console.log(\"PersDate.calcComponent: calculating for rd \" + rd);\n\t//console.log(\"PersDate.calcComponent: year is \" + ret.year);\n\tvar yearStart = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd - yearStart.getRataDie() + 1;\n\t\n\tthis.dayOfYear = remainder;\n\t\n\t//console.log(\"PersDate.calcComponent: remainder is \" + remainder);\n\t\n\tthis.month = SearchUtils.bsearch(Math.floor(remainder), PersianDate.cumMonthLengths);\n\tremainder -= PersianDate.cumMonthLengths[this.month-1];\n\t\n\t//console.log(\"PersDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\t\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\t\n\t//console.log(\"PersDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n\t\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\t\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\t\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\t\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\t\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\nPersianDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.getRataDie());\n\treturn MathUtils.mod(rd-3, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nPersianDate.prototype.getDayOfYear = function() {\n\treturn PersianDate.cumMonthLengths[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Persian \n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno \n * persico or AP). \n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, \n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\nPersianDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\nPersianDate.prototype.getCalendar = function() {\n\treturn \"persian\";\n};\n\n// register with the factory method\nIDate._constructors[\"persian\"] = PersianDate;\n\nmodule.exports = PersianDate;","// ilib doesn't load the non-Gregorian calendars and dates initially. To ensure they are packaged\n// by enyo-dev, we've added explicit requires for each Date (which in turn requires the relevant\n// Calendar). This is only necessary for builds not using the library-mode build of enyo-ilib which\n// would have included everything\n\nrequire('../ilib/lib/GregorianDate');   // not required (rimshot) but included for completeness\nrequire('../ilib/lib/CopticDate');\nrequire('../ilib/lib/EthiopicDate');\nrequire('../ilib/lib/GregorianDate');\nrequire('../ilib/lib/HanDate');\nrequire('../ilib/lib/HebrewDate');\nrequire('../ilib/lib/IslamicDate');\nrequire('../ilib/lib/JulianDate');\nrequire('../ilib/lib/PersianDate');\nrequire('../ilib/lib/PersianAlgoDate');\nrequire('../ilib/lib/ThaiSolarDate');","/*\n * glue.js - glue code to fit ilib into enyo\n *\n * Copyright © 2013-2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar\n\tdom = require('enyo/dom'),\n\ti18n = require('enyo/i18n'),\n\tplatform = require('enyo/platform'),\n\tutils = require('enyo/utils'),\n\tAjax = require('enyo/Ajax'),\n\tControl = require('enyo/Control');\n\nvar\n\tilib = require('../ilib/lib/ilib'),\n\tCaseMapper = require('../ilib/lib/CaseMapper'),\n\tResBundle = require('../ilib/lib/ResBundle'),\n\tLoader = require('../ilib/lib/Loader'),\n\tLocale = require('../ilib/lib/Locale'),\n\tLocaleInfo = require('../ilib/lib/LocaleInfo'),\n\tScriptInfo = require('../ilib/lib/ScriptInfo'),\n\tZoneInfoFile = require('./zoneinfo');\n\nfunction enyoLoader () {\n\tthis.base = 'enyo-ilib/ilib/';\n\tif (platform.platformName === 'webos') {\n\t\tthis.webos = true;\n\t}\n};\n\nenyoLoader.prototype = new Loader();\nenyoLoader.prototype.constructor = enyoLoader;\n\nenyoLoader.prototype._createZoneFile = function (path) {\n\tvar zone = path.substring(path.indexOf('zoneinfo'));\n\n\t// remove the .json suffix to get the name of the zone\n\tzone = zone.substring(0, zone.length-5);\n\n\ttry {\n\t\tvar zif = new ZoneInfoFile('/usr/share/' + zone);\n\n\t\t// only get the info for this year. Later we can get the info\n\t\t// for any historical or future year too\n\t\treturn zif.getIlibZoneInfo(new Date());\n\t} catch (e) {\n\t\t// no file, so just return nothing\n\t\treturn undefined;\n\t}\n};\n\nenyoLoader.prototype._pathjoin = function (root, subpath) {\n\tif (!root || !root.length) {\n\t\treturn subpath;\n\t}\n\tif (!subpath || !subpath.length) {\n\t\treturn root;\n\t}\n\treturn root + (root.charAt(root.length-1) !== '/' ? '/' : '') + subpath;\n};\n\n/**\n * Load the list of files asynchronously. This uses recursion in\n * order to create a queue of files that will be loaded serially.\n * Each layer, starting at the bottom, loads a file and then loads\n * the layer on top of it. The very top file on the stack will have\n * zero files to load, so instead it will be the one to call the\n * callback to notify the caller that all the content is loaded.\n *\n * @param {Object} context function to call this method in the context of\n * @param {Array.<string>} paths array of strings containing relative paths for required locale data files\n * @param {Array} results empty array in which to place the resulting json when it is loaded from a file\n * @param {Object} params An object full of parameters that the caller is passing to this function to help load the files\n * @param {function(Array.<Object>)} callback callback to call when this function is finished attempting\n * to load all the files that exist and can be loaded\n */\nenyoLoader.prototype._loadFilesAsync = function (context, paths, results, params, callback) {\n\tvar root = 'resources';\n\tif (params && typeof(params.root) !== 'undefined') {\n\t\troot = params.root;\n\t}\n\tif (paths.length > 0) {\n\t\tvar path = paths.shift(),\n\t\t\turl;\n\n\t\tif (this.webos && path.indexOf('zoneinfo') !== -1) {\n\t\t\tresults.push(this._createZoneFile(path));\n\t\t} else {\n\t\t\tif (this.isAvailable(root, path)) {\n\t\t\t\turl = this._pathjoin(root, path);\n\t\t\t} else if (this.isAvailable(this.base + 'locale', path)) {\n\t\t\t\turl = this._pathjoin(this._pathjoin(this.base, 'locale'), path);\n\t\t\t}\n\n\t\t\tvar resultFunc = function(inSender, json) {\n                // console.log('enyo-ilib/glue: ' + (!inSender.failed && json ? 'success' : 'failed'));\n\t\t\t\tresults.push(!inSender.failed && (typeof(json) === 'object') ? json : undefined);\n\t\t\t\tif (paths.length > 0) {\n\t\t\t\t\tthis._loadFilesAsync(context, paths, results, params, callback);\n\t\t\t\t} else {\n\t\t\t\t\t// only the bottom item on the stack will call\n\t\t\t\t\t// the callback\n\t\t\t\t\tcallback.call(context, results);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (url) {\n\t\t\t\tvar ajax = new Ajax({\n\t\t\t\t\turl: url,\n\t\t\t\t\tcacheBust: false\n\t\t\t\t});\n\t\t\t\t// console.log('enyo-ilib/glue: browser/async: attempting to load ' + url);\n\t\t\t\tajax.response(this, resultFunc);\n\t\t\t\tajax.error(this, resultFunc);\n\t\t\t\tajax.go();\n\t\t\t} else {\n\t\t\t\t// nothing to load, so go to the next file\n\t\t\t\tresultFunc({}, undefined);\n\t\t\t}\n\t\t}\n\t}\n};\n\nenyoLoader.prototype.loadFiles = function(paths, sync, params, callback) {\n\tif (sync) {\n\t\tvar ret = [];\n\t\tvar root = 'resources';\n\t\tvar locdata = this._pathjoin(this.base, 'locale');\n\t\tif (params && typeof(params.root) !== 'undefined') {\n\t\t\troot = params.root;\n\t\t}\n\t\t// synchronous\n\t\tutils.forEach(paths, function (path) {\n\t\t\tif (this.webos && path.indexOf('zoneinfo') !== -1) {\n\t\t\t\tret.push(this._createZoneFile(path));\n\t\t\t} else {\n\t\t\t\tvar found = false;\n\n\t\t\t\tvar handler = function(inSender, json) {\n                    // console.log((!inSender.failed && json ? 'success' : 'failed'));\n\t\t\t\t\tif (!inSender.failed && typeof(json) === 'object') {\n\t\t\t\t\t\tret.push(json);\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// console.log('browser/sync: attempting to load lib/enyo-ilib/ilib/locale/' + path);\n\t\t\t\tif (this.isAvailable(root, path)) {\n\t\t\t\t\tvar ajax = new Ajax({\n\t\t\t\t\t\turl: this._pathjoin(root, path),\n\t\t\t\t\t\tsync: true,\n\t\t\t\t\t\tcacheBust: false\n\t\t\t\t\t});\n\n\t\t\t\t\tajax.response(this, handler);\n\t\t\t\t\tajax.error(this, handler);\n\t\t\t\t\tajax.go();\n\t\t\t\t}\n\n\t\t\t\tif (!found && this.isAvailable(locdata, path)) {\n\t\t\t\t\tvar ajax = new Ajax({\n\t\t\t\t\t\turl: this._pathjoin(locdata, path),\n\t\t\t\t\t\tsync: true,\n\t\t\t\t\t\tcacheBust: false\n\t\t\t\t\t});\n\n\t\t\t\t\tajax.response(this, handler);\n\t\t\t\t\tajax.error(this, handler);\n\t\t\t\t\tajax.go();\n\t\t\t\t}\n\n\t\t\t\tif (!found) {\n\t\t\t\t\t// not there, so fill in a blank entry in the array\n\t\t\t\t\tret.push(undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}, this);\n\n\t\tif (typeof(callback) === 'function') {\n\t\t\tcallback.call(this, ret);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t// asynchronous\n\tvar results = [];\n\tthis._loadFilesAsync(this, paths, results, params, callback);\n};\n\nenyoLoader.prototype._loadManifest = function (root, subpath) {\n\tif (!this.manifest) {\n\t\tthis.manifest = {};\n\t}\n\n\tvar dirpath = this._pathjoin(root, subpath);\n\tvar filepath = this._pathjoin(dirpath, 'ilibmanifest.json');\n\n\t// util.print('enyo loader: loading manifest ' + filepath + '\\n');\n\tvar ajax = new Ajax({\n\t\turl: filepath,\n\t\tsync: true,\n\t\tcacheBust: false,\n\t\thandleAs: 'json'\n\t});\n\n\tvar handler = function(inSender, json) {\n        // console.log((!inSender.failed && json ? 'success' : 'failed'));\n\t\t// star indicates there was no ilibmanifest.json, so always try to load files from that dir\n\t\tthis.manifest[dirpath] = (!inSender.failed && typeof(json) === 'object') ? json.files : '*';\n\t};\n\n\tajax.response(this, handler);\n\tajax.error(this, handler);\n\tajax.go();\n},\n\nenyoLoader.prototype._loadStandardManifests = function() {\n\t// util.print('enyo loader: load manifests\\n');\n\tif (!this.manifest) {\n\t\tthis._loadManifest(this.base, 'locale'); // standard ilib locale data\n\t\tthis._loadManifest('', 'resources');     // the app's resources dir\n\t}\n};\nenyoLoader.prototype.listAvailableFiles = function() {\n\t// util.print('enyo loader: list available files called\\n');\n\tthis._loadStandardManifests();\n\treturn this.manifest;\n};\nenyoLoader.prototype.isAvailable = function(root, path) {\n\tthis._loadStandardManifests();\n\n\tif (!this.manifest[root]) {\n\t\t// maybe it's a custom root? If so, try to load\n\t\t// the manifest file first in case it is there\n\t\tthis._loadManifest(root, '');\n\t}\n\n\t// util.print('enyo loader: isAvailable ' + path + '? ');\n\t// star means attempt to load everything because there was no manifest in that dir\n\tif (this.manifest[root] === '*' || utils.indexOf(this.manifest[root], path) !== -1) {\n\t\t// util.print('true\\n');\n\t\treturn true;\n\t}\n\n\t// util.print('false\\n');\n\treturn false;\n};\n\nilib.setLoaderCallback(new enyoLoader());\n\nif (typeof(window.UILocale) !== 'undefined') {\n\t// this is a hack until GF-1581 is fixed\n\tilib.setLocale(window.UILocale);\n}\n\n/*\n * Tell whether or not the given locale is considered a non-Latin locale for webOS purposes. This controls\n * which fonts are used in various places to show the various languages. An undefined spec parameter means\n * to test the current locale.\n *\n * @param {ilib.Locale|string|undefined} spec locale specifier or locale object of the locale to test, or undefined\n * to test the current locale\n */\nfunction isNonLatinLocale (spec) {\n\tvar li = new LocaleInfo(spec),\n\t\tlocale = li.getLocale();\n\n    // We use the non-latin fonts for these languages (even though their scripts are technically considered latin)\n    var nonLatinLanguageOverrides = ['en-JP'];\n    // We use the latin fonts (with non-Latin fallback) for these languages (even though their scripts are non-latin)\n    var latinLanguageOverrides = ['ko'];\n\treturn (\n\t\t(\n\t\t\tli.getScript() !== 'Latn' ||                                              // the language actually is non-latin\n\t\t\tutils.indexOf(locale.getLanguage(), nonLatinLanguageOverrides) !== -1 ||  // the language is treated as non-latin\n\t\t\tutils.indexOf(locale.toString(), nonLatinLanguageOverrides) !== -1        // the combination of language and region is treated as non-latin\n\t\t) && (\n\t\t\tutils.indexOf(locale.getLanguage(), latinLanguageOverrides) < 0           // the non-latin language should be treated as latin\n\t\t)\n\t);\n}\n\n// enyo.updateI18NClasses should be called after every setLocale, but there isn't such a callback in current version\nfunction updateI18NClasses () {\n    var li = new LocaleInfo(); // for the current locale\n    var locale = li.getLocale();\n\tvar base = 'enyo-locale-';\n\n    // Remove old style definitions (hack style becouse enyo.dom doesn't have methods like enyo.dom.getBodyClasses, enyo.dom.removeBodyClass)\n    if (document && document.body && document.body.className) {\n        document.body.className = document.body.className.replace(new RegExp('(^|\\\\s)'+ base +'\\\\S*', 'g'), '');\n    }\n\n\tif (isNonLatinLocale(locale)) {\n\t\t// allow enyo to define other fonts for non-Latin languages, or for certain\n\t\t// Latin-based languages where the characters with some accents don't appear in the\n\t\t// regular fonts, creating a strange 'ransom note' look with a mix of fonts in the\n\t\t// same word. So, treat it like a non-Latin language in order to get all the characters\n\t\t// to display with the same font.\n\t\tdom.addBodyClass(base + 'non-latin');\n\t}\n\n\tvar scriptName = li.getScript();\n\tif (scriptName !== 'Latn' && scriptName !== 'Cyrl' && scriptName !== 'Grek') {\n\t\t// GF-45884: allow enyo to avoid setting italic fonts for those scripts that do not\n\t\t// commonly use italics\n\t\tdom.addBodyClass(base + 'non-italic');\n\t}\n\n\t// allow enyo to apply right-to-left styles to the app and widgets if necessary\n\tvar script = new ScriptInfo(scriptName);\n\tif (script.getScriptDirection() === 'rtl') {\n\t\tdom.addBodyClass(base + 'right-to-left');\n\t\tControl.prototype.rtl = true;\n\t} else {\n\t\tControl.prototype.rtl = false;\n\t}\n\n\t// allow enyo or the apps to give CSS classes that are specific to the language, country, or script\n\tif (locale.getLanguage()) {\n\t\tdom.addBodyClass(base + locale.getLanguage());\n\t\tif (locale.getScript()) {\n\t\t\tdom.addBodyClass(base + locale.getLanguage() + '-' + locale.getScript());\n\t\t\tif (locale.getRegion()) {\n\t\t\t\tdom.addBodyClass(base + locale.getLanguage() + '-' + locale.getScript() + '-' + locale.getRegion());\n\t\t\t}\n\t\t} else if (locale.getRegion()) {\n\t\t\tdom.addBodyClass(base + locale.getLanguage() + '-' + locale.getRegion());\n\t\t}\n\t}\n\tif (locale.getScript()) {\n\t\tdom.addBodyClass(base + locale.getScript());\n\t}\n\tif (locale.getRegion()) {\n\t\tdom.addBodyClass(base + locale.getRegion());\n\t}\n\t// Recreate the case mappers to use the just-recently-set locale\n \tsetCaseMappers();\n}\n\n// The ilib.ResBundle for the active locale used by $L\nvar resBundle;\n\n/*\n * Reset the $L function to use ilib instead of the dummy function that enyo\n * comes with by default.\n */\ni18n.$L.extend(function (sup) {\n\treturn function (string) {\n\t\tvar str;\n\t\tif (!resBundle) setLocale();\n\t\tif (typeof(string) === 'string') {\n\t\t\tstr = resBundle ? resBundle.getString(string) : string;\n\t\t} else if (typeof(string) === 'object') {\n\t\t\tif (typeof(string.key) !== 'undefined' && typeof(string.value) !== 'undefined') {\n\t\t\t\tstr = resBundle ? resBundle.getString(string.value, string.key) : string.value;\n\t\t\t} else {\n\t\t\t\tstr = '';\n\t\t\t}\n\t\t} else {\n\t\t\tstr = string;\n\t\t}\n\t\treturn sup.call(this, str.toString());\n\t};\n});\n\n/**\n * Set the locale for the strings that $L loads. This may reload the\n * string resources if necessary.\n * @param {string} spec the locale specifier\n */\nfunction setLocale (spec) {\n\tvar locale = new Locale(spec);\n\tif (!resBundle || spec !== resBundle.getLocale().getSpec()) {\n\t\tresBundle = i18n.$L.rb = new ResBundle({\n\t\t\tlocale: locale,\n\t\t\ttype: 'html',\n\t\t\tname: 'strings',\n\t\t\tsync: true,\n\t\t\tlengthen: true\t\t// if pseudo-localizing, this tells it to lengthen strings\n\t\t});\n\t}\n}\n\nvar toLowerCaseMapper, toUpperCaseMapper;\n\n/**\n * Set CaseMapper object references to ilib's current locale (its most recently set, by default)\n */\nfunction setCaseMappers () {\n\ttoLowerCaseMapper = new CaseMapper({direction: 'tolower'});\n\ttoUpperCaseMapper = new CaseMapper({direction: 'toupper'});\n}\n\n/**\n * Override Enyo's toLowerCase and toUpperCase methods with these fancy ones\n * that call iLib's locale-safe case mapper.\n */\nutils.toLowerCase.extend(function (sup) {\n\treturn function (inString) {\n\t\tif (inString != null) {\n\t\t\treturn toLowerCaseMapper.map(inString.toString());\n\t\t}\n\t\treturn inString;\n\t};\n});\nutils.toUpperCase.extend(function (sup) {\n\treturn function (inString) {\n\t\tif (inString != null) {\n\t\t\treturn toUpperCaseMapper.map(inString.toString());\n\t\t}\n\t\treturn inString;\n\t};\n});\n\n/**\n * This Enyo hook lets us know that the system locale has changed and gives\n * us a chance to update the iLib locale before Enyo broadcasts its\n * `onlocalechange` signal.\n * Provide an inLocale string, like 'en-US' or 'ja-JP', to conveniently set\n * that locale immediately. Provide nothing, and reset the locale back to the\n * browser's default language.\n */\ni18n.updateLocale.extend(function (sup) {\n\treturn function(inLocale) {\n\t\t// blow away the cache to force it to reload the manifest files for the new app\n\t\tif (ilib._load) ilib._load.manifest = undefined;\n\t\t// ilib handles falsy values and automatically uses local locale when encountered which\n\t\t// is expected and desired\n\t\tilib.setLocale(inLocale);\n\t\t// we supply whatever ilib determined was actually the locale based on what was passed in\n\t\tsetLocale(ilib.getLocale());\n\t\tupdateI18NClasses();\n\t\tsup.call(this);\n\t};\n});\n\n/**\n * Invalidates the current locale's resource bundle, allowing for it to be reloaded.\n */\nfunction invalidateResources() {\n\tdelete ResBundle.strings;\n\tresBundle = i18n.$L.rb = undefined;\n}\n\n// we go ahead and run this once during loading of iLib settings are valid\n// during the loads of later libraries.\ni18n.updateLocale(null, true);\n\nmodule.exports = {\n\tupdateI18NClasses: updateI18NClasses,\n\tisNonLatinLocale: isNonLatinLocale,\n\tinvalidateResources: invalidateResources\n};\n","var\n\tglue = require('./src/glue'),\n\tilib = require('./ilib/lib/ilib');\n\n// ensure the locale-specific date types are included\nrequire('./src/dates');\n\nilib.enyo = glue;\nilib.enyo.version = '2.7.0';\n\nmodule.exports = ilib;\n"]}