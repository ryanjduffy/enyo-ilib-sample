{"version":3,"sources":["lib/layout/src/Arranger/Arranger.js","lib/layout/src/CardArranger.js","lib/layout/src/Panels/Panels.js","lib/layout/src/FittableLayout/FittableLayout.js","lib/layout/src/FittableRows.js"],"names":[],"mappingsnZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/**\n* Contains the declaration for the {@link module:layout/Arranger~Arranger} kind.\n* @module layout/Arranger\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tutils = require('enyo/utils'),\n\tplatform = require('enyo/platform');\n\nvar\n\tLayout = require('enyo/Layout'),\n\tDom = require('enyo/dom');\n\n/**\n* {@link module:layout/Arranger~Arranger} is an {@link module:enyo/Layout~Layout} that considers one of the\n* controls it lays out as active. The other controls are placed relative to\n* the active control as makes sense for the layout.\n*\n* `layout/Arranger` supports dynamic layouts, meaning it's possible to transition\n* between an arranger's layouts\tvia animation. Typically, arrangers should lay out\n* controls using CSS transforms, since these are optimized for animation. To\n* support this, the controls in an arranger are absolutely positioned, and\n* the Arranger kind has an [accelerated]{@link module:layout/Arranger~Arranger#accelerated} property,\n* which marks controls for CSS compositing. The default setting of `'auto'` ensures\n* that this will occur if enabled by the platform.\n*\n* For more information, see the documentation on\n* [Arrangers]{@linkplain $dev-guide/building-apps/layout/arrangers.html} in the\n* Enyo Developer Guide.\n*\n* @class Arranger\n* @extends module:enyo/Layout~Layout\n* @public\n*/\nvar Arranger = module.exports = kind(\n\t/** @lends module:layout/Arranger~Arranger.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.Arranger',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Layout,\n\n\t/**\n\t* @private\n\t*/\n\tlayoutClass: 'enyo-arranger',\n\n\t/**\n\t* Flag indicating whether the Arranger should lay out controls using CSS\n\t* compositing. The default setting `('auto')` will mark controls for compositing\n\t* if the platform supports it.\n\t*\n\t* @type {String|Boolean}\n\t* @default 'auto'\n\t* @protected\n\t*/\n\taccelerated: 'auto',\n\n\t/**\n\t* A property of the drag event, used to calculate the amount that a drag will\n\t* move the layout.\n\t*\n\t* @type {String}\n\t* @default 'ddx'\n\t* @private\n\t*/\n\tdragProp: 'ddx',\n\n\t/**\n\t* A property of the drag event, used to calculate the direction of the drag.\n\t*\n\t* @type {String}\n\t* @default 'xDirection'\n\t* @private\n\t*/\n\tdragDirectionProp: 'xDirection',\n\n\t/**\n\t* A property of the drag event, used to calculate whether a drag should occur.\n\t*\n\t* @type {String}\n\t* @default 'horizontal'\n\t* @private\n\t*/\n\tcanDragProp: 'horizontal',\n\n\t/**\n\t* If set to `true`, transitions between non-adjacent arrangements will go\n\t* through the intermediate arrangements. This is useful when direct\n\t* transitions between arrangements would be visually jarring.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @protected\n\t*/\n\tincrementalPoints: false,\n\n\t/**\n\t* Called when removing an arranger (e.g., when switching a Panels control to a\n\t* different `arrangerKind`). Subkinds should implement this function to reset\n\t* whatever properties they've changed on child controls. Note that you **must**\n\t* call the superkind implementation in your subkind's `destroy()` function.\n\t*\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tvar c$ = this.container.getPanels();\n\t\t\tfor (var i=0, c; (c=c$[i]); i++) {\n\t\t\t\tc._arranger = null;\n\t\t\t}\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Arranges the given array of `controls` in the layout specified by `index`. When\n\t* implementing this method, rather than applying styling directly to controls, call\n\t* [arrangeControl()]{@link module:layout/Arranger~Arranger#arrangeControl} and pass in an arrangement\n\t* object with styling settings. The styles will then be applied via\n\t* [flowControl()]{@link module:layout/Arranger~Arranger#flowControl}.\n\t*\n\t* @param {module:enyo/Control~Control[]} controls\n\t* @param {Number} index\n\t* @virtual\n\t* @protected\n\t*/\n\tarrange: function (controls, index) {\n\t},\n\n\t/**\n\t* Sizes the controls in the layout. This method is called only at reflow time.\n\t* Note that the sizing operation has been separated from the layout done in\n\t* [arrange()]{@link module:layout/Arranger~Arranger#arrange} because it is expensive and not suitable\n\t* for dynamic layout.\n\t*\n\t* @virtual\n\t* @protected\n\t*/\n\tsize: function () {\n\t},\n\n\t/**\n\t* Called when a layout transition begins. Implement this method to perform\n\t* tasks that should only occur when a transition starts; for example, some\n\t* controls might be shown or hidden. In addition, the `transitionPoints`\n\t* array may be set on the container to dictate the named arrangements\n\t* between which the transition occurs.\n\t*\n\t* @protected\n\t*/\n\tstart: function () {\n\t\tvar f = this.container.fromIndex, t = this.container.toIndex;\n\t\tvar p$ = this.container.transitionPoints = [f];\n\t\t// optionally add a transition point for each index between from and to.\n\t\tif (this.incrementalPoints) {\n\t\t\tvar d = Math.abs(t - f) - 2;\n\t\t\tvar i = f;\n\t\t\twhile (d >= 0) {\n\t\t\t\ti = i + (t < f ? -1 : 1);\n\t\t\t\tp$.push(i);\n\t\t\t\td--;\n\t\t\t}\n\t\t}\n\t\tp$.push(this.container.toIndex);\n\t},\n\n\t/**\n\t* Called when a layout transition completes. Implement this method to\n\t* perform tasks that should only occur when a transition ends; for\n\t* example, some controls might be shown or hidden.\n\t*\n\t* @virtual\n\t* @protected\n\t*/\n\tfinish: function () {\n\t},\n\n\t/**\n\t* Called when dragging the layout, this method returns the difference in\n\t* pixels between the arrangement `a0` for layout setting `i0`\tand\n\t* arrangement `a1` for layout setting `i1`. This data is used to calculate\n\t* the percentage that a drag should move the layout between two active states.\n\t*\n\t* @param {Number} i0 - The initial layout setting.\n\t* @param {Object} a0 - The initial arrangement.\n\t* @param {Number} i1 - The target layout setting.\n\t* @param {Object} a1 - The target arrangement.\n\t* @virtual\n\t* @protected\n\t*/\n\tcalcArrangementDifference: function (i0, a0, i1, a1) {\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcanDragEvent: function (event) {\n\t\treturn event[this.canDragProp];\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcDragDirection: function (event) {\n\t\treturn event[this.dragDirectionProp];\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcDrag: function (event) {\n\t\treturn event[this.dragProp];\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdrag: function (dp, an, a, bn, b) {\n\t\tvar f = this.measureArrangementDelta(-dp, an, a, bn, b);\n\t\treturn f;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmeasureArrangementDelta: function (x, i0, a0, i1, a1) {\n\t\tvar d = this.calcArrangementDifference(i0, a0, i1, a1);\n\t\tvar s = d ? x / Math.abs(d) : 0;\n\t\ts = s * (this.container.fromIndex > this.container.toIndex ? -1 : 1);\n\t\treturn s;\n\t},\n\n\t/**\n\t* Arranges the panels, with the panel at `index` being designated as active.\n\t*\n\t* @param  {Number} index - The index of the active panel.\n\t* @private\n\t*/\n\t_arrange: function (index) {\n\t\t// guard against being called before we've been rendered\n\t\tif (!this.containerBounds) {\n\t\t\tthis.reflow();\n\t\t}\n\t\tvar c$ = this.getOrderedControls(index);\n\t\tthis.arrange(c$, index);\n\t},\n\n\t/**\n\t* Arranges `control` according to the specified `arrangement`.\n\t*\n\t* Note that this method doesn't actually modify `control` but rather sets the\n\t* arrangement on a private member of the control to be retrieved by\n\t* {@link module:layout/Panels~Panels}.\n\t*\n\t* @param  {module:enyo/Control~Control} control\n\t* @param  {Object} arrangement\n\t* @private\n\t*/\n\tarrangeControl: function (control, arrangement) {\n\t\tcontrol._arranger = utils.mixin(control._arranger || {}, arrangement);\n\t},\n\n\t/**\n\t* Called before HTML is rendered. Applies CSS to panels to ensure GPU acceleration if\n\t* [accelerated]{@link module:layout/Arranger~Arranger#accelerated} is `true`.\n\t*\n\t* @private\n\t*/\n\tflow: function () {\n\t\tthis.c$ = [].concat(this.container.getPanels());\n\t\tthis.controlsIndex = 0;\n\t\tfor (var i=0, c$=this.container.getPanels(), c; (c=c$[i]); i++) {\n\t\t\tDom.accelerate(c, !c.preventAccelerate && this.accelerated);\n\t\t\tif (platform.safari) {\n\t\t\t\t// On Safari-desktop, sometimes having the panel's direct child set to accelerate isn't sufficient\n\t\t\t\t// this is most often the case with Lists contained inside another control, inside a Panels\n\t\t\t\tvar grands=c.children;\n\t\t\t\tfor (var j=0, kid; (kid=grands[j]); j++) {\n\t\t\t\t\tDom.accelerate(kid, this.accelerated);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Called during \"rendered\" phase to [size]{@link module:layout/Arranger~Arranger#size} the controls.\n\t*\n\t* @private\n\t*/\n\treflow: function () {\n\t\tvar cn = this.container.hasNode();\n\t\tthis.containerBounds = cn ? {width: cn.clientWidth, height: cn.clientHeight} : {};\n\t\tthis.size();\n\t},\n\n\t/**\n\t* If the {@link module:layout/Panels~Panels} has an arrangement, flows each control according to that\n\t* arrangement.\n\t*\n\t* @private\n\t*/\n\tflowArrangement: function () {\n\t\tvar a = this.container.arrangement;\n\t\tif (a) {\n\t\t\tfor (var i=0, c$=this.container.getPanels(), c; (c=c$[i]) && (a[i]); i++) {\n\t\t\t\tthis.flowControl(c, a[i]);\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t* Lays out the given `control` according to the settings stored in the\n\t* `arrangement` object. By default, `flowControl()` will apply settings for\n\t* `left`, `top`, and `opacity`. This method should only be implemented to apply\n\t* other settings made via [arrangeControl()]{@link module:layout/Arranger~Arranger#arrangeControl}.\n\t*\n\t* @param {module:enyo/Control~Control} control - The control to be laid out.\n\t* @param {Object} arrangement - An object whose members specify the layout settings.\n\t* @protected\n\t*/\n\tflowControl: function (control, arrangement) {\n\t\tArranger.positionControl(control, arrangement);\n\t\tvar o = arrangement.opacity;\n\t\tif (o != null) {\n\t\t\tArranger.opacifyControl(control, o);\n\t\t}\n\t},\n\n\t/**\n\t* Gets an array of controls arranged in state order.\n\t* note: optimization, dial around a single array.\n\t*\n\t* @param  {Number} index     - The index of the active panel.\n\t* @return {module:enyo/Control~Control[]}   - Ordered array of controls.\n\t* @private\n\t*/\n\tgetOrderedControls: function (index) {\n\t\tvar whole = Math.floor(index);\n\t\tvar a = whole - this.controlsIndex;\n\t\tvar sign = a > 0;\n\t\tvar c$ = this.c$ || [];\n\t\tfor (var i=0; i<Math.abs(a); i++) {\n\t\t\tif (sign) {\n\t\t\t\tc$.push(c$.shift());\n\t\t\t} else {\n\t\t\t\tc$.unshift(c$.pop());\n\t\t\t}\n\t\t}\n\t\tthis.controlsIndex = whole;\n\t\treturn c$;\n\t}\n});\n\n/**\n* Positions a control via transform--`translateX/translateY` if supported,\n* falling back to `left/top` if not.\n*\n* @lends module:layout/Arranger~Arranger\n* @param  {module:enyo/Control~Control} control - The control to position.\n* @param  {Object} bounds        - The new bounds for `control`.\n* @param  {String} unit          - The unit for `bounds` members.\n* @public\n*/\nArranger.positionControl = function (control, bounds, unit) {\n\tunit = unit || 'px';\n\tif (!this.updating) {\n\t\t// IE10 uses setBounds because of control hit caching problems seem in some apps\n\t\tif (Dom.canTransform() && !control.preventTransform && platform.ie !== 10) {\n\t\t\tvar l = bounds.left, t = bounds.top;\n\t\t\tl = utils.isString(l) ? l : l && (l + unit);\n\t\t\tt = utils.isString(t) ? t : t && (t + unit);\n\t\t\tDom.transform(control, {translateX: l || null, translateY: t || null});\n\t\t} else {\n\t\t\t// If a previously positioned control has subsequently been marked with\n\t\t\t// preventTransform, we need to clear out any old translation values.\n\t\t\tif (Dom.canTransform() && control.preventTransform) {\n\t\t\t\tDom.transform(control, {translateX: null, translateY: null});\n\t\t\t}\n\t\t\tcontrol.setBounds(bounds, unit);\n\t\t}\n\t}\n};\n\n/**\n* Sets the opacity value for a given control.\n*\n* @lends module:layout/Arranger~Arranger\n* @param {module:enyo/Control~Control} inControl - The control whose opacity is to be set.\n* @param {Number} inOpacity - The new opacity value for the control.\n* @public\n*/\nArranger.opacifyControl = function (inControl, inOpacity) {\n\t// FIXME: very high/low settings of opacity can cause a control to\n\t// blink so cap this here.\n\tinControl.applyStyle('opacity', inOpacity > 0.99 ? 1 : (inOpacity < 0.01 ? 0 : inOpacity));\n};\n","/**\n* Contains the declaration for the {@link module:layout/CardArranger~CardArranger} kind.\n* @module layout/CardArranger\n*/\n\nvar\n\tkind = require('enyo/kind');\n\nvar\n\tArranger = require('./Arranger');\n\n\n/**\n* {@link module:layout/CardArranger~CardArranger} is a {@link module:layout/Arranger~Arranger}\n* that displays only one active control. The non-active controls are hidden with\n* `setShowing(false)`. Transitions between arrangements are handled by fading\n* from one control to the next.\n*\n* For more information, see the documentation on\n* [Arrangers]{@linkplain $dev-guide/building-apps/layout/arrangers.html} in the\n* Enyo Developer Guide.\n*\n* @class CardArranger\n* @extends module:layout/Arranger~Arranger\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:layout/CardArranger~CardArranger.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.CardArranger',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Arranger,\n\n\t/**\n\t* @private\n\t*/\n\tlayoutClass: 'enyo-arranger enyo-arranger-fit',\n\n\t/**\n\t* @see {@link module:layout/Arranger~Arranger#calcArrangementDifference}\n\t* @protected\n\t*/\n\tcalcArrangementDifference: function (i0, a0, i1, a1) {\n\t\treturn this.containerBounds.width;\n\t},\n\n\t/**\n\t* Applies opacity to the activation and deactivation of panels. Expects the passed-in\n\t* array of controls to be ordered such that the first control in the array is the active\n\t* panel.\n\t*\n\t* @see {@link module:layout/Arranger~Arranger#arrange}\n\t* @protected\n\t*/\n\tarrange: function (controls, arrangement) {\n\t\tfor (var i=0, c, v; (c=controls[i]); i++) {\n\t\t\tv = (i === 0) ? 1 : 0;\n\t\t\tthis.arrangeControl(c, {opacity: v});\n\t\t}\n\t},\n\n\t/**\n\t* Shows the active panel at the start of transition. Also triggers a resize on\n\t* the active panel if it wasn't previously showing.\n\t*\n\t* @see {@link module:layout/Arranger~Arranger#start}\n\t* @method\n\t* @protected\n\t*/\n\tstart: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tvar c$ = this.container.getPanels();\n\t\t\tfor (var i=0, c; (c=c$[i]); i++) {\n\t\t\t\tvar wasShowing=c.showing;\n\t\t\t\tc.setShowing(i == this.container.fromIndex || i == (this.container.toIndex));\n\t\t\t\tif (c.showing && !wasShowing) {\n\t\t\t\t\tc.resize();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* Hides all non-active panels when the transition completes.\n\t*\n\t* @see {@link module:layout/Arranger~Arranger#finish}\n\t* @method\n\t* @protected\n\t*/\n\tfinish: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tvar c$ = this.container.getPanels();\n\t\t\tfor (var i=0, c; (c=c$[i]); i++) {\n\t\t\t\tc.setShowing(i == this.container.toIndex);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* Ensures all panels are showing and visible when the arranger is destroyed.\n\t*\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tvar c$ = this.container.getPanels();\n\t\t\tfor (var i=0, c; (c=c$[i]); i++) {\n\t\t\t\tArranger.opacifyControl(c, 1);\n\t\t\t\tif (!c.showing) {\n\t\t\t\t\tc.setShowing(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t})\n});\n","/**\n* Contains the declaration for the {@link module:layout/Panels~Panels} kind.\n* @module layout/Panels\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tdispatcher = require('enyo/dispatcher'),\n\tdom = require('enyo/dom'),\n\tplatform = require('enyo/platform'),\n\tutils = require('enyo/utils'),\n\tAnimator = require('enyo/Animator');\n\nvar\n\tCardArranger = require('../CardArranger');\n\n/**\n* Fires at the start of a panel transition, when [setIndex()]{@link module:layout/Panels~Panels#setIndex}\n* is called, and also during dragging.\n*\n* @event module:layout/Panels~Panels#onTransitionStart\n* @type {Object}\n* @property {Number} fromIndex - The index of the old panel.\n* @property {Number} toIndex   - The index of the new panel.\n* @public\n*/\n\n/**\n* Fires at the end of a panel transition, when [setIndex()]{@link module:layout/Panels~Panels#setIndex}\n* is called, and also during dragging.\n*\n* @event module:layout/Panels~Panels#onTransitionFinish\n* @type {Object}\n* @property {Number} fromIndex - The index of the old panel.\n* @property {Number} toIndex   - The index of the new panel.\n* @public\n*/\n\n/**\n* The {@link module:layout/Panels~Panels} kind is designed to satisfy a variety of common use cases\n* for application layout. Using `Panels`, controls may be arranged as (among\n* other things) a carousel, a set of collapsing panels, a card stack that fades\n* between panels, or a grid.\n*\n* Any Enyo control may be placed inside a `Panels`, but by convention we\n* refer to each of these controls as a \"panel\". From the set of panels in a\n* `Panels`, one is considered to be active. The active panel is set by index\n* using the [setIndex()]{@link module:layout/Panels~Panels#setIndex} method. The actual layout of\n* the panels typically changes each time the active panel is set, such that the new\n* active panel has the most prominent position.\n*\n* For more information, see the documentation on\n* [Panels]{@linkplain $dev-guide/building-apps/layout/panels.html} in the\n* Enyo Developer Guide.\n*\n* @class Panels\n* @extends module:enyo/Control~Control\n* @ui\n* @public\n*/\nvar Panels = module.exports = kind(\n\t/** @lends module:layout/Panels~Panels.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.Panels',\n\n\t/**\n\t* @private\n\t*/\n\tclasses: 'enyo-panels',\n\n\t/**\n\t* @lends module:layout/Panels~Panels.prototype\n\t* @private\n\t*/\n\tpublished: {\n\t\t/**\n\t\t* The index of the active panel. The layout of panels is controlled by the\n\t\t* [layoutKind]{@link module:layout/Panels~Panels#layoutKind}, but as a rule, the active panel\n\t\t* is displayed in the most prominent position. For example, in the (default)\n\t\t* {@link module:layout/CardArranger~CardArranger} layout, the active panel is shown and the other\n\t\t* panels are hidden.\n\t\t*\n\t\t* @type {Number}\n\t\t* @default  0\n\t\t* @public\n\t\t*/\n\t\tindex: 0,\n\n\t\t/**\n\t\t* Indicates whether the user may drag between panels.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default  true\n\t\t* @public\n\t\t*/\n\t\tdraggable: true,\n\n\t\t/**\n\t\t* Indicates whether the panels animate when transitioning, e.g., when\n\t\t* [setIndex()]{@link module:layout/Panels~Panels#setIndex} is called.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default  true\n\t\t* @public\n\t\t*/\n\t\tanimate: true,\n\n\t\t/**\n\t\t* Indicates whether panels \"wrap around\" when moving past the end.\n\t\t* The actual effect depends upon the arranger in use.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default  false\n\t\t* @public\n\t\t*/\n\t\twrap: false,\n\n\t\t/**\n\t\t* The arranger kind to be used for dynamic layout.\n\t\t*\n\t\t* @type {String}\n\t\t* @default  'CardArranger'\n\t\t* @public\n\t\t*/\n\t\tarrangerKind: CardArranger,\n\n\t\t/**\n\t\t* By default, each panel will be sized to fit the Panels' width when the\n\t\t* screen size is sufficiently narrow (less than 800px). Set to `false` to\n\t\t* avoid this behavior.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default  true\n\t\t* @public\n\t\t*/\n\t\tnarrowFit: true\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tevents: {\n\t\tonTransitionStart: '',\n\t\tonTransitionFinish: ''\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thandlers: {\n\t\tondragstart: 'dragstart',\n\t\tondrag: 'drag',\n\t\tondragfinish: 'dragfinish',\n\t\tonscroll: 'domScroll'\n\t},\n\n\t/**\n\t* @private\n\t*/\n\ttools: [\n\t\t{kind: Animator, onStep: 'step', onEnd: 'animationEnded'}\n\t],\n\n\t/**\n\t* Tracks completion percentage for a transition between two panels.\n\t*\n\t* @private\n\t*/\n\tfraction: 0,\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis.transitionPoints = [];\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.arrangerKindChanged();\n\t\t\tthis.narrowFitChanged();\n\t\t\tthis.indexChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\trendered: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tdispatcher.makeBubble(this, 'scroll');\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tdomScroll: function (sender, event) {\n\t\tif (this.hasNode()) {\n\t\t\tif (this.node.scrollLeft > 0) {\n\t\t\t\t// Reset scrollLeft position\n\t\t\t\tthis.node.scrollLeft = 0;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tinitComponents: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis.createChrome(this.tools);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tarrangerKindChanged: function () {\n\t\tthis.setLayoutKind(this.arrangerKind);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tnarrowFitChanged: function () {\n\t\tthis.addRemoveClass(Panels.getNarrowClass(), this.narrowFit);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\t// When the entire panels is going away, take note so we don't try and do single-panel\n\t\t\t// remove logic such as changing the index and reflowing when each panel is destroyed\n\t\t\tthis.destroying = true;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Adjusts the index if the removed control is the active panel and reflows the layout.\n\t*\n\t* @method\n\t* @private\n\t*/\n\tremoveControl: kind.inherit(function (sup) {\n\t\treturn function (control) {\n\t\t\t// Skip extra work during panel destruction.\n\t\t\tif (this.destroying) {\n\t\t\t\treturn sup.apply(this, arguments);\n\t\t\t}\n\t\t\t// adjust index if the current panel is being removed\n\t\t\t// so it's either the previous panel or the first one.\n\t\t\tvar newIndex = -1;\n\t\t\tvar controlIndex = utils.indexOf(control, this.controls);\n\t\t\tif (controlIndex === this.index) {\n\t\t\t\tnewIndex = Math.max(controlIndex - 1, 0);\n\t\t\t}\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (newIndex !== -1 && this.controls.length > 0) {\n\t\t\t\tthis.setIndex(newIndex);\n\t\t\t\tthis.flow();\n\t\t\t\tthis.reflow();\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* Designed to be overridden in kinds derived from Panels that have\n\t* non-panel client controls.\n\t*\n\t* @return {Boolean} [description]\n\t* @protected\n\t* @todo  Assume that this should take a control as a parameter.\n\t*/\n\tisPanel: function () {\n\t\treturn true;\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tflow: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis.arrangements = [];\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\treflow: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis.arrangements = [];\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.refresh();\n\t\t};\n\t}),\n\n\t/**\n\t* Returns the array of contained panels. Subclasses may override this if they\n\t* don't want the arranger to lay out all of their children.\n\t*\n\t* @return {module:enyo/Control~Control[]} - The array of contained panels.\n\t*/\n\tgetPanels: function () {\n\t\tvar p = this.controlParent || this;\n\t\treturn p.children;\n\t},\n\n\t/**\n\t* Returns a reference to the active panel--i.e., the panel at the specified index.\n\t*\n\t* @return {module:enyo/Control~Control} - The active panel.\n\t*/\n\tgetActive: function () {\n\t\tvar p$ = this.getPanels();\n\t\t//Constrain the index within the array of panels, needed if wrapping is enabled\n\t\tvar index = this.index % p$.length;\n\t\tif (index < 0) {\n\t\t\tindex += p$.length;\n\t\t}\n\t\treturn p$[index];\n\t},\n\n\t/**\n\t* Returns a reference to the {@link module:enyo/Animator~Animator} instance used to\n\t* animate panel transitions. The Panels' animator may be used to set the\n\t* duration of panel transitions, e.g.:\n\t*\n\t* ```\n\t* this.getAnimator().setDuration(1000);\n\t* ```\n\t*\n\t* @return {module:enyo/Animator~Animator} - The {@link module:enyo/Animator~Animator} instance used to animate\n\t* panel transitions.\n\t* @public\n\t*/\n\tgetAnimator: function () {\n\t\treturn this.$.animator;\n\t},\n\n\t/**\n\t* Sets the active panel to the panel specified by the given index.\n\t* Note that if the [animate]{@link module:layout/Panels~Panels#animate} property is set to\n\t* `true`, the active panel will animate into view.\n\t*\n\t* @param {Number} index - The index of the panel to activate.\n\t* @public\n\t*/\n\tsetIndex: function (index) {\n\t\t// override setIndex so that indexChanged is called\n\t\t// whether this.index has actually changed or not. Also, do\n\t\t// index clamping here.\n\t\tvar prevIndex = this.get('index'),\n\t\t\tnewIndex = this.clamp(index);\n\t\tthis.index = newIndex;\n\t\tthis.notifyObservers('index', prevIndex, newIndex);\n\t},\n\n\t/**\n\t* Sets the active panel to the panel specified by the given index.\n\t* The transition to the next panel will be immediate and will not be animated,\n\t* regardless of the value of the [animate]{@link module:layout/Panels~Panels#animate} property.\n\t*\n\t* @param {Number} index - The index of the panel to activate.\n\t* @public\n\t*/\n\tsetIndexDirect: function (index) {\n\t\tif (this.animate) {\n\t\t\tthis.animate = false;\n\t\t\tthis.setIndex(index);\n\t\t\tthis.animate = true;\n\t\t} else {\n\t\t\tthis.setIndex(index);\n\t\t}\n\t},\n\n\t/**\n\t* Selects the named component owned by the Panels and returns its index.\n\t*\n\t* @param  {String} name - The name of the panel to activate.\n\t* @return {Number} The index of the newly activated panel.\n\t* @public\n\t*/\n\tselectPanelByName: function (name) {\n\t\tif (!name) {\n\t\t\treturn;\n\t\t}\n\t\tvar idx = 0;\n\t\tvar panels = this.getPanels();\n\t\tvar len = panels.length;\n\t\tfor (; idx < len; ++idx) {\n\t\t\tif (name === panels[idx].name) {\n\t\t\t\tthis.setIndex(idx);\n\t\t\t\treturn idx;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Transitions to the previous panel--i.e., the panel whose index value is one\n\t* less than that of the current active panel.\n\t*\n\t* @public\n\t*/\n\tprevious: function () {\n\t\tvar prevIndex = this.index - 1;\n\t\tif (this.wrap && prevIndex < 0) {\n\t\t\tprevIndex = this.getPanels().length - 1;\n\t\t}\n\t\tthis.setIndex(prevIndex);\n\t},\n\n\t/**\n\t* Transitions to the next panel--i.e., the panel whose index value is one\n\t* greater than that of the current active panel.\n\t*\n\t* @public\n\t*/\n\tnext: function () {\n\t\tvar nextIndex = this.index+1;\n\t\tif (this.wrap && nextIndex >= this.getPanels().length) {\n\t\t\tnextIndex = 0;\n\t\t}\n\t\tthis.setIndex(nextIndex);\n\t},\n\n\t/**\n\t* Ensures that `value` references a valid panel, accounting for\n\t* [wrapping]{@link module:layout/Panels~Panels#wrap}.\n\t*\n\t* @param  {Number} value - The index of a panel.\n\t* @return {Number}       - The valid index of a panel.\n\t* @private\n\t*/\n\tclamp: function (value) {\n\t\tvar l = this.getPanels().length;\n\t\tif (this.wrap) {\n\t\t\t// FIXME: dragging makes assumptions about direction and from->start indexes.\n\t\t\t//return value < 0 ? l : (value > l ? 0 : value);\n\t\t\tvalue %= l;\n\t\t\treturn (value < 0) ? value + l : value;\n\t\t} else {\n\t\t\treturn Math.max(0, Math.min(value, l - 1));\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tindexChanged: function (old) {\n\t\tthis.lastIndex = old;\n\t\tif (!this.dragging && this.$.animator && this.hasNode()) {\n\t\t\tif (this.shouldAnimate()) {\n\t\t\t\t// If we're mid-transition, complete it and indicate we need to transition\n\t\t\t\tif (this.$.animator.isAnimating()) {\n\t\t\t\t\tthis.transitionOnComplete = true;\n\t\t\t\t\tthis.$.animator.complete();\n\t\t\t\t} else {\n\t\t\t\t\tthis.animateTransition();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.directTransition();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Returns `true` if the panels should animate in the transition from `fromIndex` to\n\t* `toIndex`. This can be overridden in a {@glossary subkind} for greater customization.\n\t*\n\t* @protected\n\t*/\n\tshouldAnimate: function () {\n\t\treturn this.animate;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstep: function (sender) {\n\t\tthis.fraction = sender.value;\n\t\tthis.stepTransition();\n\t\treturn true;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tanimationEnded: function (sender, event) {\n\t\tthis.completed();\n\t\treturn true;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcompleted: function () {\n\t\tthis.finishTransition();\n\n\t\t// Animator.onEnd fires asynchronously so we need an internal flag to indicate we need\n\t\t// to start the next transition when the previous completes\n\t\tif (this.transitionOnComplete) {\n\t\t\tthis.transitionOnComplete = false;\n\t\t\tthis.animateTransition();\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragstart: function (sender, event) {\n\t\tif (this.draggable && this.layout && this.layout.canDragEvent(event)) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.dragstartTransition(event);\n\t\t\tthis.dragging = true;\n\t\t\tthis.$.animator.stop();\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdrag: function (sender, event) {\n\t\tif (this.dragging) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.dragTransition(event);\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragfinish: function (sender, event) {\n\t\tif (this.dragging) {\n\t\t\tthis.dragging = false;\n\t\t\tevent.preventTap();\n\t\t\tthis.dragfinishTransition(event);\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragstartTransition: function (event) {\n\t\tif (!this.$.animator.isAnimating()) {\n\t\t\tvar f = this.fromIndex = this.index;\n\t\t\tthis.toIndex = f - (this.layout ? this.layout.calcDragDirection(event) : 0);\n\t\t} else {\n\t\t\tthis.verifyDragTransition(event);\n\t\t}\n\t\tthis.fromIndex = this.clamp(this.fromIndex);\n\t\tthis.toIndex = this.clamp(this.toIndex);\n\t\t//this.log(this.fromIndex, this.toIndex);\n\t\tthis.fireTransitionStart();\n\t\tif (this.layout) {\n\t\t\tthis.layout.start();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragTransition: function (event) {\n\t\t// note: for simplicity we choose to calculate the distance directly between\n\t\t// the first and last transition point.\n\t\tvar d = this.layout ? this.layout.calcDrag(event) : 0;\n\t\tvar t$ = this.transitionPoints, s = t$[0], f = t$[t$.length-1];\n\t\tvar as = this.fetchArrangement(s);\n\t\tvar af = this.fetchArrangement(f);\n\t\tvar dx = this.layout ? this.layout.drag(d, s, as, f, af) : 0;\n\t\tvar dragFail = d && !dx;\n\t\tif (dragFail) {\n\t\t\t//this.log(dx, s, as, f, af);\n\t\t}\n\t\tthis.fraction += dx;\n\t\tvar fr = this.fraction;\n\t\tif (fr > 1 || fr < 0 || dragFail) {\n\t\t\tif (fr > 0 || dragFail) {\n\t\t\t\tthis.dragfinishTransition(event);\n\t\t\t}\n\t\t\tthis.dragstartTransition(event);\n\t\t\tthis.fraction = 0;\n\t\t\t// FIXME: account for lost fraction\n\t\t\t//this.dragTransition(event);\n\t\t}\n\t\tthis.stepTransition();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragfinishTransition: function (event) {\n\t\tthis.verifyDragTransition(event);\n\t\tthis.setIndex(this.toIndex);\n\t\t// note: if we're still dragging, then we're at a transition boundary\n\t\t// and should fire the finish event\n\t\tif (this.dragging) {\n\t\t\tthis.fireTransitionFinish();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tverifyDragTransition: function (event) {\n\t\tvar d = this.layout ? this.layout.calcDragDirection(event) : 0;\n\t\tvar f = Math.min(this.fromIndex, this.toIndex);\n\t\tvar t = Math.max(this.fromIndex, this.toIndex);\n\t\tif (d > 0) {\n\t\t\tvar s = f;\n\t\t\tf = t;\n\t\t\tt = s;\n\t\t}\n\t\tif (f != this.fromIndex) {\n\t\t\tthis.fraction = 1 - this.fraction;\n\t\t}\n\t\t//this.log('old', this.fromIndex, this.toIndex, 'new', f, t);\n\t\tthis.fromIndex = f;\n\t\tthis.toIndex = t;\n\t},\n\n\t/**\n\t* Resets the panels without sending any events.\n\t*\n\t* @private\n\t*/\n\trefresh: function () {\n\t\tif (this.$.animator && this.$.animator.isAnimating()) {\n\t\t\tthis.$.animator.stop();\n\t\t}\n\t\tthis.setupTransition();\n\t\tthis.fraction = 1;\n\t\tthis.stepTransition();\n\t\tthis.transitioning = false;\n\t\tthis.completeTransition();\n\t\tthis.dragging = false;\n\t},\n\n\t/**\n\t* Transitions to the new index without animation\n\t*\n\t* @private\n\t*/\n\tdirectTransition: function () {\n\t\tthis.startTransition();\n\t\tthis.fraction = 1;\n\t\tthis.stepTransition();\n\t\tthis.finishTransition();\n\t},\n\n\t/**\n\t* Animates the transition to the new index\n\t*\n\t* @private\n\t*/\n\tanimateTransition: function () {\n\t\tthis.startTransition();\n\t\tthis.$.animator.play({\n\t\t\tstartValue: this.fraction\n\t\t});\n\t},\n\n\t/**\n\t* Starts the transition between two panels. if a transition is already in progress, this is\n\t* a no-op.\n\t*\n\t* @private\n\t*/\n\tstartTransition: function () {\n\t\tif (!this.transitioning) {\n\t\t\tthis.transitioning = true;\n\t\t\tthis.setupTransition();\n\t\t\tthis.fireTransitionStart();\n\t\t}\n\t},\n\n\t/**\n\t* Sets up transition state\n\t*\n\t* @private\n\t*/\n\tsetupTransition: function () {\n\t\tthis.fromIndex = this.fromIndex != null ? this.fromIndex : this.lastIndex || 0;\n\t\tthis.toIndex = this.toIndex != null ? this.toIndex : this.index;\n\t\tif (this.layout) {\n\t\t\tthis.layout.start();\n\t\t}\n\t},\n\n\t/**\n\t* Completes the transition between two panels.\n\t*\n\t* @private\n\t*/\n\tfinishTransition: function () {\n\t\tthis.transitioning = false;\n\t\tthis.completeTransition(true);\n\t},\n\n\t/**\n\t* Completes the transition by performing any tasks to be run when the transition ends,\n\t* including firing events and clean-up.\n\t*\n\t* @param {Boolean} [fire] - If `true`, will fire the {@link module:layout/Panels~Panels#onTransitionFinish}\n\t*\tevent if deemed necessary.\n\t* @private\n\t*/\n\tcompleteTransition: function (fire) {\n\t\tif (this.layout) {\n\t\t\tthis.layout.finish();\n\t\t}\n\n\t\tif (fire) {\n\t\t\tthis.fireTransitionFinish(true);\n\t\t} else {\n\t\t\tthis.clearTransitionData();\n\t\t}\n\t},\n\n\t/**\n\t* Clears transition-related data.\n\t*\n\t* @private\n\t*/\n\tclearTransitionData: function() {\n\t\tthis.transitionPoints = [];\n\t\tthis.fraction = 0;\n\t\tthis.fromIndex = this.toIndex = null;\n\t},\n\n\t/**\n\t* @fires module:layout/Panels~Panels#onTransitionStart\n\t* @private\n\t*/\n\tfireTransitionStart: function () {\n\t\tvar t = this.startTransitionInfo;\n\t\tif (this.hasNode() && (!t || (t.fromIndex != this.fromIndex || t.toIndex != this.toIndex))) {\n\t\t\tthis.startTransitionInfo = {fromIndex: this.fromIndex, toIndex: this.toIndex};\n\t\t\tthis.doTransitionStart(utils.clone(this.startTransitionInfo));\n\t\t}\n\t},\n\n\t/**\n\t* @fires module:layout/Panels~Panels#onTransitionFinish\n\t* @param {Boolean} [clearData] - If `true`, {@link module:layout/Panels~Panels#clearTransitionData} will be\n\t*\tcalled after recording the values needed for the callback.\n\t* @private\n\t*/\n\tfireTransitionFinish: function (clearData) {\n\t\tvar t = this.finishTransitionInfo,\n\t\t\tfromIndex = t ? t.fromIndex : null,\n\t\t\ttoIndex = t ? t.toIndex : null;\n\t\tif (this.hasNode() && (!t || (fromIndex != this.fromIndex || toIndex != this.toIndex))) {\n\t\t\t\tif (this.transitionOnComplete) {\n\t\t\t\tthis.finishTransitionInfo = {fromIndex: toIndex, toIndex: this.lastIndex};\n\t\t\t\t} else {\n\t\t\t\t\tthis.finishTransitionInfo = {fromIndex: this.lastIndex, toIndex: this.index};\n\t\t\t\t}\n\t\t\tif (clearData) {\n\t\t\t\tthis.clearTransitionData();\n\t\t\t}\n\t\t\t\tthis.doTransitionFinish(utils.clone(this.finishTransitionInfo));\n\t\t} else if (clearData) {\n\t\t\tthis.clearTransitionData();\n\t\t}\n\t},\n\n\t/**\n\t* Interpolates between arrangements as needed.\n\t*\n\t* @private\n\t*/\n\tstepTransition: function () {\n\t\tif (this.hasNode()) {\n\t\t\t// select correct transition points and normalize fraction.\n\t\t\tvar t$ = this.transitionPoints;\n\t\t\tvar r = (this.fraction || 0) * (t$.length-1);\n\t\t\tvar i = Math.floor(r);\n\t\t\tr = r - i;\n\t\t\tvar s = t$[i], f = t$[i+1];\n\t\t\t// get arrangements and lerp between them\n\t\t\tvar s0 = this.fetchArrangement(s);\n\t\t\tvar s1 = this.fetchArrangement(f);\n\t\t\tthis.arrangement = s0 && s1 ? Panels.lerp(s0, s1, r) : (s0 || s1);\n\t\t\tif (this.arrangement && this.layout) {\n\t\t\t\tthis.layout.flowArrangement();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Fetches the arrangement at a specified index, initializing it if necessary.\n\t*\n\t* @param  {Number} index - The index of the desired arrangement from `transitionPoints`.\n\t* @return {Object} The desired arrangement object.\n\t* @private\n\t*/\n\tfetchArrangement: function (index) {\n\t\tif ((index != null) && !this.arrangements[index] && this.layout) {\n\t\t\tthis.layout._arrange(index);\n\t\t\tthis.arrangements[index] = this.readArrangement(this.getPanels());\n\t\t}\n\t\treturn this.arrangements[index];\n\t},\n\n\t/**\n\t* Iterates over `panels` and retrieves a copy of each panel's `_arranger`.\n\t*\n\t* @param  {module:enyo/Control~Control[]} panels - The array of panels.\n\t* @return {Object[]}              - The array of arrangement objects.\n\t*/\n\treadArrangement: function (panels) {\n\t\tvar r = [];\n\t\tfor (var i=0, c$=panels, c; (c=c$[i]); i++) {\n\t\t\tr.push(utils.clone(c._arranger));\n\t\t}\n\t\treturn r;\n\t},\n\n\t/**\n\t* @lends module:layout/Panels~Panels\n\t* @private\n\t*/\n\tstatics: {\n\t\t/**\n\t\t* Returns `true` for iOS and Android phone form factors, or when window width\n\t\t* is 800px or less. Approximates work done using media queries in `Panels.css`.\n\t\t*\n\t\t* @return {Boolean} `true` for narrow devices or viewports; otherwise, `false`.\n\t\t* @public\n\t\t*/\n\t\tisScreenNarrow: function () {\n\t\t\tif(Panels.isNarrowDevice()) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn dom.getWindowWidth() <= 800;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* Returns the class name to apply for narrow fitting. See media queries\n\t\t* in `Panels.css`.\n\t\t*\n\t\t* @return {String} The CSS class name to apply.\n\t\t*/\n\t\tgetNarrowClass: function () {\n\t\t\tif(Panels.isNarrowDevice()) {\n\t\t\t\treturn 'enyo-panels-force-narrow';\n\t\t\t} else {\n\t\t\t\treturn 'enyo-panels-fit-narrow';\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* Lerps between arrangements.\n\t\t*\n\t\t* @param  {Object[]} a0     - Array of current arrangement objects.\n\t\t* @param  {Object[]} a1     - Array of target arrangement object.\n\t\t* @param  {Number} fraction - The fraction (between 0 and 1) with which to lerp.\n\t\t* @return {Object[]}        - Array of arrangements that is `fraction` between\n\t\t* \t`a0` and `a1`.\n\t\t* @private\n\t\t*/\n\t\tlerp: function (a0, a1, fraction) {\n\t\t\tvar r = [];\n\t\t\tfor (var i=0, k$=utils.keys(a0), k; (k=k$[i]); i++) {\n\t\t\t\tr.push(this.lerpObject(a0[k], a1[k], fraction));\n\t\t\t}\n\t\t\treturn r;\n\t\t},\n\n\t\t/**\n\t\t* Lerps between the values of arrangement objects.\n\t\t*\n\t\t* @param  {Object} a0       - The source arragement.\n\t\t* @param  {Object} a1       - The destination arragement.\n\t\t* @param  {Number} fraction - The fraction (between 0 and 1) with which to lerp.\n\t\t*\n\t\t* @return {Object}          - The lerped arrangement.\n\t\t* @private\n\t\t*/\n\t\tlerpObject: function (a0, a1, fraction) {\n\t\t\tvar b = utils.clone(a0), n, o;\n\t\t\t// a1 might be undefined when deleting panels\n\t\t\tif (a1) {\n\t\t\t\tfor (var i in a0) {\n\t\t\t\t\tn = a0[i];\n\t\t\t\t\to = a1[i];\n\t\t\t\t\tif (n != o) {\n\t\t\t\t\t\tb[i] = n - (n - o) * fraction;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t* Tests User Agent strings to identify narrow devices.\n\t\t*\n\t\t* @return {Boolean} `true` if the current device is a narrow device;\n\t\t* otherwise, `false`.\n\t\t*/\n\t\tisNarrowDevice: function () {\n\t\t\tvar ua = navigator.userAgent;\n\t\t\tswitch (platform.platformName) {\n\t\t\t\tcase 'ios':\n\t\t\t\t\treturn (/iP(?:hone|od;(?: U;)? CPU) OS (\\d+)/).test(ua);\n\t\t\t\tcase 'android':\n\t\t\t\t\treturn (/Mobile/).test(ua) && (platform.android > 2);\n\t\t\t\tcase 'androidChrome':\n\t\t\t\t\treturn (/Mobile/).test(ua);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n});\n","/**\n* Contains the declaration for the {@link module:layout/FittableLayout~FittableLayout}, {@link module:layout/FittableLayout~FittableColumnsLayout}\n* and {@link module:layout/FittableLayout~FittableRowsLayout} kinds.\n* @module layout/FittableLayout\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tdom = require('enyo/dom'),\n\tControl = require('enyo/Control'),\n\tLayout = require('enyo/Layout');\n\nvar detector = document.createElement('div'),\n\tflexAvailable =\n\t\t(detector.style.flexBasis !== undefined) ||\n\t\t(detector.style.webkitFlexBasis !== undefined) ||\n\t\t(detector.style.mozFlexBasis !== undefined) ||\n\t\t(detector.style.msFlexBasis !== undefined);\n\n/**\n* {@link module:layout/FittableLayout~FittableLayout} provides the base\n* positioning and boundary logic for the fittable layout strategy. The fittable\n* layout strategy is based on laying out items in either a set of rows or a set\n* of columns, with most of the items having natural size, but one item expanding\n* to fill the remaining space. The item that expands is labeled with the\n* attribute `fit: true`.\n*\n* The subkinds {@link module:layout/FittableLayout~FittableColumnsLayout} and\n* {@link module:layout/FittableLayout~FittableRowsLayout} (or _their_ subkinds)\n* are used for layout rather than `FittableLayout` because they specify\n* properties that the framework expects to be available when laying items out.\n*\n* When available on the platform, you can opt-in to have `FittableLayout` use\n* CSS flexible box (flexbox) to implement fitting behavior on the platform for\n* better performance; Enyo will fall back to JavaScript-based layout on older\n* platforms. Three subtle differences between the flexbox and JavaScript\n* implementations should be noted:\n\n* - When using flexbox, vertical margins (i.e., `margin-top`, `margin-bottom`) will\n* not collapse; when using JavaScript layout, vertical margins will collapse according\n* to static layout rules.\n*\n* - When using flexbox, non-fitting children of the Fittable must not be sized\n* using percentages of the container (even if set to `position: relative`);\n* this is explicitly not supported by the flexbox 2013 spec.\n*\n* - The flexbox-based Fittable implementation will respect multiple children\n* with `fit: true` (the fitting space will be divided equally between them).\n* This is NOT supported by the JavaScript implementation, and you should not rely\n* upon this behavior if you are deploying to platforms without flexbox support.\n*\n* The flexbox implementation was added to Enyo 2.5.0 as an optional performance\n* optimization; to use the optimization, set `useFlex: true` on the Fittable\n* container.  This will cause flexbox to be used when possible.\n*\n* @class FittableLayout\n* @extends module:enyo/Layout~Layout\n* @public\n*/\nvar FittableLayout = module.exports = kind(/** @lends module:layout/FittableLayout~FittableLayout.prototype */{\n\tname: 'enyo.FittableLayout',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Layout,\n\n\t/**\n\t* @private\n\t*/\n\tnoDefer: true,\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: function () {\n\t\tLayout.prototype._constructor.apply(this, arguments);\n\n\t\t// Add the force-ltr class if we're in RTL mode, but this control is set explicitly to NOT be in RTL mode.\n\t\tthis.container.addRemoveClass('force-left-to-right', (Control.prototype.rtl && !this.container.get('rtl')) );\n\n\t\t// Flexbox optimization is determined by global flexAvailable and per-instance opt-in useFlex flag\n\t\tthis.useFlex = flexAvailable && (this.container.useFlex === true);\n\t\tif (this.useFlex) {\n\t\t\tthis.container.addClass(this.flexLayoutClass);\n\t\t} else {\n\t\t\tthis.container.addClass(this.fitLayoutClass);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcFitIndex: function () {\n\t\tvar aChildren = this.container.children,\n\t\t\toChild,\n\t\t\tn;\n\n\t\tfor (n=0; n<aChildren.length; n++) {\n\t\t\toChild = aChildren[n];\n\t\t\tif (oChild.fit && oChild.showing) {\n\t\t\t\treturn n;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetFitControl: function () {\n\t\tvar aChildren = this.container.children,\n\t\t\toFitChild = aChildren[this.fitIndex];\n\n\t\tif (!(oFitChild && oFitChild.fit && oFitChild.showing)) {\n\t\t\tthis.fitIndex = this.calcFitIndex();\n\t\t\toFitChild = aChildren[this.fitIndex];\n\t\t}\n\t\treturn oFitChild;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tshouldReverse: function () {\n\t\treturn this.container.rtl && this.orient === 'h';\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: function () {\n\t\tLayout.prototype.destroy.apply(this, arguments);\n\t\t\n\t\tif (this.container) {\n\t\t\tthis.container.removeClass(this.useFlex ? this.flexLayoutClass : this.fitLayoutClass);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetFirstChild: function() {\n\t\tvar aChildren = this.getShowingChildren();\n\n\t\tif (this.shouldReverse()) {\n\t\t\treturn aChildren[aChildren.length - 1];\n\t\t} else {\n\t\t\treturn aChildren[0];\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetLastChild: function() {\n\t\tvar aChildren = this.getShowingChildren();\n\n\t\tif (this.shouldReverse()) {\n\t\t\treturn aChildren[0];\n\t\t} else {\n\t\t\treturn aChildren[aChildren.length - 1];\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetShowingChildren: function() {\n\t\tvar a = [],\n\t\t\tn = 0,\n\t\t\taChildren = this.container.children,\n\t\t\tnLength   = aChildren.length;\n\n\t\tfor (;n<nLength; n++) {\n\t\t\tif (aChildren[n].showing) {\n\t\t\t\ta.push(aChildren[n]);\n\t\t\t}\n\t\t}\n\n\t\treturn a;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_reflow: function(sMeasureName, sClienMeasure, sAttrBefore, sAttrAfter) {\n\t\tthis.container.addRemoveClass('enyo-stretch', !this.container.noStretch);\n\t\t\n\t\tvar oFitChild       = this.getFitControl(),\n\t\t\toContainerNode  = this.container.hasNode(),  // Container node\n\t\t\tnTotalSize     = 0,                          // Total container width or height without padding\n\t\t\tnBeforeOffset   = 0,                         // Offset before fit child\n\t\t\tnAfterOffset    = 0,                         // Offset after fit child\n\t\t\toPadding,                                    // Object containing t,b,r,l paddings\n\t\t\toBounds,                                     // Bounds object of fit control\n\t\t\toLastChild,\n\t\t\toFirstChild,\n\t\t\tnFitSize;\n\n\t\tif (!oFitChild || !oContainerNode) { return true; }\n\n\t\toPadding   = dom.calcPaddingExtents(oContainerNode);\n\t\toBounds    = oFitChild.getBounds();\n\t\tnTotalSize = oContainerNode[sClienMeasure] - (oPadding[sAttrBefore] + oPadding[sAttrAfter]);\n\n\t\t// If total size is zero, there's nothing for us to do (and the Control\n\t\t// we're doing layout for is probably hidden). In this case, we\n\t\t// short-circuit and return `true` to signify that we want to reflow\n\t\t// again the next time the Control is shown.\n\t\tif (nTotalSize === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.shouldReverse()) {\n\t\t\toFirstChild  = this.getFirstChild();\n\t\t\tnAfterOffset = nTotalSize - (oBounds[sAttrBefore] + oBounds[sMeasureName]);\n\n\t\t\tvar nMarginBeforeFirstChild = dom.getComputedBoxValue(oFirstChild.hasNode(), 'margin', sAttrBefore) || 0;\n\n\t\t\tif (oFirstChild == oFitChild) {\n\t\t\t\tnBeforeOffset = nMarginBeforeFirstChild;\n\t\t\t} else {\n\t\t\t\tvar oFirstChildBounds      = oFirstChild.getBounds(),\n\t\t\t\t\tnSpaceBeforeFirstChild = oFirstChildBounds[sAttrBefore] - (oPadding[sAttrBefore] || 0);\n\n\t\t\t\tnBeforeOffset = oBounds[sAttrBefore] + nMarginBeforeFirstChild - nSpaceBeforeFirstChild;\n\t\t\t}\n\t\t} else {\n\t\t\toLastChild    = this.getLastChild();\n\t\t\tnBeforeOffset = oBounds[sAttrBefore] - (oPadding[sAttrBefore] || 0);\n\n\t\t\tvar nMarginAfterLastChild = dom.getComputedBoxValue(oLastChild.hasNode(), 'margin', sAttrAfter) || 0;\n\n\t\t\tif (oLastChild == oFitChild) {\n\t\t\t\tnAfterOffset = nMarginAfterLastChild;\n\t\t\t} else {\n\t\t\t\tvar oLastChildBounds = oLastChild.getBounds(),\n\t\t\t\t\tnFitChildEnd     = oBounds[sAttrBefore] + oBounds[sMeasureName],\n\t\t\t\t\tnLastChildEnd    = oLastChildBounds[sAttrBefore] + oLastChildBounds[sMeasureName] +  nMarginAfterLastChild;\n\n\t\t\t\tnAfterOffset = nLastChildEnd - nFitChildEnd;\n\t\t\t}\n\t\t}\n\n\t\tnFitSize = nTotalSize - (nBeforeOffset + nAfterOffset);\n\t\toFitChild.applyStyle(sMeasureName, nFitSize + 'px');\n\t},\n\n\t/**\n\t* Assigns any static layout properties not dependent on changes to the\n\t* rendered component or container sizes, etc.\n\t* \n\t* @public\n\t*/\n\tflow: function() {\n\t\tif (this.useFlex) {\n\t\t\tvar i,\n\t\t\t\tchildren = this.container.children,\n\t\t\t\tchild;\n\t\t\tthis.container.addClass(this.flexLayoutClass);\n\t\t\tthis.container.addRemoveClass('nostretch', this.container.noStretch);\n\t\t\tfor (i=0; i<children.length; i++) {\n\t\t\t\tchild = children[i];\n\t\t\t\tchild.addClass('enyo-flex-item');\n\t\t\t\tchild.addRemoveClass('flex', child.fit);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Updates the layout to reflect any changes made to the layout container or\n\t* the contained components.\n\t*\n\t* @public\n\t*/\n\treflow: function() {\n\t\tif (!this.useFlex) {\n\t\t\tif (this.orient == 'h') {\n\t\t\t\treturn this._reflow('width', 'clientWidth', 'left', 'right');\n\t\t\t} else {\n\t\t\t\treturn this._reflow('height', 'clientHeight', 'top', 'bottom');\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t* @lends module:layout/FittableLayout~FittableLayout.prototype\n\t*/\n\tstatics: {\n\t\t/**\n\t\t* Indicates whether flexbox optimization can be used.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default  false\n\t\t* @private\n\t\t*/\n\t\tflexAvailable: flexAvailable\n\t}\n});\n\n/**\n* {@link module:layout/FittableLayout~FittableColumnsLayout} provides a\n* container in which items are laid out in a set of vertical columns, with most\n* of the items having natural size, but one expanding to fill the remaining\n* space. The one that expands is labeled with the attribute `fit: true`.\n*\n* `FittableColumnsLayout` is meant to be used as a value for the `layoutKind`\n* property of other kinds. `layoutKind` provides a way to add layout behavior in\n* a pluggable fashion while retaining the ability to use a specific base kind.\n*\n* For more information, see the documentation on\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\n* Enyo Developer Guide.\n*\n* @class FittableColumnsLayout\n* @extends module:layout/FittableLayout~FittableLayout\n* @public\n*/\n\n/**\n* The declaration for {@link module:layout/FittableLayout~FittableColumnsLayout}\n*/\nmodule.exports.Columns = kind(/** @lends module:layout/FittableLayout~FittableColumnsLayout.prototype */{\n\tname        : 'enyo.FittableColumnsLayout',\n\tkind        : FittableLayout,\n\torient      : 'h',\n\tfitLayoutClass : 'enyo-fittable-columns-layout',\n\tflexLayoutClass: 'enyo-flex-container columns'\n});\n\n\n/**\n* {@link module:layout/FittableLayout~FittableRowsLayout} provides a container\n* in which items are laid out in a set of horizontal rows, with most of the\n* items having natural size, but one expanding to fill the remaining space. The\n* one that expands is labeled with the attribute `fit: true`.\n*\n* `FittableRowsLayout` is meant to be used as a value for the `layoutKind`\n* property of other kinds. `layoutKind` provides a way to add layout behavior in\n* a pluggable fashion while retaining the ability to use a specific base kind.\n*\n* For more information, see the documentation on\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\n* Enyo Developer Guide.\n*\n* @class FittableRowsLayout\n* @extends module:layout/FittableLayout~FittableLayout\n* @public\n*/\n\n/**\n* The declaration for {@link module:layout/FittableLayout~FittableRowsLayout}\n*/\nmodule.exports.Rows = kind(\n\t/** @lends module:layout/FittableLayout~FittableRowsLayout.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname        : 'enyo.FittableRowsLayout',\n\n\t/**\n\t* @private\n\t*/\n\tkind        : FittableLayout,\n\n\t/**\n\t* Layout CSS class used to fit rows.\n\t*\n\t* @type {String}\n\t* @default 'enyo-fittable-rows-layout'\n\t* @public\n\t*/\n\tfitLayoutClass : 'enyo-fittable-rows-layout',\n\n\t/**\n\t* The orientation of the layout.\n\t*\n\t* @type {String}\n\t* @default 'v'\n\t* @public\n\t*/\n\torient      : 'v',\n\n\t/**\n\t* @private\n\t*/\n\tflexLayoutClass: 'enyo-flex-container rows'\n});\n","/**\n* Contains the declaration for the {@link module:layout/FittableRows~FittableRows} kind.\n* @module layout/FittableRows\n*/\n\nvar\n\tkind = require('enyo/kind')\t;\n\nvar\n\tFittableLayout = require('./FittableLayout'),\n\tFittableRowsLayout = FittableLayout.Rows;\n\n/**\n* {@link module:layout/FittableRows~FittableRows} provides a container in which items are laid out in a\n* set\tof horizontal rows, with most of the items having natural size, but one\n* expanding to fill the remaining space. The one that expands is labeled with\n* the attribute `fit: true`.\n*\n* For more information, see the documentation on\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\n* Enyo Developer Guide.\n*\n* @class FittableRows\n* @extends module:enyo/Control~Control\n* @ui\n* @public\n*/\nmodule.exports = kind(/** @lends module:layout/FittableRows~FittableRows.prototype */{\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.FittableRows',\n\n\t/**\n\t* A {@glossary kind} used to manage the size and placement of child\n\t* [components]{@link module:enyo/Component~Component}.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @private\n\t*/\n\tlayoutKind: FittableRowsLayout,\n\n\t/**\n\t* By default, items in columns stretch to fit horizontally; set to `true` to\n\t* avoid this behavior.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tnoStretch: false\n});\n"]}